<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Gluster安装</title>
      <link href="/blog/2018/08/20/Gluster%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/08/20/Gluster%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Centos 7</li><li>Gluster 4.1</li></ul><p>使用三台机器配置.</p><p>192.168.1.100 server1</p><p>192.168.1.101 server2</p><p>192.168.1.102 server3</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>kubernetes的持久化需要使用gluster.这里基于Centos提供的Quick-Start教程验证后的记录.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Add-Yum-Repository"><a href="#Add-Yum-Repository" class="headerlink" title="Add Yum Repository"></a>Add Yum Repository</h3><p>添加gluster下载仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install centos-release-gluster</span><br></pre></td></tr></table></figure><h3 id="Use-XFS"><a href="#Use-XFS" class="headerlink" title="Use XFS"></a>Use XFS</h3><p>推荐使用XFS文件系统,这里我还是使用exts4,没有重新格式化文件系统.</p><h3 id="Install-Gluster-And-Start"><a href="#Install-Gluster-And-Start" class="headerlink" title="Install Gluster And Start"></a>Install Gluster And Start</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install glusterfs-server</span><br><span class="line">$ systemctl enable glusterd &amp;&amp; systemctl start glusterd</span><br></pre></td></tr></table></figure><h3 id="Set-Firewalld"><a href="#Set-Firewalld" class="headerlink" title="Set Firewalld"></a>Set Firewalld</h3><p>防火墙配置ip级别允许规则,默认是24007端口,但是每增加bricks都会新增监听端口,所以需要配置ip级别的许可.</p><p>centos7已经使用firewalld.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 允许指定ip.我使用三台机器做测试,每台机器要配置另外两台服务器的ip.</span><br><span class="line">$ firewall-cmd --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;192.168.1.101&apos; accept&quot;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="Set-Trusted-Pool"><a href="#Set-Trusted-Pool" class="headerlink" title="Set Trusted Pool"></a>Set Trusted Pool</h3><p>这里使用的三台机器,在server1将server2和server3添加到Trust Pool.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># /etc/hosts需要配置映射.</span><br><span class="line">$ gluster peer probe server2</span><br><span class="line">$ gluster peer probe server3</span><br></pre></td></tr></table></figure><h3 id="Create-a-Volume"><a href="#Create-a-Volume" class="headerlink" title="Create a Volume"></a>Create a Volume</h3><p>在三台服务器上分别创建/bricks/brick1/gv0目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /bricks/brick1/gv0</span><br></pre></td></tr></table></figure><p>挂载目录到gluster上.(任意节点执行命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这里选择的replicas模式,保证数据丢失,其他模式不在这里讨论.</span><br><span class="line">$ gluster volume create gv0 replica 3 server1:/bricks/brick1/gv0 server2:/bricks/brick1/gv0 server3:/bricks/brick1/gv0</span><br><span class="line">$ gluster volume start gv0</span><br></pre></td></tr></table></figure><p>查看volume信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ gluster volume info</span><br><span class="line">Volume Name: gv0</span><br><span class="line">Type: Replicate</span><br><span class="line">Volume ID: 5835a014-b598-467d-ba34-3301d6730d6f</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 1 x 3 = 3</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: server1:/bricks/brick1/gv0</span><br><span class="line">Brick2: server2:/bricks/brick1/gv0</span><br><span class="line">Brick3: server3:/bricks/brick1/gv0</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line">performance.client-io-threads: off</span><br></pre></td></tr></table></figure><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将server1:/gv0 挂在到/mnt目录</span><br><span class="line">$ mount -t glusterfs server1:/gv0 /mnt</span><br><span class="line"># 生成100个copy-test的文件</span><br><span class="line">$ for i in `seq -w 1 100`; do cp -rp /var/log/messages /mnt/copy-test-$i; done</span><br><span class="line"># 在三台机器上查看是否都有100个文件.</span><br><span class="line">$ ls -lA /bricks/brick1/gv0</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>推荐部署机器为奇数,不然会出现脑裂现象.(猜测使用了poxis算法)</li><li>gluster推荐使用<a href="https://zh.wikipedia.org/wiki/XFS" target="_blank" rel="noopener">xfs文件系统</a>,centos/Red Hat Enterprise Linux 7默认使用,创建系统时可能可能没有指定.</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li><a href="http://xiaqunfeng.cc/2017/07/06/XFS-vs-EXT4/" target="_blank" rel="noopener">XFS vs EXT4</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/ch-xfs" target="_blank" rel="noopener">THE XFS FILE SYSTEM</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="gluster-Quickstart"><a href="#gluster-Quickstart" class="headerlink" title="gluster-Quickstart"></a><a href="https://wiki.centos.org/SpecialInterestGroup/Storage/gluster-Quickstart" target="_blank" rel="noopener">gluster-Quickstart</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gluster Install </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes Pods指定镜像仓库</title>
      <link href="/blog/2018/08/15/Kubernetes-Pods%E6%8C%87%E5%AE%9A%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
      <url>/blog/2018/08/15/Kubernetes-Pods%E6%8C%87%E5%AE%9A%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>在创建pod时,image是从哪个仓库下载?应该如何指定公司的Regitry?最佳实践是什么?带着这些问题,记录自己的爬坑经历.</p><h2 id="镜像建议"><a href="#镜像建议" class="headerlink" title="镜像建议"></a>镜像建议</h2><ul><li>对每个镜像都指定明确的版本号(不要使用latest这样的版本号),减少去镜像仓库拉取的消耗.(可以学习kube的api,版本为X.Y.Z. X is the major version, Y is the minor version, and Z is the patch version) </li></ul><h2 id="使用镜像私仓"><a href="#使用镜像私仓" class="headerlink" title="使用镜像私仓"></a>使用镜像私仓</h2><ul><li><p>使用私仓时,需要配置认证信息.</p></li><li><p>pod中指定私仓优先级高于node指定私仓.</p></li></ul><h3 id="在node节点中配置-推荐"><a href="#在node节点中配置-推荐" class="headerlink" title="在node节点中配置(推荐)"></a>在node节点中配置(推荐)</h3><ul><li>与在每个pod中使用ImagePullSecrets相比,少了重复的配置代码.</li></ul><h4 id="配置认证信息"><a href="#配置认证信息" class="headerlink" title="配置认证信息"></a>配置认证信息</h4><ul><li>docker添加私仓认证信息,可参考<a href="https://docs.docker.com/engine/reference/commandline/login/#provide-a-password-using-stdin" target="_blank" rel="noopener">这里</a></li></ul><p>一般使用docker时,默认都是从docker hub上拉取镜像.正常拉取是不需要认证信息的,但在上传时需要认证信息.</p><p>在每个节点上配置登录认证信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 默认docker hub的地址是:https://index.docker.io/v1</span><br><span class="line">$ echo [密码] | docker login --username [用户名] --password-stdin [私仓服务器地址]</span><br><span class="line"># 认证后,会在$HOME/.docker/下生成config.json文件.如果指定退出则会删除该文件.</span><br></pre></td></tr></table></figure><h4 id="认证信息优先级"><a href="#认证信息优先级" class="headerlink" title="认证信息优先级"></a>认证信息优先级</h4><ul><li>{–root-dir:-/var/lib/kubelet}/config.json </li></ul><p>默认config.json不存在</p><ul><li>{cwd of kubelet}/config.json </li></ul><p>指定kubelet的工作空间路径,这种方式暂不考虑.</p><ul><li>${HOME}/.docker/config.json </li></ul><p>默认config.json是不存在的</p><ul><li>/.docker/config.json</li></ul><p>默认该目录不存在</p><h3 id="在pod中指定ImagePullSecrets"><a href="#在pod中指定ImagePullSecrets" class="headerlink" title="在pod中指定ImagePullSecrets"></a>在pod中指定ImagePullSecrets</h3><h4 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 实际上在pull镜像时创建一个虚拟的.docker/config.json文件.</span><br><span class="line">$ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL</span><br></pre></td></tr></table></figure><h4 id="pod中使用imagePulSecrets"><a href="#pod中使用imagePulSecrets" class="headerlink" title="pod中使用imagePulSecrets"></a>pod中使用imagePulSecrets</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: apps/v1 # 可以使用kubectl api-versions确定指定的版本</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: foo</span><br><span class="line">  namespace: awesomeapps</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: foo</span><br><span class="line">      image: janedoe/awesomeapp:v1</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">    - name: myregistryke</span><br></pre></td></tr></table></figure><p>以上两种方式,可以结合使用,建议每台node上都先配置认证信息,有需要再使用第二种方式.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a><a href="https://kubernetes.io/docs/concepts/containers/images/" target="_blank" rel="noopener">Images</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes配置私仓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes之pause容器</title>
      <link href="/blog/2018/08/12/kubernetes%E4%B9%8Bpause%E5%AE%B9%E5%99%A8/"/>
      <url>/blog/2018/08/12/kubernetes%E4%B9%8Bpause%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>之前对于docker的理解就是容器,但什么是容器呢?这个也没有去思考,借助pause容器的说明,顺便梳理下docker容器是什么?<br>docker容器实际是利用Linux的namespace和cgroup达到容器化的目的.</p><h2 id="Two-feature-of-Linux-kernel"><a href="#Two-feature-of-Linux-kernel" class="headerlink" title="Two feature of Linux kernel"></a>Two feature of Linux kernel</h2><p>linux有两个重要的特性,namespace和cgroup(control group).他们用于对资源进行隔离.<br>打个比方,就像你去买商品房,每套都是用混泥土墙隔开,保证别人不会闯到你家.这个可以类比为cgroup,而cgroup就是linux对机器的物理资源(cpu,内存,磁盘io)的隔离.买完了房子,那产权当然是属于你,而不是别人(可能有小三),另外,住进去后你要用水、用电、用网络,对其他人也一样,但是每户各自结算,这就像linux环境中的user namespace、network namespace等,属于环境的隔离.<br>由于能力有限,只能先这么去理解.这里罗列左耳朵耗子的文章.</p><ul><li><a href="https://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">DOCKER基础技术：LINUX NAMESPACE（上）</a></li><li><a href="https://coolshell.cn/articles/17029.html" target="_blank" rel="noopener">DOCKER基础技术：LINUX NAMESPACE（下）</a></li><li><a href="https://coolshell.cn/articles/17049.html" target="_blank" rel="noopener">DOCKER基础技术：LINUX CGROUP</a></li></ul><h2 id="AUFS-、DEVICEMAPPER"><a href="#AUFS-、DEVICEMAPPER" class="headerlink" title="AUFS 、DEVICEMAPPER"></a>AUFS 、DEVICEMAPPER</h2><p>对于这两个的理解,AUFS是文件管理系统,用于对文件进行分层.<br>具体可以看耗子叔的这两篇文章.<br><a href="https://coolshell.cn/articles/17061.html" target="_blank" rel="noopener">DOCKER基础技术：AUFS</a><br><a href="https://coolshell.cn/articles/17200.html" target="_blank" rel="noopener">DOCKER基础技术：DEVICEMAPPER</a></p><h2 id="Pause"><a href="#Pause" class="headerlink" title="Pause"></a>Pause</h2><p>In Kubernetes, the pause container serves as the “parent container” for all of the containers in your pod. The pause container has two core responsibilities. First, it serves as the basis of Linux namespace sharing in the pod. And second, with PID (process ID) namespace sharing enabled, it serves as PID 1 for each pod and reaps zombie processes.<br>对于pause的理解</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="What-are-Kubernetes-Pods-Anyway"><a href="#What-are-Kubernetes-Pods-Anyway" class="headerlink" title="What are Kubernetes Pods Anyway?"></a><a href="https://www.ianlewis.org/en/what-are-kubernetes-pods-anyway" target="_blank" rel="noopener">What are Kubernetes Pods Anyway?</a></h3><h3 id="The-Almighty-Pause-Container"><a href="#The-Almighty-Pause-Container" class="headerlink" title="The Almighty Pause Container"></a><a href="https://www.ianlewis.org/en/almighty-pause-container" target="_blank" rel="noopener">The Almighty Pause Container</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes的pause容器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes常见问题汇总</title>
      <link href="/blog/2018/08/11/kubernetes%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/blog/2018/08/11/kubernetes%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h3 id="报错-etc-kubernetes-pki-ca-crt-already-exists"><a href="#报错-etc-kubernetes-pki-ca-crt-already-exists" class="headerlink" title="报错:/etc/kubernetes/pki/ca.crt already exists"></a>报错:/etc/kubernetes/pki/ca.crt already exists</h3><ul><li><p>错误描述<br>在node节点操作kubeadm join时报出的错误.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[preflight] Running pre-flight checks.</span><br><span class="line">        [WARNING FileExisting-crictl]: crictl not found in system path</span><br><span class="line">[preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR Port-10250]: Port 10250 is in use</span><br><span class="line">        [ERROR DirAvailable--etc-kubernetes-manifests]: /etc/kubernetes/manifests is not empty</span><br><span class="line">        [ERROR FileAvailable--etc-kubernetes-pki-ca.crt]: /etc/kubernetes/pki/ca.crt already exists</span><br><span class="line">        [ERROR FileAvailable--etc-kubernetes-kubelet.conf]: /etc/kubernetes/kubelet.conf already exists</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br></pre></td></tr></table></figure></li><li><p>解决方案:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm reset</span><br><span class="line"># 再次执行kubeadm join</span><br><span class="line">$ kubeadm join &lt;ip&gt;:&lt;port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;*******&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes Q&amp;A </tag>
            
            <tag> kubernetes常见问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes之master搭建.md</title>
      <link href="/blog/2018/08/09/kubernetes%E4%B9%8Bmaster%E6%90%AD%E5%BB%BA/"/>
      <url>/blog/2018/08/09/kubernetes%E4%B9%8Bmaster%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ul><li>环境: centos7, kubernetes 1.11.2, docker-ce-17.03.2.ce</li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>Kubernetes对于Master机器的配置最低的要求是2G内存和2 Core CPU.<br>使用kubeadm来安装master cluster.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>1个master,2个node<br>k8s-master-1<br>192.168.1.100<br>k8s-node-1<br>192.168.1.101<br>k8s-node-2<br>192.168.1.102</p><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="端口检查"><a href="#端口检查" class="headerlink" title="端口检查"></a>端口检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Master node(s)</span><br><span class="line">Protocol Direction Port Range Purpose</span><br><span class="line">TCP Inbound 6443* Kubernetes API server</span><br><span class="line">TCP Inbound 2379-2380 etcd server client API</span><br><span class="line">TCP Inbound 10250 Kubelet API</span><br><span class="line">TCP Inbound 10251 kube-scheduler</span><br><span class="line">TCP Inbound 10252 kube-controller-manager</span><br><span class="line">TCP Inbound 10255 Read-only Kubelet API</span><br><span class="line"># Worker node(s)</span><br><span class="line">Protocol Direction Port Range Purpose</span><br><span class="line">TCP Inbound 10250 Kubelet API</span><br><span class="line">TCP Inbound 10255 Read-only Kubelet API</span><br><span class="line">TCP Inbound 30000-32767 NodePort Services**</span><br></pre></td></tr></table></figure><h4 id="环境调整"><a href="#环境调整" class="headerlink" title="环境调整"></a>环境调整</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 关闭SELinux(临时)</span><br><span class="line">$ setenforce 0</span><br><span class="line"># 永久关闭SELinux</span><br><span class="line">$ vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># 关闭swap</span><br><span class="line">$ swapoff -a</span><br><span class="line"># 添加kubernetes的yum仓库,这里使用阿里云的.</span><br><span class="line">$ vim /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><h4 id="设置hosts"><a href="#设置hosts" class="headerlink" title="设置hosts"></a>设置hosts</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line">192.1.1.100 k8s-master-1 </span><br><span class="line">192.1.1.100 k8s-node-1 </span><br><span class="line">192.1.1.100 k8s-node-2</span><br></pre></td></tr></table></figure><h3 id="Install-kubeadm-kubectl-kubelet"><a href="#Install-kubeadm-kubectl-kubelet" class="headerlink" title="Install kubeadm kubectl kubelet"></a>Install kubeadm kubectl kubelet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubeadm kubectl kubelet</span><br></pre></td></tr></table></figure><h3 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h3><p>kubernetes v1.11.2建议是用的docker版本是17.03版本,这里安装过程忽略.</p><h3 id="下载k8s相关镜像"><a href="#下载k8s相关镜像" class="headerlink" title="下载k8s相关镜像"></a>下载k8s相关镜像</h3><p>由于在使用kubeadm init时,下载的镜像从k8s.gcr.io上下载,国内网络被墙了,这边只能曲线救国.</p><p>利用docker hub做中转(因为docker hub是在国外的).</p><p>具体操作是现在github上创建相关的Docekrfile,然后再在docker hub上创建auto build仓库.最后从自己的docker hub仓库下载镜像后,重命名为k8s.gcr.io/kube-scheduler-amd64:v1.11.2等即可.</p><p>这里有个镜像拉取脚本.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">images=(</span><br><span class="line">  kube-proxy-amd64:v1.11.2</span><br><span class="line">  kube-scheduler-amd64:v1.11.2</span><br><span class="line">  kube-controller-manager-amd64:v1.11.2</span><br><span class="line">  kube-apiserver-amd64:v1.11.2</span><br><span class="line">  etcd-amd64:3.2.18</span><br><span class="line">  pause:3.1</span><br><span class="line">  kubernetes-dashboard-amd64:v1.8.3</span><br><span class="line">  k8s-dns-sidecar-amd64:1.14.8</span><br><span class="line">  k8s-dns-kube-dns-amd64:1.14.8</span><br><span class="line">  k8s-dns-dnsmasq-nanny-amd64:1.14.8</span><br><span class="line">  coredns:1.1.3</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull jilingjun1014/$imageName</span><br><span class="line">  docker tag jilingjun1014/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi jilingjun1014/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="master初始化"><a href="#master初始化" class="headerlink" title="master初始化"></a>master初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># master初始化</span><br><span class="line">$ kubeadm init --kubernetes-version=v1.11.2 --pod-network-cidr=10.244.0.0/16</span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line">  kubeadm join 116.62.177.233:6443 --token mfv9of.3bo96kuhwiuf2sh5 --discovery-token-ca-cert-hash sha256:d04a7670ef39c41900ca142e807e96a326d6f37300076e94ce2bda4c0934ff52</span><br><span class="line"># 配置kubectl认证(官方推荐用非root用户,这里为了方便起见,使用root用户)</span><br><span class="line">$ mkdir -p ~/.kube</span><br><span class="line">$ cp -i /etc/kubernetes/admin.conf ~/.kube/config</span><br><span class="line"># 非root用户需要配置</span><br><span class="line">$ chown $(id -u):$(id -g) $HOME/.kube/config </span><br><span class="line"># root用户需要配置</span><br><span class="line">$ echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; /etc/profile $ source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="Pod网络设置-flannel网络设置"><a href="#Pod网络设置-flannel网络设置" class="headerlink" title="Pod网络设置(flannel网络设置)"></a>Pod网络设置(flannel网络设置)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /etc/cni/net.d/</span><br><span class="line">$ cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;flannel&quot;,</span><br><span class="line">  &quot;delegate&quot;: &#123;</span><br><span class="line">    &quot;isDefaultGateway&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF </span><br><span class="line">$ mkdir /run/flannel/</span><br><span class="line">$ cat &lt;&lt;EOF&gt; /run/flannel/subnet.env</span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.244.1.0/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=true</span><br><span class="line">EOF</span><br><span class="line"># 添加网络类型</span><br><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h4 id="检查master是否创建成功"><a href="#检查master是否创建成功" class="headerlink" title="检查master是否创建成功"></a>检查master是否创建成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ready全部为1/1表示成功</span><br><span class="line">$ kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE    NAME                  READY STATUS RESTARTS AGE</span><br><span class="line">kube-system coredns-78fcdf6894-cvrzg 1/1 Running 0 3h   # 1/1表示正常</span><br><span class="line">kube-system coredns-78fcdf6894-sc2zd 1/1 Running 0 3h  # 1/1表示正常</span><br><span class="line">kube-system etcd-k8s-master-1 1/1 Running 0 3h</span><br><span class="line">kube-system kube-apiserver-k8s-master-1 1/1 Running 0 3h</span><br><span class="line">kube-system kube-controller-manager-k8s-master-1 1/1 Running 0 3h</span><br><span class="line">kube-system kube-flannel-ds-2dzz9 1/1 Running 0 3h   # 1/1表示正常</span><br><span class="line">kube-system kube-proxy-zgbcp 1/1 Running 0 3h</span><br><span class="line">kube-system kube-scheduler-k8s-master-1 1/1 Running 0 3h</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有pod信息,需要使用--all-namespaces,不然默认参数是default</span><br><span class="line">$ kubectl get pod --all-namespaces</span><br><span class="line"># 查看节点信息</span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">k8s-master-1 Ready master 1d v1.11.1</span><br><span class="line">k8s-node-1 Ready &lt;none&gt; 2h v1.11.1</span><br><span class="line">k8s-node-2 Ready &lt;none&gt; 1d v1.11.1</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="使用-kubeadm-搭建-kubernetes-1-10-2-集群"><a href="#使用-kubeadm-搭建-kubernetes-1-10-2-集群" class="headerlink" title="使用 kubeadm 搭建 kubernetes 1.10.2 集群"></a><a href="https://maiyang.me/post/2018-05-15-use-kubeadm-install-kubernetes-1.10.2/" target="_blank" rel="noopener">使用 kubeadm 搭建 kubernetes 1.10.2 集群</a></h3><h3 id="利用docker-hub做中转拉取google的k8s镜像"><a href="#利用docker-hub做中转拉取google的k8s镜像" class="headerlink" title="利用docker hub做中转拉取google的k8s镜像"></a><a href="https://www.cnblogs.com/cuishuai/p/8483496.html" target="_blank" rel="noopener">利用docker hub做中转拉取google的k8s镜像</a></h3><h3 id="深入玩转K8S之使用kubeadm安装Kubernetes-v1-10以及常见问题解答"><a href="#深入玩转K8S之使用kubeadm安装Kubernetes-v1-10以及常见问题解答" class="headerlink" title="深入玩转K8S之使用kubeadm安装Kubernetes v1.10以及常见问题解答"></a><a href="http://blog.51cto.com/devingeng/2096495" target="_blank" rel="noopener">深入玩转K8S之使用kubeadm安装Kubernetes v1.10以及常见问题解答</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes参考资料.md</title>
      <link href="/blog/2018/08/08/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99-md/"/>
      <url>/blog/2018/08/08/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99-md/</url>
      <content type="html"><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noopener">官方文档</a></h3><p>选择 Browse Docs</p><h3 id="Kubernetes中文社区"><a href="#Kubernetes中文社区" class="headerlink" title="Kubernetes中文社区"></a><a href="https://www.kubernetes.org.cn/" target="_blank" rel="noopener">Kubernetes中文社区</a></h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="什么是pause容器"><a href="#什么是pause容器" class="headerlink" title="什么是pause容器?"></a><a href="https://www.ianlewis.org/en/what-are-kubernetes-pods-anyway" target="_blank" rel="noopener">什么是pause容器?</a></h4>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes参考资料 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes之kubeadm安装.md</title>
      <link href="/blog/2018/08/08/Kubernetes%E4%B9%8Bkubeadm%E5%AE%89%E8%A3%85-md/"/>
      <url>/blog/2018/08/08/Kubernetes%E4%B9%8Bkubeadm%E5%AE%89%E8%A3%85-md/</url>
      <content type="html"><![CDATA[<ul><li>环境: Centos7, Kubernetes 1.11.2, docker-ce 17.03</li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>Kubernetes安装文档.</p><p>这里是一些安装软件的</p><ul><li><p>kubeadm: the command to bootstrap the cluster.</p></li><li><p>kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.</p></li><li><p>kubectl: the command line util to talk to your cluster.</p></li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="添加yum仓库配置文件"><a href="#添加yum仓库配置文件" class="headerlink" title="添加yum仓库配置文件"></a>添加yum仓库配置文件</h4><p>官方推荐的使用的packages.cloud.google.com地址不通,这里使用阿里云的yum仓库.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line"></span><br><span class="line">name=Kubernetes</span><br><span class="line"></span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line"></span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">repo_gpgcheck=0</span><br><span class="line"></span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line"></span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 临时关闭</span><br><span class="line"></span><br><span class="line">$ setenforce 0</span><br><span class="line"></span><br><span class="line"># 保证下次机器重启时生效.</span><br><span class="line"></span><br><span class="line">$ vim /etc/selinux/config</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h4 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ vim cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ sysctl --system</span><br></pre></td></tr></table></figure><h4 id="关闭系统swap"><a href="#关闭系统swap" class="headerlink" title="关闭系统swap"></a>关闭系统swap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br></pre></td></tr></table></figure><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>此处忽略,查看docker官方安装教程即可.</p><h3 id="Install-Master"><a href="#Install-Master" class="headerlink" title="Install Master"></a>Install Master</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">$ systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubeadm安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blackbox_exporter之安装</title>
      <link href="/blog/2018/08/06/Blackbox-exporter%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/08/06/Blackbox-exporter%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ul><li>环境:centos7, blackbox_exporter 0.12.0</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里使用blackbox_exporter的ssh和ping的检测功能.</p><h2 id="Build-with-Binary-And-Config-Systemd"><a href="#Build-with-Binary-And-Config-Systemd" class="headerlink" title="Build with Binary And Config Systemd"></a>Build with Binary And Config Systemd</h2><h3 id="Build-with-Binary"><a href="#Build-with-Binary" class="headerlink" title="Build with Binary"></a>Build with Binary</h3><ul><li><a href="https://prometheus.io/download/" target="_blank" rel="noopener">Download</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.12.0/blackbox_exporter-0.12.0.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf blackbox_exporter-0.12.0.linux-amd64.tar.gz &amp;&amp; mv blackbox_exporter-0.12.0.linux-amd64 blackbox_exporter-0.12.0</span><br></pre></td></tr></table></figure></li></ul><h3 id="Config-blackbox-yml"><a href="#Config-blackbox-yml" class="headerlink" title="Config blackbox.yml"></a>Config blackbox.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /opt/blackbox_exporter-0.12.0/blackbox.yml</span><br><span class="line">modules:</span><br><span class="line">  ssh_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    timeout: 15s</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - expect: &quot;^SSH-2.0-&quot;</span><br><span class="line">  icmp:</span><br><span class="line">    prober: icmp</span><br><span class="line">    timeout: 5s</span><br><span class="line">    icmp:</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot;</span><br></pre></td></tr></table></figure><h3 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/blackbox.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=blackbox.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/blackbox_exporter-0.12.0/blackbox_exporter --config.file=/opt/blackbox_exporter-0.12.0/blackbox.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable blackbox &amp;&amp; systemctl start blackbox</span><br></pre></td></tr></table></figure><h3 id="Test-blackbox"><a href="#Test-blackbox" class="headerlink" title="Test blackbox"></a>Test blackbox</h3><p>在浏览器中查看:<a href="http://10.1.1.26:9115" target="_blank" rel="noopener">http://10.1.1.26:9115</a></p><h2 id="Build-with-Docker"><a href="#Build-with-Docker" class="headerlink" title="Build with Docker"></a>Build with Docker</h2>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blackbox_exporter安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>altermanager之初体验</title>
      <link href="/blog/2018/08/05/altermanager%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/blog/2018/08/05/altermanager%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul><li>环境:centos7, alertmanager 0.15.1</li><li><a href="https://github.com/prometheus/alertmanager" target="_blank" rel="noopener">github</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚入门alertmanager,权当记录.</p><h2 id="Execute-Alertmanager"><a href="#Execute-Alertmanager" class="headerlink" title="Execute Alertmanager"></a>Execute Alertmanager</h2><h3 id="Build-with-Binary-and-Config-Systemd"><a href="#Build-with-Binary-and-Config-Systemd" class="headerlink" title="Build with Binary and Config Systemd"></a>Build with Binary and Config Systemd</h3><h4 id="Build-Binary"><a href="#Build-Binary" class="headerlink" title="Build Binary"></a>Build Binary</h4><ul><li><a href="https://prometheus.io/download/" target="_blank" rel="noopener">Download</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装在/opt下.下载地址prometheus官网有提供.</span><br><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/alertmanager/releases/download/v0.15.1/alertmanager-0.15.1.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf alertmanager-0.15.1.linux-amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">$ mv alertmanager-0.15.1.linux-amd64 alertmanager-0.15.1</span><br></pre></td></tr></table></figure></li></ul><h4 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/alertmanager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=alertmanager.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/alertmanager-0.15.1/alertmanager --config.file=/opt/alertmanager-0.15.1/alertmanager.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable alertmanager &amp;&amp; systemctl start alertmanager</span><br></pre></td></tr></table></figure><h3 id="Build-with-Docker"><a href="#Build-with-Docker" class="headerlink" title="Build with Docker"></a>Build with Docker</h3><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li><a href="https://prometheus.io/docs/alerting/configuration/" target="_blank" rel="noopener">alertmanager.yml example</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">$ vim /opt/alertmanager-0.15.1/alertmanager.yml</span><br><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_smarthost: &apos;smtp.mxhichina.com:25&apos;</span><br><span class="line">  smtp_from: &apos;xiaoxiangyoupin@basestonedata.com&apos;</span><br><span class="line">  smtp_auth_username: &apos;xiaoxiangyoupin@basestonedata.com&apos;</span><br><span class="line">  smtp_auth_password: &apos;Xiaoxiangyoupin1&apos;</span><br><span class="line">templates:</span><br><span class="line">  - &apos;/tmp/alert_test.txt&apos; # 发送消息模版.</span><br><span class="line">route:</span><br><span class="line">  group_by: [&apos;proxy&apos;]</span><br><span class="line">  group_wait: 10s</span><br><span class="line">  group_interval: 20s</span><br><span class="line">  repeat_interval: 5m # 警告发送成功后,等待该配置时间后才再次发送.</span><br><span class="line">  receiver: &apos;proxy-team&apos;</span><br><span class="line"># 以上配置会被routes标签继承或覆盖.</span><br><span class="line">#  routes: </span><br><span class="line">receivers: # 接收方集合</span><br><span class="line">- name: &apos;proxy-team&apos;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &apos;363054731@qq.com,jiangwe@basestonedata.com&apos;</span><br><span class="line">    text: &apos;报警&apos;</span><br><span class="line"># 防止过度报警.</span><br><span class="line">#inhibit_rules:</span><br><span class="line">#  - source_match:</span><br><span class="line">#      severity: &apos;critical&apos;</span><br><span class="line">#    target_match:</span><br><span class="line">#      severity: &apos;warning&apos;</span><br><span class="line">#    equal: [&apos;alertname&apos;, &apos;dev&apos;, &apos;instance&apos;]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alertmanager之初体验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus之监测服务器心跳</title>
      <link href="/blog/2018/08/04/prometheus%E4%B9%8B%E7%9B%91%E6%B5%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%83%E8%B7%B3/"/>
      <url>/blog/2018/08/04/prometheus%E4%B9%8B%E7%9B%91%E6%B5%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%83%E8%B7%B3/</url>
      <content type="html"><![CDATA[<ul><li>环境:centos7, prometheus 2.3.1, blackbox_export 0.12.0</li><li>其他<a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">exporter</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>blackbox能支持什么协议:HTTP, HTTPS (via the http prober), DNS, TCP socket and ICMP.<br>对于机器可用性的监测,最简单的莫过于使用ping或者ssh的方式.这里使用blackbox_exporter,基于使用node_exporter的经验,可能会认为需要将blackbox_exporter部署到每个节点下,而实际上通过一个部署了blackbox_exporter的节点去检测其他机器.</p><p><img src="file:///var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/WizNote/df0296f8-6c9a-4642-991a-8b3679667974/index_files/82906877.png" alt="img"></p><h2 id="Execute-blackbox-exporter"><a href="#Execute-blackbox-exporter" class="headerlink" title="Execute blackbox_exporter"></a>Execute blackbox_exporter</h2><h3 id="Build-with-Binary-and-Config-Systemd"><a href="#Build-with-Binary-and-Config-Systemd" class="headerlink" title="Build with Binary and Config Systemd"></a>Build with Binary and Config Systemd</h3><h4 id="Build-Binary"><a href="#Build-Binary" class="headerlink" title="Build Binary"></a>Build Binary</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># prometheus官网有下载地址</span><br><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.12.0/blackbox_exporter-0.12.0.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf blackbox_exporter-0.12.0.linux-amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">$ mv blackbox_exporter-0.12.0.linux-amd64 blackbox_exporter-0.12.0</span><br></pre></td></tr></table></figure><h4 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/blackbox.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=blackbox.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/blackbox_exporter-0.12.0/blackbox_exporter --config.file=/opt/blackbox_exporter-0.12.0/blackbox.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable blackbox &amp;&amp; systemctl start blackbox</span><br></pre></td></tr></table></figure><h3 id="Build-with-Docker"><a href="#Build-with-Docker" class="headerlink" title="Build with Docker"></a>Build with Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pwd指定宿主机配置文件路径,我一般都放在/data/blackbox_exporter/config目录下</span><br><span class="line">$ docker build -t blackbox_exporter .</span><br><span class="line">$ docker run -d -p 9115:9115 --name blackbox_exporter -v `pwd`:/config blackbox_exporter --config.file=/config/blackbox.yml</span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li><a href="https://github.com/prometheus/blackbox_exporter/blob/master/example.yml" target="_blank" rel="noopener">blackbox_exporter example.yml</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 这里暂时只使用ping和ssh验证主机有效性的方式,其他配置可参看github上的example.yml</span><br><span class="line">$ vim blackbox.yml</span><br><span class="line"># probe探测频率由prometheus中的scripe_timeout决定.</span><br><span class="line">modules:</span><br><span class="line">  ssh_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    timeout: 10s # 每次探测的网络超时时间,默认为10秒</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - expect: &quot;^SSH-2.0-&quot;</span><br><span class="line">  icmp:</span><br><span class="line">    prober: icmp</span><br><span class="line">    timeout: 10s</span><br><span class="line">    icmp:</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Test-Blackbox-Exporter"><a href="#Test-Blackbox-Exporter" class="headerlink" title="Test Blackbox Exporter"></a>Test Blackbox Exporter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 测试目标10.1.1.21的ping信息</span><br><span class="line">$ curl http://10.1.1.26:9115/probe\?module\=icmp\&amp;target\=10.1.1.25</span><br><span class="line">......</span><br><span class="line">probe_success 0  # 目标主机ping失败</span><br><span class="line"># 测试目标10.1.1.21 22的ssh信息</span><br><span class="line">$ curl http://10.1.1.26:9115/probe\?module\=ssh_banner\&amp;target\=10.1.1.21:22</span><br><span class="line">......</span><br><span class="line">probe_success 1  # 目标主机ssh通过</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="blackbox-exporter-github"><a href="#blackbox-exporter-github" class="headerlink" title="blackbox_exporter github"></a><a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="noopener">blackbox_exporter github</a></h3><h3 id="用Prometheus进行网络质量ping"><a href="#用Prometheus进行网络质量ping" class="headerlink" title="用Prometheus进行网络质量ping"></a><a href="https://www.iamle.com/archives/2130.html" target="_blank" rel="noopener">用Prometheus进行网络质量ping</a></h3>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus服务器心跳监测 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus配置zookeeper服务发现机制</title>
      <link href="/blog/2018/08/03/prometheus%E9%85%8D%E7%BD%AEzookeeper%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/08/03/prometheus%E9%85%8D%E7%BD%AEzookeeper%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<ul><li>环境:zookeeper 3.4.12, prometheus 2.3.1, centos7.3,node_exporter 0.16.0</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>prometheus监听时,一般时配置到prometheus.yml中.机器数量少还好,如果机器数量大,每次改动再重启,简直就是个噩梦.还好它支持服务发现.<br>如何文件、consul、zookeeper等.具体可以查看<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#%3Cazure_sd_config%3E" target="_blank" rel="noopener">官网配置</a>说明.</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="服务器及软件安装"><a href="#服务器及软件安装" class="headerlink" title="服务器及软件安装"></a>服务器及软件安装</h4><p>服务器    安装软件<br>10.1.1.25    prometheus,zookeeper<br>10.1.1.21<br>10.1.1.22<br>10.1.1.23    node_exporter<br>安装过程不在累述,自行百度即可.</p><h3 id="Config-Prometheus-yml"><a href="#Config-Prometheus-yml" class="headerlink" title="Config Prometheus.yml"></a>Config Prometheus.yml</h3><p>现在我需要监听118.10.2.34服务器中的3台虚拟机10.1.1.21:9100,10.1.1.22:9100,10.1.1.23:9100<br>zookeeper中的路径设置如下:<br>/proxy/118.10.2.34:22/10.1.1.21:9100<br>/proxy/118.10.2.34:22/10.1.1.22:9100<br>/proxy/118.10.2.34:22/10.1.1.23:9100</p><h4 id="promethues-yml"><a href="#promethues-yml" class="headerlink" title="promethues.yml"></a>promethues.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;proxy&apos;</span><br><span class="line">    honor_labels: true</span><br><span class="line">    serverset_sd_configs:</span><br><span class="line">    - servers:</span><br><span class="line">      - &apos;10.1.1.25:2181&apos; </span><br><span class="line">      paths:</span><br><span class="line">      - &apos;/proxy&apos;</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [&apos;__meta_serverset_path&apos;]    # 待抓取的服务器集合路径</span><br><span class="line">      regex: &apos;^/proxy/([^/]+)/([^/]+)&apos;                       # 路径匹配规则</span><br><span class="line">      target_label: &apos;meta_ip&apos;</span><br><span class="line">      replacement: &apos;$&#123;1&#125;&amp;$&#123;2&#125;&apos;</span><br><span class="line">    - source_labels: [&apos;meta_ip&apos;]</span><br><span class="line">      regex: &apos;(\d+.\d+.\d+.\d+):(\d+)&amp;(\d+.\d+.\d+.\d+):(\d+)&apos;  # 解析出ip</span><br><span class="line">      target_label: &apos;__address__&apos;</span><br><span class="line">      replacement: &apos;$&#123;1&#125;:$&#123;2&#125;&apos;   # 设置监听的服务器ip</span><br><span class="line">    - source_labels: [&apos;meta_ip&apos;]</span><br><span class="line">      regex: &apos;(\d+.\d+.\d+.\d+):(\d+)&amp;(\d+.\d+.\d+.\d+):(\d+)&apos;</span><br><span class="line">      target_label: &apos;machine&apos;    # 设置所属服务器,用于标识作用,便于以后分组</span><br><span class="line">      replacement: &apos;$&#123;3&#125;:$&#123;4&#125;&apos;</span><br></pre></td></tr></table></figure><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><p>zookeeper中的节点,如10.1.1.26:9100其值必须设置为json格式,可以简单设置为{},否则prometheus不能解析到该节点.</p><h3 id="效果检查"><a href="#效果检查" class="headerlink" title="效果检查"></a>效果检查</h3><p><img src="file:///var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/WizNote/0545bc9a-a416-4c66-8245-963a34bbdde4/index_files/55493948.png" alt="img"></p><p><img src="file:///var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/WizNote/0545bc9a-a416-4c66-8245-963a34bbdde4/index_files/55801785.png" alt="img"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="Prometheus-Configuration"><a href="#Prometheus-Configuration" class="headerlink" title="Prometheus Configuration"></a><a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#%3Cserverset_sd_config%3E" target="_blank" rel="noopener">Prometheus Configuration</a></h3><h3 id="ZooKeeper-serverset-discovery-Issues"><a href="#ZooKeeper-serverset-discovery-Issues" class="headerlink" title="ZooKeeper serverset discovery Issues"></a><a href="https://github.com/prometheus/prometheus/issues/2758" target="_blank" rel="noopener">ZooKeeper serverset discovery Issues</a></h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><h4 id="Prometheus-Node-exporter"><a href="#Prometheus-Node-exporter" class="headerlink" title="Prometheus/Node_exporter"></a><a href="https://prometheus.io/download/" target="_blank" rel="noopener">Prometheus/Node_exporter</a></h4><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a><a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">Zookeeper</a></h4>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus服务发现 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus之入门</title>
      <link href="/blog/2018/08/02/prometheus%E5%85%A5%E9%97%A8/"/>
      <url>/blog/2018/08/02/prometheus%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<ul><li>环境:prometheus 2.3.1, blackbox_exporter 0.12.0, alertmanager 0.15.1, centos 7</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应用场景:监测500+主机是否存活(通过ping或ssh的方式检测),并报警.</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>Prometheus即是一个CPU密集型（查询）也是一个IO密集型（数据落地）的，CPU数量是多多益善，内存越大越好（来缓存抓取的数据，所以应该减少不必要的业务数据导出），尽量要使用SSD（这个很关键！），因为一旦Prometheus的内存使用量达到阈值会停止抓取数据！这个停止抓取的时间，至少是分钟级，甚至是无法恢复！所以只要有条件就要用SSD。</li><li>Prometheus号称支持reload，但目测不是很好用，比如你修改了告警规则文件，重载之后，新旧告警规则似乎会一起计算执行….</li></ul><h2 id="Execute-Prometheus"><a href="#Execute-Prometheus" class="headerlink" title="Execute Prometheus"></a>Execute Prometheus</h2><h3 id="Build-with-Binary-And-Config"><a href="#Build-with-Binary-And-Config" class="headerlink" title="Build with Binary And Config"></a>Build with Binary And Config</h3><h4 id="Build-with-Binary"><a href="#Build-with-Binary" class="headerlink" title="Build with Binary"></a>Build with Binary</h4><ul><li>Download<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># prometheus官网有下载地址</span><br><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/prometheus/releases/download/v2.3.2/prometheus-2.3.2.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf prometheus-2.3.2.linux-amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">$ mv prometheus-2.3.2.linux-amd64 prometheus-2.3.2</span><br></pre></td></tr></table></figure></li></ul><h3 id="Config-prometheus-yml"><a href="#Config-prometheus-yml" class="headerlink" title="Config prometheus.yml"></a>Config prometheus.yml</h3><p>blackbox_exporter和alertmanager的安装可以参见另外两篇文章《alertmanager之初体验》、《blackbox_exporter之安装》<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 由于机器数量较多,使用prometheus的服务发现,将所有机器配置到单独的文件中.</span><br><span class="line">$ vim /opt/machine.json</span><br><span class="line">[</span><br><span class="line"> &#123;&quot;targets&quot;:[&quot;122.227.184.61:20065&quot;],&quot;labels&quot;:&#123;&quot;machineName&quot;:&quot;guangzhou77d9&quot;&#125;&#125;,</span><br><span class="line">&#123;&quot;targets&quot;:[&quot;122.227.184.61:20063&quot;],&quot;labels&quot;:&#123;&quot;machineName&quot;:&quot;guangzhou77d8&quot;&#125;&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"># 配置prometheus.yml</span><br><span class="line">$ vim /opt/prometheus-2.3.1/prometheus.yml</span><br><span class="line">global:</span><br><span class="line">  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets: [&quot;10.1.1.26:9093&quot;]  # alertmanager的地址.</span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/proxy_rules.yml&quot;  # 规则文件.</span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&apos;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;machine_heart&apos;</span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [ssh_banner]</span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - files: [&apos;/opt/machine.json&apos;]   # 机器地址列表文件</span><br><span class="line">      refresh_interval: 5m</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [address]</span><br><span class="line">      regex: (.*)</span><br><span class="line">      replacement: $&#123;1&#125;</span><br><span class="line">      target_label: __param_target  # 请求http://10.1.1.26:9155的请求参数target</span><br><span class="line">    - source_labels: [__param_target]</span><br><span class="line">      target_label: instance</span><br><span class="line">    - target_label: address</span><br><span class="line">      replacement: 10.1.1.26:9115  # blackbox_exporter的地址.</span><br></pre></td></tr></table></figure></p><h3 id="Config-rules-yml"><a href="#Config-rules-yml" class="headerlink" title="Config rules.yml"></a>Config rules.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /opt/proxy_rules.yml</span><br><span class="line">groups:</span><br><span class="line">  - name: machine_heart</span><br><span class="line">    rules:</span><br><span class="line">    - alert: &apos;ssh&apos;</span><br><span class="line">      expr: probe_success&#123;job=&quot;machine_heart&quot;&#125; &lt; 1</span><br><span class="line">      for: 1m</span><br><span class="line">      labels:</span><br><span class="line">        severity: critical</span><br><span class="line">      # team: &apos;proxy-team&apos;</span><br><span class="line">      annotations:</span><br><span class="line">        summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; down.&quot;</span><br><span class="line">        description: &quot;&#123;&#123; $labels.instance &#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has been down for more than 1 minutes.&quot;</span><br></pre></td></tr></table></figure><h3 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/prometheus.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=prometheus.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/prometheus-2.3.1/prometheus --config.file=/opt/prometheus-2.3.1/prometheus.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable prometheus &amp;&amp; systemctl start prometheus</span><br></pre></td></tr></table></figure><h3 id="Test-Prometheus"><a href="#Test-Prometheus" class="headerlink" title="Test Prometheus"></a>Test Prometheus</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="基于Prometheus的分布式在线服务监控实践"><a href="#基于Prometheus的分布式在线服务监控实践" class="headerlink" title="基于Prometheus的分布式在线服务监控实践"></a><a href="https://zhuanlan.zhihu.com/p/24811652" target="_blank" rel="noopener">基于Prometheus的分布式在线服务监控实践</a></h3><h3 id="Prometheus-非官方中文手册"><a href="#Prometheus-非官方中文手册" class="headerlink" title="Prometheus 非官方中文手册"></a><a href="https://github.com/1046102779/prometheus" target="_blank" rel="noopener">Prometheus 非官方中文手册</a></h3><h3 id="使用Prometheus-grafana打造高逼格监控平台"><a href="#使用Prometheus-grafana打造高逼格监控平台" class="headerlink" title="使用Prometheus+grafana打造高逼格监控平台"></a><a href="http://blog.51cto.com/youerning/2050543" target="_blank" rel="noopener">使用Prometheus+grafana打造高逼格监控平台</a></h3>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus入门 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自动化运维工具之OpsManage安装</title>
      <link href="/blog/2018/05/24/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7%E4%B9%8BOpsManage%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/05/24/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7%E4%B9%8BOpsManage%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ul><li>环境: centos7,opsmanage v2.2.1</li><li><a href="https://github.com/welliamcao/OpsManage" target="_blank" rel="noopener">OpsManage github</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>]]></content>
      
      <categories>
          
          <category> 自动化运维工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化运维工具之OpsManage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>架构之定义</title>
      <link href="/blog/2018/05/02/%E6%9E%B6%E6%9E%84%E4%B9%8B%E5%AE%9A%E4%B9%89/"/>
      <url>/blog/2018/05/02/%E6%9E%B6%E6%9E%84%E4%B9%8B%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h2 id="架构之定义"><a href="#架构之定义" class="headerlink" title="架构之定义"></a>架构之定义</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前嘴里常说架构师,但并没有去细究它的具体含义.偶然间看到别人分享了极客时间的《从0开始学架构》专栏.读了架构到底是什么这篇文章后,发现自己从来都没有思考过.(人最怕的就是<strong><em>不知道自己不知道</em></strong>)赶紧学习充电.</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><strong>架构:软件系统的顶层结构.</strong>(引用文章的结论).没有知识体系,理解这些概念真的很难.没办法,只能尝试去理解,强行记忆了.</p><p>想要理解,需要几个概念进行比较理解.</p><ul><li><p>系统与子系统</p><p>一些独立的“个体”,互相关联和协作.(个体可以是组件、子系统、模块)</p></li></ul><ul><li><p>模块与组件</p><p>模块是从逻辑角度理解,进行职责上的划分.</p><p>组件是从物理角度理解,便于复用.</p></li><li><p>框架</p><p>1、组件规范;</p><p>2、提供基础功能产品;</p></li></ul><p>架构需要明确系统包含哪些“个体”,并且需要明确个体运作和协作的规则.</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqwsgmsqhoj31cg0rkgoo.jpg" alt="66091B87-6F9C-4FAD-934A-C3472C2FB399"></p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构定义 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elasticsearch之基本命令</title>
      <link href="/blog/2018/04/24/elasticsearch%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2018/04/24/elasticsearch%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>环境：Mac 10.13.4 、elasticsearch 5.5.1、jdk8</li></ul><h2 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ put http://[ip]:[port]/[索引名]</span><br><span class="line">## 创建时指定分片（3个主分片，2个副本分片）</span><br><span class="line">参数:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot; : &#123;</span><br><span class="line">    &quot;index&quot; : &#123;&quot;number_of_shards&quot; : 3, &quot;number_of_replicas&quot; : 2&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">## 修改副本分片</span><br><span class="line">$ put http://[ip]:[port]/[索引名]/_settings</span><br><span class="line">参数:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;number_of_replicas&quot; : 1&#125;</span><br><span class="line">&#125;</span><br><span class="line">## 创建索引，并添加log类型，字段为message，字段类型为string（已存在索引会失败）</span><br><span class="line">$ put http://[ip]:[port]/[索引名]</span><br><span class="line">参数：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; &#123;</span><br><span class="line">        &quot;message&quot; :&#123;&quot;type&quot; : &quot;string&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ get http://[ip]:[port]/[索引名]/[_mapping,_settings,_aliase]</span><br><span class="line">&#123;</span><br><span class="line">  &quot;[索引名]&quot;: &#123;</span><br><span class="line">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;creation_date&quot;: &quot;1524617001036&quot;,</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;jk7IHv-jQpyd4jwOeo86ag&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;5050199&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;[索引名]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ delete http://[ip]:[port]/[索引名],[索引名],...</span><br><span class="line">或者使用_all或*删除全部索引（注意：务必要在配置文件中禁用 action.destructive_requires_name:true）</span><br></pre></td></tr></table></figure><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><h4 id="修改索引副本数量"><a href="#修改索引副本数量" class="headerlink" title="修改索引副本数量"></a>修改索引副本数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ put http://[ip]:[port]/[索引名]/_settings</span><br><span class="line">参数:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;number_of_replicas&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打开-关闭索引"><a href="#打开-关闭索引" class="headerlink" title="打开/关闭索引"></a>打开/关闭索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 因为关闭索引磁盘空间并不会释放，造成磁盘空间浪费，因此一般禁用该功能，settings,cluster.indices.close.enable:false</span><br><span class="line">$ post http://[ip]:[port]/[索引名]/[_open,_close]</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## name为对象类型（Object datatype）</span><br><span class="line">$ put http://[ip]:[port]/[索引名]/_mappings/user</span><br><span class="line">参数：</span><br><span class="line">&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;last&quot;: &#123;&quot;type&quot; : &quot;string&quot;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;user_id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">## 添加文档</span><br><span class="line">$ put/post http://[ip]:[port]/[索引名]/[类型]/[_id] </span><br><span class="line">参数：&#123;&quot;computer&quot;:&quot;huawei&quot;&#125;</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;index1_test&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">&quot;_version&quot;: 1,</span><br><span class="line">&quot;result&quot;: &quot;created&quot;,</span><br><span class="line">&quot;_shards&quot;: &#123; &quot;total&quot;: 2,&quot;successful&quot;: 1,&quot;failed&quot;: 0&#125;,</span><br><span class="line">&quot;created&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">## 删除文档</span><br><span class="line">$ delete http://[ip]:[port]/[索引名]/[类型]/[_id]</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;found&quot;: true,</span><br><span class="line">&quot;_index&quot;: &quot;index1_test&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">&quot;_version&quot;: 2,</span><br><span class="line">&quot;result&quot;: &quot;deleted&quot;,</span><br><span class="line">&quot;_shards&quot;: &#123; &quot;total&quot;: 2,&quot;successful&quot;: 1,&quot;failed&quot;: 0&#125;</span><br><span class="line">&#125;</span><br><span class="line">## 修改文档</span><br><span class="line">$ post http://[ip]:[port]/[索引名]/[类型]/[_id]/_update</span><br><span class="line">参数：</span><br><span class="line">&#123;</span><br><span class="line">&quot;doc&quot; : &#123;</span><br><span class="line">  &quot;computer&quot; : &quot;apple&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">## 查询文档</span><br><span class="line">$ get http://[ip]:[port]/[索引名]/[类型]/[_id]</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;index1_test&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;test1&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;100&quot;,</span><br><span class="line">&quot;_version&quot;: 2,</span><br><span class="line">&quot;found&quot;: true,</span><br><span class="line">&quot;_source&quot;: &#123; &quot;computer&quot;: &quot;apple&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">真的如上面这么简单，就不是es了。=!=</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> elaticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch基本命令 </tag>
            
            <tag> es基本命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swagger注解说明</title>
      <link href="/blog/2018/04/10/Swagger%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
      <url>/blog/2018/04/10/Swagger%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="Swagger注解说明"><a href="#Swagger注解说明" class="headerlink" title="Swagger注解说明"></a>Swagger注解说明</h2><ul><li>环境：swagger 2.7.0</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用swagger也有一段时间了，对于注解还是很混乱，这里做个记录，方便后续查阅。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>swagger的注解都在swagger-annotations中，当前版本总共27个注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.5.13&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>现在逐一查看各个注解及使用。</p><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><p>作用于class或interface上（推荐定义在接口上），说明该接口的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Api(tags = &#123;&quot;数据接口&quot;&#125;, description = &quot;推荐系统&quot;)</span><br><span class="line">public interface DataCollectControllerApi &#123;&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fq7f1lwq46j31kw0magrx.jpg" alt="40BF8CA4-03D2-4B05-B63D-520C9A849C05"></p><h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><p>作用于方法上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户行为&quot;, notes = &quot;查询用户行为数据&quot;)</span><br><span class="line">@PostMapping(value = &quot;/behavior&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">    ResultBean&lt;PageInfo&gt; queryUserBehaviorRecord(@RequestBody UserBehaviorReqDTO userBehaviorReqDTO);</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fq7gyiss2dj31kw07wtat.jpg" alt="31980D1F-54AA-436E-A3C7-D96D2A66600A"></p><h3 id="ApiImplicitParams和-ApiImplicitParam（不建议使用）"><a href="#ApiImplicitParams和-ApiImplicitParam（不建议使用）" class="headerlink" title="@ApiImplicitParams和@ApiImplicitParam（不建议使用）"></a>@ApiImplicitParams和@ApiImplicitParam（不建议使用）</h3><p>作用于方法上，但是不建议使用（原因：This is the only way to define parameters when using Servlets or other non-JAX-RS* environments），建议使用@ApiParam</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户&quot;, notes = &quot;查询用户信息&quot;)</span><br><span class="line">   @ApiImplicitParams(&#123;</span><br><span class="line">           @ApiImplicitParam(name = &quot;userId&quot;, value = &quot;用户id&quot;, paramType = &quot;query&quot;, dataType = &quot;int&quot;),</span><br><span class="line">           @ApiImplicitParam(name = &quot;userName&quot;, value = &quot;用户名&quot;, paramType = &quot;query&quot;, dataType = &quot;string&quot;)</span><br><span class="line">   &#125;)</span><br><span class="line">   @PostMapping(value = &quot;/user&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   ResultBean queryUserInfo(@RequestParam(&quot;userId&quot;) Integer userId,</span><br><span class="line">                    @RequestParam(&quot;userName&quot;) String userName);</span><br></pre></td></tr></table></figure><ul><li><p>name：参数名称，即下图的Parameter列</p></li><li><p>value：参数描述，即下图的Description列</p></li><li><p>paramType：参数类型，这里支持5种query,body,path,form,header，这里常用query和body。</p><p>body表示该参数为json。</p></li><li><p>paramType：参数数据类型，目前只支持基本数据类型，int，float，long等</p></li></ul><p>效果：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fq7ie7m8hhj31jk0y0af3.jpg" alt="E0BA3ABA-3832-4C26-A9C5-9855D5E9A6B7"></p><h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h3><p>作用于方法和参数上（只有一个参数时可以在方法上使用，但通常都会有多个参数，所以建议在参数上使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户&quot;, notes = &quot;查询用户信息&quot;)</span><br><span class="line">@PostMapping(value = &quot;/user&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">ResultBean queryUserInfo(</span><br><span class="line">            @ApiParam(name = &quot;userId&quot;, value = &quot;用户id&quot;, type = &quot;Integer&quot;)</span><br><span class="line">            @RequestParam(&quot;userId&quot;) Integer userId,</span><br><span class="line">            @ApiParam(name = &quot;userName&quot;, value = &quot;用户名称&quot;, type = &quot;String&quot;)</span><br><span class="line">            @RequestParam(&quot;userName&quot;) String userName);</span><br></pre></td></tr></table></figure><ul><li><p>name：参数名称，即下图的Parameter列</p></li><li><p>value：参数描述，即下图的Description列</p></li><li><p>type：参数数据类型，即下图的Data Type列。可以忽略，swagger会根据SpringMVC中的注解（RequestParam,RequestBody）自动匹配参数类型（Parameter Type列）和参数数据类型（Data Type列）。如下图，参数使用@RequestParam，则Parameter Type为query，Data Type为对应参数类型；</p><p>参数使用@RequestBody，则Parameter Type为body，Data Type为对应参数类型；</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fq7ja2hsv4j31dc0dyjsw.jpg" alt="EE7527A9-9F9C-41CB-9585-A220B996D9D5"></p></li></ul><p>效果：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fq7j2jzdi9j31ka0xqn1q.jpg" alt="B5BCA1A6-0C31-4BA0-8213-E6FCD3077135"></p><h3 id="ApiResponses和-ApiResponse"><a href="#ApiResponses和-ApiResponse" class="headerlink" title="@ApiResponses和@ApiResponse"></a>@ApiResponses和@ApiResponse</h3><p>作用于方法上，一般用于描述错误的响应信息。@ApiResponses用户描述一组错误响应。@ApiResponse用户描述具体的错误响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户&quot;, notes = &quot;查询用户信息&quot;)</span><br><span class="line">@PostMapping(value = &quot;/user&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">@ApiResponses(&#123;</span><br><span class="line">    @ApiResponse(code = 1001, message = &quot;用户参数为空&quot;,responseHeaders = &#123;</span><br><span class="line"> @ResponseHeader(name = &quot;header-1&quot;, description = &quot;header-1描述&quot;, response = String.class),</span><br><span class="line">        @ResponseHeader(name = &quot;header-2&quot;, description = &quot;header-2描述&quot;, response = Integer.class),</span><br><span class="line">        @ResponseHeader(name = &quot;header-3&quot;, description = &quot;header-3描述&quot;, response = ResultBean.class)</span><br><span class="line">      &#125;),</span><br><span class="line">     @ApiResponse(code = 1002, message = &quot;用户不存在&quot;, response = ResultBean.class),</span><br><span class="line">    &#125;)</span><br><span class="line">ResultBean queryUserInfo(</span><br><span class="line">            @ApiParam(name = &quot;userId&quot;, value = &quot;用户id&quot;)</span><br><span class="line">            @RequestBody Integer userId,</span><br><span class="line">            @ApiParam(name = &quot;userName&quot;, value = &quot;用户名称&quot;)</span><br><span class="line">            @RequestParam(&quot;userName&quot;) String userName);</span><br></pre></td></tr></table></figure><ul><li>code：返回码，对应HTTP Status Code列</li><li>message：返回码描述，对应Reason列</li><li>response：返回值类型，对应Response Model列</li><li>responseHeaders：返回值头信息，使用@ResponseHeader对返回值头的描述<ul><li>name：响应头名称</li><li>description：响应头描述</li><li>response：响应头返回值类型</li></ul></li></ul><p>使用@ApiResponse时，如果同时使用response属性和responseHeaders属性，responseHeaders会失效（已测试）。另外，使用responseHeaders时，在使用@ResponseHeader时，ResponseHeader中的属性response使用类类型无效（已测试），默认为string</p><p>效果：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fq7khwiw8aj31is0umtd2.jpg" alt="334B5658-FC90-41D9-BD46-C3D6B3204049"></p><h3 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="@ResponseHeader"></a>@ResponseHeader</h3><p>ApiKeyAuthDefinition</p><p>ApiModel</p><p>ApiModelProperty</p><p>Authorization</p><p>AuthorizationScope</p><p>BasicAuthDefinition</p><p>Contact</p><p>Example</p><p>ExampleProperty</p><p>Extension</p><p>ExtensionProperty</p><p>ExternalDocs</p><p>Info</p><p>License</p><p>OAuth2Definition</p><p>Scope</p><p>SecurityDefinition</p><p>SwaggerDefinition</p><p>Tage</p><h2 id="常用模版"><a href="#常用模版" class="headerlink" title="常用模版"></a>常用模版</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/zzuqiang/blog/793606" target="_blank" rel="noopener">https://my.oschina.net/zzuqiang/blog/793606</a> swagger注解类使用说明</li><li><a href="http://www.cnblogs.com/softidea/p/6251249.html" target="_blank" rel="noopener">http://www.cnblogs.com/softidea/p/6251249.html</a> Swagger使用</li></ul>]]></content>
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark之IDEA创建Scala工程</title>
      <link href="/blog/2018/04/08/Scala%E4%B9%8BIDEA%E5%88%9B%E5%BB%BA/"/>
      <url>/blog/2018/04/08/Scala%E4%B9%8BIDEA%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="Spark之IDEA创建Scala工程"><a href="#Spark之IDEA创建Scala工程" class="headerlink" title="Spark之IDEA创建Scala工程"></a>Spark之IDEA创建Scala工程</h2><ul><li>环境：Mac 10.13.3，Intellij Idea 2016.3.5，scala 2.12.5</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过IDEA快速创建scala-maven工程，开发spark应用。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="通过maven模板创建scala"><a href="#通过maven模板创建scala" class="headerlink" title="通过maven模板创建scala"></a>通过maven模板创建scala</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fq52usxxfmj31h60ucwo2.jpg" alt="B54F78E7-ECE0-4D77-A319-FB3AC83BD89A"></p><p>后面就是创建目录的指定，这里省略。</p><p>注：由于这个模板比较老，所以要对pom做一些修改。</p><h4 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h4><p>这里主要是修改scala的版本（默认的是2.7.0的，太老了），以及maven-scala-plugin版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.bsd.scala&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;scala-003&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;scala.version&gt;2.11.8&lt;/scala.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;scala-library&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;scala.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.14&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.specs&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;specs&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;sourceDirectory&gt;src/main/scala&lt;/sourceDirectory&gt;</span><br><span class="line">    &lt;testSourceDirectory&gt;src/test/scala&lt;/testSourceDirectory&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.15.2&lt;/version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">              &lt;goal&gt;testCompile&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>以上基本的一个scala项目就好了。（另外再删除掉test下的相关类即可）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://cwiki.apachecn.org/display/Spark/Index" target="_blank" rel="noopener">http://cwiki.apachecn.org/display/Spark/Index</a> Spark翻译组</li></ul><hr>]]></content>
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA创建Scala工程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql之常用操作</title>
      <link href="/blog/2018/04/04/Mysql%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2018/04/04/Mysql%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="Mysql之常用操作"><a href="#Mysql之常用操作" class="headerlink" title="Mysql之常用操作"></a>Mysql之常用操作</h2><ul><li>环境：mysql 5.7.14</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里记录mysql的一些操作用作应用。</p><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><h3 id="修改用户名密法"><a href="#修改用户名密法" class="headerlink" title="修改用户名密法"></a>修改用户名密法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/mysql/bin/mysqladmin -u root password</span><br></pre></td></tr></table></figure><h3 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ CREATE USER &apos;username&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line">$ GRANT all privileges ON databasename.* TO &apos;username&apos;@&apos;%&apos; with grant options</span><br></pre></td></tr></table></figure><h3 id="字符设置"><a href="#字符设置" class="headerlink" title="字符设置"></a>字符设置</h3><p>场景一：utf8字符集数据库需要修改为utf8mb4</p><p>首先，先查询当前mysql是否支持utf8mb4，如果支持，修改my.cnf，重启mysql，再修改表或者表字段字符集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 配置my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><h4 id="查询字符集"><a href="#查询字符集" class="headerlink" title="查询字符集"></a>查询字符集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## 查看数据库支持字符集</span><br><span class="line">$ show variables like&apos;%char%&apos;;</span><br><span class="line">  character_set_clientutf8mb4 //客户端字符集</span><br><span class="line">  character_set_connectionutf8mb4 //链接字符集</span><br><span class="line">  character_set_databaseutf8mb4 //数据库字符集</span><br><span class="line">  character_set_filesystembinary  </span><br><span class="line">  character_set_resultsutf8mb4 //结果字符集</span><br><span class="line">  character_set_serverutf8mb4 //服务器字符集</span><br><span class="line">  character_set_systemutf8mb4 //系统字符集</span><br><span class="line">  character_sets_dir/usr/local/mysql/share/charsets/</span><br><span class="line">## 查看mysql支持的字符集</span><br><span class="line">$ show charset;</span><br><span class="line">## 查看当前数据库编码：</span><br><span class="line">$ SHOW CREATE DATABASE db_name;</span><br><span class="line">## 查看表编码：</span><br><span class="line">$ SHOW CREATE TABLE tbl_name;</span><br><span class="line">## 查看字段编码：</span><br><span class="line">$ SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure><h4 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 修改数据库字符</span><br><span class="line">¥ ALTER DATABASE [database_name] CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">## 修改表字符集</span><br><span class="line">$ ALTER TABLE [table_name] CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">## 修改表字段字符集</span><br><span class="line">$ ALTER TABLE [table_name] MODIFY COLUMN [column] varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>Tip:为了实现客户端utf8连接到MySQL后，使用的也是utf8mb4字符集，就在 mysqld配置中配置了 init_connect=’SET NAMES utf8mb4’ 表示初始化连接都设置为utf8mb4字符集，再配置一个 skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用，这样就满足了应用的需求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 配置my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class="line">character-set-client-handshake = true</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swagger2问题汇总</title>
      <link href="/blog/2018/04/03/swagger2%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/blog/2018/04/03/swagger2%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="swagger2问题汇总"><a href="#swagger2问题汇总" class="headerlink" title="swagger2问题汇总"></a>swagger2问题汇总</h2><ul><li>环境：swagger 2.7.0，spring-boot 1.5.9</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里是对在使用swagger时碰到的相关问题汇总。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h4 id="Failed-to-start-bean-‘documentationPluginsBootstrapper’-nested-exception-is-java-lang-NullPointerException"><a href="#Failed-to-start-bean-‘documentationPluginsBootstrapper’-nested-exception-is-java-lang-NullPointerException" class="headerlink" title="Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException"></a>Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException</h4><p>swagger的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(new ApiInfoBuilder()</span><br><span class="line">                        .title(&quot;测试&quot;)</span><br><span class="line">                        .description(&quot;测试&quot;)</span><br><span class="line">                        .termsOfServiceUrl(&quot;&quot;)</span><br><span class="line">                        .contact(&quot;jilingjun&quot;)</span><br><span class="line">                        .version(&quot;1.0&quot;)</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.bsd.recommend.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Failed to start bean &apos;documentationPluginsBootstrapper&apos;; nested exception is java.lang.NullPointerException</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at com.bsd.recommend.RecommendApplication.main(RecommendApplication.java:23) ~[classes/:na]</span><br><span class="line">Caused by: java.lang.NullPointerException: null</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$4.apply(RequestHandlerSelectors.java:97) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$4.apply(RequestHandlerSelectors.java:94) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at com.google.common.base.Present.transform(Present.java:79) ~[guava-19.0.jar:na]</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$5.apply(RequestHandlerSelectors.java:113) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$5.apply(RequestHandlerSelectors.java:110) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at com.google.common.base.Predicates$AndPredicate.apply(Predicates.java:374) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.base.Predicates$AndPredicate.apply(Predicates.java:374) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.collect.Iterators$7.computeNext(Iterators.java:675) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138) ~[guava-19.0.jar:na]</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:48) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiDocumentationScanner.scan(ApiDocumentationScanner.java:67) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.scanDocumentation(DocumentationPluginsBootstrapper.java:95) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:154) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">... 14 common frames omitted</span><br></pre></td></tr></table></figure><p>初步诊断，swagger在做scan操作抛出了空指针异常。现在只能google了，发现这事一个bug，并且在2.8.0之后进行了修复（2.8.0修复的问题在这里：<a href="https://github.com/springfox/springfox/issues/2186）。" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/2186）。</a></p><p>（可参考：<a href="https://github.com/springfox/springfox/issues/1876）" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/1876）</a></p><p>这个问题是发生在对controller做了切面后才会出现，If I use AOP advice on my method within @RestController I face this issue too because Spring creates proxy class to wrap controller’s method call。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>swagger 2.7.0，spring-boot 1.5.1</li></ul><p>既然是个bug，就应该有临时解决方案吧。这还真让我找到了，具体解决的源url就找不到了，就直接帖代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/v2/api-docs&quot;, &quot;/v2/api-docs?group=restful-api&quot;);</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/swagger-resources/configuration/ui&quot;, &quot;/swagger-resources/configuration/ui&quot;);</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/swagger-resources/configuration/security&quot;, &quot;/swagger-resources/configuration/security&quot;);</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/swagger-resources&quot;, &quot;/swagger-resources&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.</span><br><span class="line">                addResourceHandler(&quot;/documentation/swagger-ui.html**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/swagger-ui.html&quot;);</span><br><span class="line">        registry.</span><br><span class="line">                addResourceHandler(&quot;/documentation/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any()).paths(PathSelectors.any())</span><br><span class="line">                .build().forCodeGeneration(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder().title(&quot;测试&quot;)</span><br><span class="line">                .description(&quot;测试&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;&quot;).contact(&quot;联系我&quot;).version(&quot;1.0&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/springfox/springfox/issues/1876" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/1876</a> NullPointerException with Spring Data Rest integration</li><li><a href="https://github.com/springfox/springfox/issues/1860" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/1860</a> [spring boot]@EnableAspectJAutoProxy cause endpoint scanning failed</li></ul><hr>]]></content>
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis之集群搭建</title>
      <link href="/blog/2018/04/02/Redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA/"/>
      <url>/blog/2018/04/02/Redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="Redis之集群搭建"><a href="#Redis之集群搭建" class="headerlink" title="Redis之集群搭建"></a>Redis之集群搭建</h2><ul><li>环境：Centos7，redis3.2</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>### </p><h2 id="Cluster添加密码"><a href="#Cluster添加密码" class="headerlink" title="Cluster添加密码"></a>Cluster添加密码</h2><p><strong>前提：先创建无密码集群</strong></p><h3 id="方式一：手动添加密码到配置文件"><a href="#方式一：手动添加密码到配置文件" class="headerlink" title="方式一：手动添加密码到配置文件"></a>方式一：手动添加密码到配置文件</h3><p>修改所有redis服务器的配置文件添加密码，然后关闭redis-cluster，然后重启redis-cluster</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass &quot;abc&quot;</span><br><span class="line">masterauth &quot;abc&quot;</span><br></pre></td></tr></table></figure><h3 id="方式二：通过命令添加密码"><a href="#方式二：通过命令添加密码" class="headerlink" title="方式二：通过命令添加密码"></a>方式二：通过命令添加密码</h3><p>通过命令行设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## 登录有添加密码</span><br><span class="line">$ redis-cli -h [host] -p [port] -c</span><br><span class="line">$ config set masterauth abc</span><br><span class="line">$ config set requirepass abc</span><br><span class="line">$ config rewrite</span><br><span class="line">$ shutdown</span><br><span class="line">## 每个节点都执行上述操作，然后正常关闭即可。查看每个节点的conf配置文件，会发现都自动添加了</span><br><span class="line">requirepass &quot;abc&quot;</span><br><span class="line">masterauth &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>后续登录都需要添加密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h [host] -p [port] -c -a [password]</span><br><span class="line">或者</span><br><span class="line">$ redis-cli -h [host] -p [port] -c</span><br><span class="line">$ auth [password]</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>​</li></ul>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis集群 </tag>
            
            <tag> redis集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里开源之Jarslink初体验</title>
      <link href="/blog/2018/03/31/%E9%98%BF%E9%87%8C%E5%BC%80%E6%BA%90%E4%B9%8BJarslink%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/blog/2018/03/31/%E9%98%BF%E9%87%8C%E5%BC%80%E6%BA%90%E4%B9%8BJarslink%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="Jarslink初体验"><a href="#Jarslink初体验" class="headerlink" title="Jarslink初体验"></a>Jarslink初体验</h2><ul><li>环境：spring-boot 1.5.3，<a href="https://github.com/alibaba/jarslink" target="_blank" rel="noopener">Jarslink</a> 1.5.0.20171107，jdk8</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一个新东西，通常用哲学的问题进行初步了解。它是什么？它从哪里来？能够解决什么问题（要到哪里去）？</p><ul><li><p>它是什么？它从那里来？</p><p>阿里开源的，名为Jarslink并基于Java的模块化开发框架。它提供在运行时动态加载模块（jar包）、卸载、模块间调用的API。</p></li><li><p>能够解决什么问题？</p></li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="新建一个Hello-World工程模块"><a href="#新建一个Hello-World工程模块" class="headerlink" title="新建一个Hello World工程模块"></a>新建一个Hello World工程模块</h3>]]></content>
      
      
        <tags>
            
            <tag> Jarslink </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker之安装</title>
      <link href="/blog/2018/03/29/docker%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/03/29/docker%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Docker之安装"><a href="#Docker之安装" class="headerlink" title="Docker之安装"></a>Docker之安装</h2><ul><li>环境：Centos6.5，Centos7<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2>1、EPEL（ Extra Packages for Enterprise Linux，企业版Linux的额外软件包)是yum的一个软件源，里面包含了许多基本源里没有的软件；<br>2、docker要求服务CentOS6以上，kernel 版本必须2.6.32-431或更高；<h2 id="查看系统的版本和内核"><a href="#查看系统的版本和内核" class="headerlink" title="查看系统的版本和内核"></a>查看系统的版本和内核</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 查看系统版本</span><br><span class="line">$ lsb_release -a</span><br><span class="line">## 查看内核版本</span><br><span class="line">$ uname -r</span><br></pre></td></tr></table></figure></li></ul><h2 id="Centos6-5安装docker"><a href="#Centos6-5安装docker" class="headerlink" title="Centos6.5安装docker"></a>Centos6.5安装docker</h2><p>要将Docker安装到CentOS上，要使用EPEL软件库，下载epel安装包并安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://ftp.jaist.ac.jp/pub/Linux/Fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">$ rpm -ivh epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>检查EPEL源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.skyshe.cn</span><br><span class="line"> * epel: mirrors.opencas.cn</span><br><span class="line"> * extras: mirrors.skyshe.cn</span><br><span class="line"> * updates: centos.ustc.edu.cn</span><br><span class="line">repo id                                                                                    repo name                                                                                                                          status</span><br><span class="line">base                                                                                       CentOS-6 - Base                                                                                                                     6,575</span><br><span class="line">epel                                                                                       Extra Packages for Enterprise Linux 6 - x86_64                                                                                     12,234</span><br><span class="line">extras                                                                                     CentOS-6 - Extras                                                                                                                      62</span><br><span class="line">updates                                                                                    CentOS-6 - Updates                                                                                                                  1,580</span><br><span class="line">repolist: 20,451</span><br><span class="line">EPEL已经在repo列出，并显示提供12234个软件包，EPEL源的配置安装到了/etc/yum.repos.d/epel.repo</span><br></pre></td></tr></table></figure></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker-io</span><br><span class="line">$ service docker start</span><br><span class="line">$ chkconfig docker on</span><br></pre></td></tr></table></figure><h3 id="检查docker是否安装成功"><a href="#检查docker是否安装成功" class="headerlink" title="检查docker是否安装成功"></a>检查docker是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$docker info</span><br><span class="line">Containers: 0</span><br><span class="line">Images: 0</span><br><span class="line">Storage Driver: devicemapper</span><br><span class="line"> Pool Name: docker-8:3-276002-pool</span><br><span class="line"> Pool Blocksize: 65.54 kB</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Data file: /dev/loop0</span><br><span class="line"> Metadata file: /dev/loop1</span><br><span class="line"> Data Space Used: 305.7 MB</span><br><span class="line"> Data Space Total: 107.4 GB</span><br><span class="line"> Data Space Available: 4.873 GB</span><br><span class="line"> Metadata Space Used: 729.1 kB</span><br><span class="line"> Metadata Space Total: 2.147 GB</span><br><span class="line"> Metadata Space Available: 2.147 GB</span><br><span class="line"> Udev Sync Supported: true</span><br><span class="line"> Deferred Removal Enabled: false</span><br><span class="line"> Data loop file: /var/lib/docker/devicemapper/devicemapper/data</span><br><span class="line"> Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata</span><br><span class="line"> Library Version: 1.02.95-RHEL6 (2015-09-08)</span><br><span class="line">Execution Driver: native-0.2</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Kernel Version: 2.6.32-431.el6.x86_64</span><br><span class="line">Operating System: &lt;unknown&gt;</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 996.4 MiB</span><br><span class="line">Name: winter-01</span><br><span class="line">ID: KJ3G:XD6V:SDDV:5SGY:2TRQ:4XXR:XBPV:VLHE:XHHZ:F425:7G2B:G5D5</span><br></pre></td></tr></table></figure><h2 id="Centos7安装docker"><a href="#Centos7安装docker" class="headerlink" title="Centos7安装docker"></a>Centos7安装docker</h2><p>centos7可以直接使用yum安装，不需要再添加其他软件源信息.</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker</span><br></pre></td></tr></table></figure><h3 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h3><p>使用daocloud的镜像加速器，在<a href="https://www.daocloud.io上注册账号，选择加速器" target="_blank" rel="noopener">https://www.daocloud.io上注册账号，选择加速器</a></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpttnn6256j31kw0p644u.jpg" alt="EE057A44-3793-488A-ABD9-525D8714316A"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpttodkc9dj31kw0g9782.jpg" alt="CD7714F1-2A75-474B-B3FE-28CD7035D23C"></p><p>正常情况下，直接执行上图的命令即可，但为了安全起见，执行后，查看/etc/docker/daemon.json，是否格式正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;http://5c00508c.m.daocloud.io&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 启动</span><br><span class="line">$ service docker start</span><br><span class="line">## 配置开机启动</span><br><span class="line">$ chkconfig docker on</span><br><span class="line">## 下载镜像测试</span><br><span class="line">## docker pull hello-world</span><br></pre></td></tr></table></figure><h2 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q&amp;A："></a>Q&amp;A：</h2><h3 id="Centos6-5安装好epel后，执行命令yum-repolist报错，信息如下："><a href="#Centos6-5安装好epel后，执行命令yum-repolist报错，信息如下：" class="headerlink" title="Centos6.5安装好epel后，执行命令yum repolist报错，信息如下："></a>Centos6.5安装好epel后，执行命令yum repolist报错，信息如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist</span><br><span class="line">Loaded plugins: product-id, security, subscription-manager</span><br><span class="line">Updating certificate-based repositories.</span><br><span class="line">Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again</span><br></pre></td></tr></table></figure><p>解决办法：vim /etc/yum.repos.d/epel.repo<br>编辑[epel]下的baseurl前的#号去掉，mirrorlist前添加#号。正确配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$yum makecache</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/3a4cd73e3272" target="_blank" rel="noopener">https://www.jianshu.com/p/3a4cd73e3272</a> CentOS7安装Docker</li><li><a href="https://blog.csdn.net/Mr_OOO/article/details/67016309" target="_blank" rel="noopener">https://blog.csdn.net/Mr_OOO/article/details/67016309</a> Docker国内镜像源设置</li></ul>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基础之Collection</title>
      <link href="/blog/2018/03/29/Java%E5%9F%BA%E7%A1%80%E4%B9%8BCollection/"/>
      <url>/blog/2018/03/29/Java%E5%9F%BA%E7%A1%80%E4%B9%8BCollection/</url>
      <content type="html"><![CDATA[<h2 id="java集合之HashMap"><a href="#java集合之HashMap" class="headerlink" title="java集合之HashMap"></a>java集合之HashMap</h2><ul><li>环境：jdk8</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hashmap是非常常用的，深入了解还是很有好处的。对于hashmap或其他东西，了解一些关键和核心就能抓住要点，深入太多的其他细节，反而分散注意力，性价比反而不高。</p><p>对于HashMap，其关键点有这些：底层的数据结构是是什么？存储值的如何取值的？hash碰撞了怎么办？线程不安全会引发的问题？</p><p>hashmap在jdk7和jdk8中实现是不一样的。</p><ul><li>jdk7中，hashmap底层的数据结构数组+单链表</li><li>jdk8中，hashmap底层的数据结构数组+单链表+红黑树</li></ul><p>围绕以上的问题，开始对它进行剖析。</p><h2 id="深入HashMap"><a href="#深入HashMap" class="headerlink" title="深入HashMap"></a>深入HashMap</h2><h3 id="Hashmap类图"><a href="#Hashmap类图" class="headerlink" title="Hashmap类图"></a>Hashmap类图</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpxgnrsbl8j30ln0d5752.jpg" alt="25644DE6-8C03-4A5B-BC25-3481D92E2D76"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="noopener">https://tech.meituan.com/java-hashmap.html</a> Java 8系列之重新认识HashMap</li></ul>]]></content>
      
      <categories>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo进阶之添加评论</title>
      <link href="/blog/2018/03/28/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/"/>
      <url>/blog/2018/03/28/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/</url>
      <content type="html"><![CDATA[<h2 id="Hexo进阶之添加评论"><a href="#Hexo进阶之添加评论" class="headerlink" title="Hexo进阶之添加评论"></a>Hexo进阶之添加评论</h2><ul><li>工具：hexo 3.6.0 + github pages + git + NexT 5.1.4</li><li>环境：mac(10.13.2)、node.js(9.4.0)、npm(5.6.0)</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo可以使用的第三方插件有这几种：</p><a id="more"></a><ul><li>Gitment</li></ul><p>需要登录github账号，不提供游客评论。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fpsdctv0xaj316c0hcabd.jpg" alt="2753A607-0178-4C26-9950-8A4F2316BEED"></p><ul><li>来必力（推荐）</li></ul><p>支持多账号登录评论</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fpsdlpn45ij31kw0e1ac6.jpg" alt="6634448F-B06C-4B02-B286-A5CBCBB6CFE8"></p><ul><li>Disqus</li><li>Valine</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpsdfoimj4j313c0h4dib.jpg" alt="FE1877B0-9CD6-4B26-9826-8521FC9D6FC0"></p><ul><li><del>多说，已不支持</del></li><li><del>网易云跟帖，已不支持</del></li></ul><h2 id="使用来必力"><a href="#使用来必力" class="headerlink" title="使用来必力"></a>使用来必力</h2><h3 id="注册livers"><a href="#注册livers" class="headerlink" title="注册livers"></a><a href="https://livere.com/" target="_blank" rel="noopener">注册livers</a></h3><p>livere有两个版本：</p><ul><li>City 版：是一款适合所有人使用的免费版本</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本</li></ul><p>使用City版就行了。</p><h3 id="获取安装代码"><a href="#获取安装代码" class="headerlink" title="获取安装代码"></a>获取安装代码</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpse4v4hcfj31kw0t1n36.jpg" alt="9A207FBE-5518-418D-B4EB-8BFAC651667F"></p><p>填写完成后，进入到 管理页面 -&gt; 代码管理 -&gt; 一般网站 代码中，data-uid即为next主题所需要的livere_uid。</p><h3 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config</span><br><span class="line">livere_uid: data-uid</span><br><span class="line">## 本地无需重启，要部署到github pages需要重新部署</span><br></pre></td></tr></table></figure><h2 id="使用Gitment"><a href="#使用Gitment" class="headerlink" title="使用Gitment"></a>使用Gitment</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.zhoujy.me/2017/07/16/livere/" target="_blank" rel="noopener">http://www.zhoujy.me/2017/07/16/livere/</a> 为Hexo主题yilia添加livere(来必力)评论支持</li><li><a href="http://www.hl10502.com/2017/03/24/hexo-config-livere/" target="_blank" rel="noopener">http://www.hl10502.com/2017/03/24/hexo-config-livere/</a> hexo添加LiveRe评论支持</li></ul><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/28/hexo进阶之添加评论/">http://steven-ji.github.io/blog/2018/03/28/hexo进阶之添加评论/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo添加评论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo进阶之局部优化</title>
      <link href="/blog/2018/03/27/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%B1%80%E9%83%A8%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2018/03/27/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%B1%80%E9%83%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="Hexo进阶之局部优化"><a href="#Hexo进阶之局部优化" class="headerlink" title="Hexo进阶之局部优化"></a>Hexo进阶之局部优化</h2><h3 id="字数统计、Fork-me置头像、打赏、社交链接"><a href="#字数统计、Fork-me置头像、打赏、社交链接" class="headerlink" title="字数统计、Fork me置头像、打赏、社交链接"></a>字数统计、Fork me置头像、打赏、社交链接</h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇主要是一些局部优化，添加字数统计、添加Fork me、添加头像</p><h2 id="添加字数统计"><a href="#添加字数统计" class="headerlink" title="添加字数统计"></a>添加字数统计</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fpqf4rgznpj31kw0bimzg.jpg" alt="D9E2AF45-72FC-42F3-8532-355F57ED887A"></p><p>安装wordcount插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br><span class="line">主要功能</span><br><span class="line">字数统计:WordCount</span><br><span class="line">阅读时长预计:Min2Read</span><br><span class="line">总字数统计: TotalCount</span><br></pre></td></tr></table></figure><p>编辑主题配置，开启功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/layout/_layout.swig</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="添加Fork-me-on-GitHub"><a href="#添加Fork-me-on-GitHub" class="headerlink" title="添加Fork me on GitHub"></a>添加Fork me on GitHub</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fprt5hy8j5j30zm0dutah.jpg" alt="BBFC33F1-22F3-446E-BCA7-61D01D649CFE"></p><p>去网址<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\next\layout_layout.swig的body标签之内即可。把里面的url换成自己的!</p><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>修改主题配置_config.yml中的avatar字段，添加头像路径。</p><p>两种添加方式：一设置头像url地址；二是上传头像图片，设置图片路径；</p><p>我采用第二种，在source下新建uploads目录，图片上传即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /uploads/avatar.png</span><br></pre></td></tr></table></figure><h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><p>修改主题配置_config.yml中的social字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config.yml</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/steven-ji || github</span><br></pre></td></tr></table></figure><h2 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fpsmkzvnskj31kw05i0tr.jpg" alt="35342F5B-11ED-4D46-868F-9FFB2F85C8A1"></p><p>修改主题配置文件，修改字段since</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2013</span><br></pre></td></tr></table></figure><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fpsnkjibmbj31kw0nmn2l.jpg" alt="DB4C42AF-6DB1-4EB4-AFB1-A1C51F72CB85"></p><p>修改主题配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /blog/uploads/wechatpay.png</span><br><span class="line">alipay: /blog/uploads/alipay.png</span><br></pre></td></tr></table></figure><p>注：如果访问的博客有带根路径，如我的博客地址是<a href="https://steven-ji.github.io/blog/，则需要在图片路径前加/blog，不然访问不到图片。">https://steven-ji.github.io/blog/，则需要在图片路径前加/blog，不然访问不到图片。</a></p><h2 id="文末添加版权声明"><a href="#文末添加版权声明" class="headerlink" title="文末添加版权声明"></a>文末添加版权声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-addlink --save</span><br><span class="line">## 修改站点配置文件,addlink支持markdown语法</span><br><span class="line">addlink:</span><br><span class="line">  before_text: __本文作者__：ttbb&lt;br /&gt;__本文地址__：  </span><br><span class="line">  after_text: &lt;br /&gt;__版权声明__：本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 3.0 CN](http://creativecommons.org/licenses/by-nc-sa/3.0/cn/) 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure><h2 id="文章分享朋友圈功能-不支持https"><a href="#文章分享朋友圈功能-不支持https" class="headerlink" title="文章分享朋友圈功能(不支持https)"></a>文章分享朋友圈功能(不支持https)</h2><p>使用第三方插件<a href="http://www.jiathis.com/" target="_blank" rel="noopener">jiathis</a></p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a><a href="http://www.jiathis.com/" target="_blank" rel="noopener">注册账号</a></h3><p>注册成功后，获取uid。（在设置-&gt;基本设置-&gt;账户信息中）</p><h3 id="修改jiathis-swig文件"><a href="#修改jiathis-swig文件" class="headerlink" title="修改jiathis.swig文件"></a>修改jiathis.swig文件</h3><p>如果不需要的分享地方可以删除了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes\next\layout\_partials\share\jiathis.swig</span><br><span class="line"></span><br><span class="line">&lt;span class=&quot;jiathis_txt&quot;&gt;分享到：&lt;/span&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_fav&quot;&gt;收藏夹&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_copy&quot;&gt;复制网址&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_email&quot;&gt;邮件&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_weixin&quot;&gt;微信&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_qzone&quot;&gt;QQ空间&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_tqq&quot;&gt;腾讯微博&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_douban&quot;&gt;豆瓣&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_share&quot;&gt;一键分享&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p>修改主题配置文件，使用注册后获得的uid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$vim theme/next/_config.yml</span><br><span class="line">jiathis:</span><br><span class="line">  enable: true</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">  add_this_id: yourUID</span><br></pre></td></tr></table></figure><h2 id="配置网站图标"><a href="#配置网站图标" class="headerlink" title="配置网站图标"></a>配置网站图标</h2><p>修改主题配置文件</p><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/6575320A-EF98-4E05-BD6A-B6504D5BCCA6.png" alt="6575320A-EF98-4E05-BD6A-B6504D5BCCA6"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 上图网站图标到theme/next/source/images/目录下,配置网站图标名称</span><br><span class="line">$ vim theme/next/_config.yml</span><br><span class="line">favicon:</span><br><span class="line">  medium: /images/favicon.png</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html</a> 主题配置</li><li><a href="http://barrysite.me/2017/05/07/Hexo%20Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">http://barrysite.me/2017/05/07/Hexo%20Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</a>  Hexo Next主题下基本配置</li><li><a href="http://zhy.one/html/hexo-addlink.html" target="_blank" rel="noopener">http://zhy.one/html/hexo-addlink.html</a> 用hexo-addlink在文章尾部插入当前文章链接</li></ul><hr><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/27/hexo进阶之局部优化/">http://steven-ji.github.io/blog/2018/03/27/hexo进阶之局部优化/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo局部优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo进阶之添加分类、标签、搜索菜单</title>
      <link href="/blog/2018/03/26/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%88%86%E7%B1%BB%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E6%90%9C%E7%B4%A2/"/>
      <url>/blog/2018/03/26/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%88%86%E7%B1%BB%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h2 id="hexo进阶之添加菜单"><a href="#hexo进阶之添加菜单" class="headerlink" title="hexo进阶之添加菜单"></a>hexo进阶之添加菜单</h2><h3 id="分类、标签、搜索"><a href="#分类、标签、搜索" class="headerlink" title="分类、标签、搜索"></a>分类、标签、搜索</h3><ul><li>工具：hexo + NexT</li></ul><ul><li>环境：mac(10.13.2)、node.js(9.4.0)、npm(5.6.0)</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇已经搭建了最简单的博客，没有常见的菜单：分类、标签、音乐、搜索、RSS订阅、个人，这一篇就是完善这个菜单功能。</p><h2 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpqfg4dw6pj31kw0qzwma.jpg" alt="89A00507-FB87-4FD0-8A1C-9E817208C45D"></p><a id="more"></a><h3 id="修改NexT下的主题配置文件"><a href="#修改NexT下的主题配置文件" class="headerlink" title="修改NexT下的主题配置文件"></a>修改NexT下的主题配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config.yml</span><br><span class="line">## 添加菜单(配置菜单对应的图标,NexT使用的是Font Awesome提供的图标https://fontawesome.com/)</span><br><span class="line">## || 后面为图标名称</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #search: /search/ || search   ## 不需要配置，使用了local search</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="编辑页面显示的菜单中文名称"><a href="#编辑页面显示的菜单中文名称" class="headerlink" title="编辑页面显示的菜单中文名称"></a>编辑页面显示的菜单中文名称</h3><p>编辑Next目录下的languages/{language}.yml文件，{language}.yml为站点_config.yml中配置的languages: zh-Hans对应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim /theme/next/languages/zh-Hans.yml</span><br><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br></pre></td></tr></table></figure><p>到这里，已经添加了归档、分类等菜单，但是点击是没有效果的。</p><h3 id="配置菜单对应内容"><a href="#配置菜单对应内容" class="headerlink" title="配置菜单对应内容"></a>配置菜单对应内容</h3><h4 id="分类菜单"><a href="#分类菜单" class="headerlink" title="分类菜单"></a>分类菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 创建categories页面</span><br><span class="line">$ hexo new page &quot;categories&quot;</span><br><span class="line">$ vim source/categories/index.md</span><br><span class="line">  title: All categories</span><br><span class="line">  date: 2018-03-26 12:39:04</span><br><span class="line">  type: &quot;categories&quot;</span><br><span class="line">  comments: false</span><br></pre></td></tr></table></figure><h4 id="标签菜单"><a href="#标签菜单" class="headerlink" title="标签菜单"></a>标签菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 创建tags页面</span><br><span class="line">$ hexo new page &quot;tags&quot;</span><br><span class="line">$ vim source/tags/index.md</span><br><span class="line">  title: All tags</span><br><span class="line">  date: 2014-12-22 12:39:04</span><br><span class="line">  type: &quot;tags&quot;</span><br><span class="line">  comments: false</span><br></pre></td></tr></table></figure><p>注：分类和标签还没有和分类关联起来，需要在每篇文章头部添加categories和tags属性，这样就可以自动关联了，为了后续方便，修改scaffolds/post.md模版即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo+github快速搭建博客</span><br><span class="line">date: 2018-03-25 14:12:32</span><br><span class="line">categories: hexo</span><br><span class="line">tags: </span><br><span class="line">- hexo+github+next</span><br><span class="line">- hexo</span><br></pre></td></tr></table></figure><h4 id="搜索菜单"><a href="#搜索菜单" class="headerlink" title="搜索菜单"></a>搜索菜单</h4><p>采用Hexo提供的Local Search站内搜索,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## 在站点根目录下安装</span><br><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br><span class="line">## 站点_config.yml配置</span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">## 主题配置文件修改</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>注：由于使用了local search，主题配置文件中就menu属性就不需要添加search了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a> NexT开始使用</li><li><a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md</a> NexT使用文档</li><li><a href="http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html" target="_blank" rel="noopener">http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html</a> hexo搭建</li></ul><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/26/hexo进阶之分类、标签、搜索/">http://steven-ji.github.io/blog/2018/03/26/hexo进阶之分类、标签、搜索/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo+github快速搭建博客</title>
      <link href="/blog/2018/03/25/hexo+github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/blog/2018/03/25/hexo+github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="自建博客最佳实践"><a href="#自建博客最佳实践" class="headerlink" title="自建博客最佳实践"></a>自建博客最佳实践</h2><p>本篇是自己实践记录。</p><ul><li>工具：hexo 3.6.0 + github pages + git + NexT 5.1.4</li><li>环境：mac(10.13.2)、node.js(9.4.0)、npm(5.6.0)</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开始之前，先回答三个哲学问题，它是谁？它从哪里来？它要到哪里去？</p><ul><li><p>hexo</p><p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p><p>一个github的开源项目。<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexojs/hexo</a></p><p>说白了，就是本来想要搭建一个博客（比较麻烦的是页面样式等），而别人已经给你搞了个框架，你只管创作，其他的都不要你操心（给你一个漂亮的页面），交给它就可以了，给你生成一个静态的页面，放哪都能访问。</p></li><li><p>GitHub Pages</p><p>Github Pages 本身就是 Github 为用户提供的一个介绍项目、发表技术文章的网站。当你创建了它，这时可以认为你已经拥有了一个网站，只不过这个网站没有内容。Github Pages 的网站内容和样式全部可以由用户自己定制，网站空间无限，流量免费，Github为你维护，安全又稳定，而且你可以很轻松的更新它。<br>Github Pages 实际上是一个 Github 仓库，这也就解释了为什么其很容易更新，因为网站的样式和内容都存储在该仓库中，当你更新仓库时，网站也自动更新了。</p><p>说白了，就是一个免费的服务器，把hexo生成的静态页面往上一放，哪哪都能访问了。</p></li></ul><a id="more"></a><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><ul><li>方式一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">##查看node版本，建议安装最新版本9.4.0</span><br><span class="line">$ node -v</span><br><span class="line">v4.4.0</span><br><span class="line">##清除node.js的cache</span><br><span class="line">$ sudo npm cache clean -f</span><br><span class="line">  注：这里可能会报错，如果报错，放弃使用这种方式，使用方式二</span><br><span class="line">  npm WARN using --force I sure hope you know what you are doing.</span><br><span class="line">  npm ERR! code MODULE_NOT_FOUND</span><br><span class="line">  npm ERR! Cannot find module &apos;internal/util/types&apos;</span><br><span class="line"></span><br><span class="line">  npm ERR! A complete log of this run can be found in:</span><br><span class="line">  npm ERR! /var/root/.npm/_logs/2017-11-20T02_16_00_192Z-debug.log</span><br><span class="line">##安装 n 工具，这个工具是专门用来管理node.js版本的</span><br><span class="line">$ sudo npm install -g n</span><br><span class="line">##安装指定版本的node.js（稳定版|最新版|9.4.0版本），也可以删除sudo n rm 9.0.0</span><br><span class="line">$ sudo n stable|latest|9.4.0</span><br><span class="line">注：安装过程可能会失败，再次安装会报dyld: bad external relocation length的错误，这是由于残留未下载完的文件，删除即可。路径：/usr/local/n/versions/node</span><br><span class="line">##再次检查版本</span><br><span class="line">$ node -v</span><br><span class="line">v9.4.0</span><br><span class="line">$ sudo npm install npm@latest -g</span><br></pre></td></tr></table></figure><ul><li>方式二（推荐使用）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure><p>git的相关配置就不再累述，google一把把</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## 一行搞定</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">  ##当出现这种错误时， Cannot find module &apos;../lib/utils/unsupported.js&apos;</span><br><span class="line">  采用下面方式，重新安装node</span><br><span class="line">  $ rm -rf /usr/local/lib/node_modules</span><br><span class="line">  # remove previously installed node</span><br><span class="line">  $ brew uninstall node</span><br><span class="line">  $ brew prune    # clean all broken symlinks</span><br><span class="line">  $ brew update   # always good to have the latest</span><br><span class="line">  # and install normal one</span><br><span class="line">  $ brew install node</span><br><span class="line">  </span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><h3 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h3><ul><li>新建博客仓库</li></ul><p>这里就建一个名为blog的仓库，初始化README勾选上。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fppg7kxo0oj31880tcgq3.jpg" alt="22DE15A7-4A94-4E2F-96EF-388A2F578A52"></p><ul><li>开启gh-pages功能</li></ul><p>点击Settings</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fppg6lw3kwj31kw0fhdit.jpg" alt="C0CE678E-96DC-42EC-B400-40564E5CDE04"></p><p>找到GitHub Pages，选择使用master分支。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fppg9ln06ej31ba0p678h.jpg" alt="F026F8CB-7AAD-4D2C-9243-8A1216B923C6"></p><p>保存后，就算发布成功了，访问链接地址试试吧。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fppgbjbizlj31780rugq9.jpg" alt="0DCBF15E-1C17-44C3-A08F-D547121A48DC"></p><h3 id="配置hexo并部署"><a href="#配置hexo并部署" class="headerlink" title="配置hexo并部署"></a>配置hexo并部署</h3><h4 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 新建一个文件夹用于存放框架，如blog</span><br><span class="line">$ mkdir -p /usr/xxxx/Documents/blog</span><br><span class="line">$ cd /usr/xxxx/Documents/blog</span><br><span class="line">$ hexo init </span><br><span class="line">$ npm install</span><br><span class="line">## 启动</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br><span class="line">##本地就能查看效果</span><br></pre></td></tr></table></figure><h4 id="将博客与Github关联"><a href="#将博客与Github关联" class="headerlink" title="将博客与Github关联"></a>将博客与Github关联</h4><ul><li>1.编辑主站_config.yml(即/usr/xxxx/Documents/blog目录下)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 配置访问地址和访问根路径</span><br><span class="line">url: http://**.github.io/blog/ 这地址在开启github pages时生成</span><br><span class="line">root: /blog</span><br><span class="line">注：如果我的创建的仓库为testblog，则url和root相应的修改为http://**.github.io/testblog/和/testblog</span><br><span class="line"></span><br><span class="line">## 配置部署路径</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:***/blog</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 安装部署插件</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">## 清除缓存</span><br><span class="line">$ hexo clean</span><br><span class="line">## 本地生成静态文件</span><br><span class="line">$ hexo g</span><br><span class="line">## 部署</span><br><span class="line">$ hexo d</span><br><span class="line">## 访问</span><br><span class="line">https://***.github.io/blog/</span><br></pre></td></tr></table></figure><p>到此，大功告成！</p><p>这里还有点小瑕疵，默认主题我不是很喜欢，这里使用next</p><h4 id="使用NexT主题"><a href="#使用NexT主题" class="headerlink" title="使用NexT主题"></a>使用NexT主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">## 到hexo root目录下</span><br><span class="line">$ cd hexo</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  node_modules  package.json  public  scaffolds  source  themes</span><br><span class="line">$ mkdir themes/next</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line">$ cd themes/next</span><br><span class="line">$ git tag -l</span><br><span class="line">…</span><br><span class="line">v5.1.0</span><br><span class="line">v5.1.1</span><br><span class="line">v5.1.2</span><br><span class="line">v5.1.3</span><br><span class="line">v5.1.4</span><br><span class="line">$ git checkout tags/v5.1.0</span><br><span class="line">Note: checking out &apos;tags/v5.1.0&apos;.</span><br><span class="line">…</span><br><span class="line">HEAD now on 1f72f68... CSS: Remove global list-style setting of ul</span><br><span class="line"></span><br><span class="line">## 配置主站_config.yml（不是theme/next下的_config.yml）</span><br><span class="line">language: zh-Hans</span><br><span class="line">theme: next</span><br><span class="line">## 重新发布即可</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>现在算是完成了！</p><h2 id="后续进阶"><a href="#后续进阶" class="headerlink" title="后续进阶"></a>后续进阶</h2><ul><li>如何使用自己的域名？</li><li>分类、标签、音乐、搜索、RSS订阅，怎么做？</li><li>如何统计访问量？</li><li>如何开通留言功能？</li><li>如何提供大赏功能？</li><li>如何提高博客搜索排名（SEO）？</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>使用 Hexo + Github Pages 搭建独立博客 <a href="http://yanshengjia.com/2017/01/31/%E4%BD%BF%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">http://yanshengjia.com/2017/01/31/%E4%BD%BF%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</a></li><li>我用hexo部署到github-pages上的网页没有样式 <a href="http://www.coin163.com/it/x4042410272215986758/hexo-github-pages" target="_blank" rel="noopener">http://www.coin163.com/it/x4042410272215986758/hexo-github-pages</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a> <a href="https://hexo.io/zh-cn/，建站详细信息可参考" target="_blank" rel="noopener">https://hexo.io/zh-cn/，建站详细信息可参考</a></li><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a> <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> ，主题</li></ul><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="部署到github-pages上的网页没有样式"><a href="#部署到github-pages上的网页没有样式" class="headerlink" title="部署到github-pages上的网页没有样式"></a>部署到github-pages上的网页没有样式</h3><p>这种情况时漏配置了站点_config.yml中的url和root导致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: http://**.github.io/blog/</span><br><span class="line">root: /blog</span><br></pre></td></tr></table></figure><h3 id="hexo生成的文档，不能正确解析语法中的标题"><a href="#hexo生成的文档，不能正确解析语法中的标题" class="headerlink" title="hexo生成的文档，不能正确解析语法中的标题"></a>hexo生成的文档，不能正确解析语法中的标题</h3><p>这是在hexo3.1之后，对语法校验更严格了，#后面需要添加空格</p><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/25/hexo+github快速搭建博客/">http://steven-ji.github.io/blog/2018/03/25/hexo+github快速搭建博客/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo+github+next </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
