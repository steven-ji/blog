<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>docker之实用技巧</title>
      <link href="/blog/2018/10/15/docker%E4%B9%8B%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7/"/>
      <url>/blog/2018/10/15/docker%E4%B9%8B%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里记录自己常用的一些实战技巧.</p><h2 id="技巧一"><a href="#技巧一" class="headerlink" title="技巧一"></a>技巧一</h2><h3 id="容器执行指定命令并后台运行"><a href="#容器执行指定命令并后台运行" class="headerlink" title="容器执行指定命令并后台运行"></a>容器执行指定命令并后台运行</h3><p>容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关.<br>我就有以下场景需求.制作一个squid镜像,并在运行容器后,容器里执行squid start命令.<br>一般需要让容器可以后台长久运行,需要指定/bin/bash指令.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -ti --name [容器名] -d [镜像名] /bin/bash</span><br></pre></td></tr></table></figure></p><h4 id="方式一-通过Dockerfile来build"><a href="#方式一-通过Dockerfile来build" class="headerlink" title="方式一:通过Dockerfile来build"></a>方式一:通过Dockerfile来build</h4><p>利用ENTRYPOINT实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">RUN yum install -y squid</span><br><span class="line"># ip高匿与端口</span><br><span class="line">RUN echo &apos;request_header_access Via deny all&apos; &gt;&gt; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; echo &apos;request_header_access X-Forwarded-For deny all&apos; &gt;&gt; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; echo &apos;request_header_access From deny all&apos; &gt;&gt; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; sed -i &apos;s/http_access deny all/http_access allow all/g&apos; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; sed -i &apos;s/http_port 3128/http_port 57112/g&apos; /etc/squid/squid.conf</span><br><span class="line">ENTRYPOINT /usr/sbin/squid start &amp;&amp; /bin/bash # 这个是重点</span><br><span class="line">EXPOSE 57112</span><br></pre></td></tr></table></figure></p><h4 id="方式二-使用supervisor-有问题-待修改"><a href="#方式二-使用supervisor-有问题-待修改" class="headerlink" title="方式二:使用supervisor(有问题,待修改)"></a>方式二:使用supervisor(有问题,待修改)</h4><p>1、容器中需要安装supervisor服务;<br>2、上传本地supervisor配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">RUN yum install -y squid python-setuptools</span><br><span class="line">RUN easy_install supervisor</span><br><span class="line">COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf</span><br><span class="line"># ip高匿与端口</span><br><span class="line">RUN echo &apos;request_header_access Via deny all&apos; &gt;&gt; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; echo &apos;request_header_access X-Forwarded-For deny all&apos; &gt;&gt; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; echo &apos;request_header_access From deny all&apos; &gt;&gt; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; sed -i &apos;s/http_access deny all/http_access allow all/g&apos; /etc/squid/squid.conf \</span><br><span class="line"> &amp;&amp; sed -i &apos;s/http_port 3128/http_port 57112/g&apos; /etc/squid/squid.conf</span><br><span class="line">EXPOSE 57112</span><br></pre></td></tr></table></figure></p><h5 id="supervisor配置文件"><a href="#supervisor配置文件" class="headerlink" title="supervisor配置文件"></a>supervisor配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[supervisord]</span><br><span class="line">nodaemon=true</span><br><span class="line">[program:squid]</span><br><span class="line">command=/usr/sbin/squid start</span><br></pre></td></tr></table></figure><h2 id="技巧二"><a href="#技巧二" class="headerlink" title="技巧二"></a>技巧二</h2><h3 id="Docker-Hub-自动构建"><a href="#Docker-Hub-自动构建" class="headerlink" title="Docker Hub 自动构建"></a>Docker Hub 自动构建</h3><ul><li>参考:<a href="https://blog.csdn.net/u010246789/article/details/54234217" target="_blank" rel="noopener">https://blog.csdn.net/u010246789/article/details/54234217</a></li><li><a href="http://imquanquan.net/archives/pull-images-to-dockerhub-and-autobuild.html" target="_blank" rel="noopener">http://imquanquan.net/archives/pull-images-to-dockerhub-and-autobuild.html</a></li></ul><h2 id="技巧三"><a href="#技巧三" class="headerlink" title="技巧三"></a>技巧三</h2><h3 id="本地阅读Docker官方文档"><a href="#本地阅读Docker官方文档" class="headerlink" title="本地阅读Docker官方文档"></a>本地阅读Docker官方文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 本地运行Docker官方文档网站</span><br><span class="line">$ docker run -d -p 80:4000 docs/docker.github.io</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker 实用技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker之安装(新)</title>
      <link href="/blog/2018/10/15/docker%E4%B9%8B%E5%AE%89%E8%A3%85-%E6%96%B0/"/>
      <url>/blog/2018/10/15/docker%E4%B9%8B%E5%AE%89%E8%A3%85-%E6%96%B0/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>mac 10.13.4 , Docker version 18.03.1-ce,Centos7</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前docker提供ce(community edition)社区版本和ee(enterprise edition)企业版本.选择ce版本即可.</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw8pa4d93nj31kw0e27lx.jpg" alt="img"></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw8paisws6j31kw0yedl4.jpg" alt="img"></p><h2 id="Centos7安装"><a href="#Centos7安装" class="headerlink" title="Centos7安装"></a>Centos7安装</h2><h3 id="安装CE版本"><a href="#安装CE版本" class="headerlink" title="安装CE版本"></a>安装CE版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 卸载旧版本</span><br><span class="line">$ yum remove docker \</span><br><span class="line">                  docker-ce \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"># 为了防止之前已经安装的遗留问题,删除镜像储存目录</span><br><span class="line">$ rm -rf /var/lib/docker</span><br><span class="line"># 安装依赖工具</span><br><span class="line">$ yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"># 安装docker官方仓库(失败 使用阿里云仓库)</span><br><span class="line">$ yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"># 如果上面执行后如下报错,添加阿里云的源即可.</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">Could not fetch/save url https://download.docker.com/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: [Errno 12] Timeout on https://download.docker.com/linux/centos/docker-ce.repo: (28, &apos;Resolving timed out after 30455 milliseconds&apos;)</span><br><span class="line">$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 安装docker</span><br><span class="line">$ yum install -y docker-ce</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="添加docker-hub中国官方镜像加速器"><a href="#添加docker-hub中国官方镜像加速器" class="headerlink" title="添加docker hub中国官方镜像加速器"></a>添加docker hub<a href="https://www.docker-cn.com/registry-mirror" target="_blank" rel="noopener">中国官方镜像加速器</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.docker.com/get-docker" target="_blank" rel="noopener">docker document</a></li></ul>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker常见问题汇总</title>
      <link href="/blog/2018/10/15/docker%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/blog/2018/10/15/docker%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><h3 id="阿里云启动报错-error-initializing-graphdriver-driver-not-supported"><a href="#阿里云启动报错-error-initializing-graphdriver-driver-not-supported" class="headerlink" title="阿里云启动报错:error initializing graphdriver: driver not supported"></a>阿里云启动报错:error initializing graphdriver: driver not supported</h3><ul><li><p>问题描述<br>从版本docker-ce-18.06.0.ce降到版本docker-ce-17.03.2.ce,不能启动.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -xe</span><br><span class="line">.....</span><br><span class="line">Aug 08 14:27:12 es3-log systemd[1]: Starting Docker Application Container Engine...</span><br><span class="line">Aug 08 14:27:12 es3-log dockerd[23468]: time=&quot;2018-08-08T14:27:12.282682284+08:00&quot; level=info msg=&quot;libcontainerd: new con...23476&quot;</span><br><span class="line">Aug 08 14:27:13 es3-log dockerd[23468]: time=&quot;2018-08-08T14:27:13.286553501+08:00&quot; level=error msg=&quot;[graphdriver] prior s...orted&quot;</span><br><span class="line">Aug 08 14:27:13 es3-log dockerd[23468]: Error starting daemon: error initializing graphdriver: driver not supported</span><br><span class="line">Aug 08 14:27:13 es3-log systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>解决方案<br>删除docker镜像存放目录/var/lib/docker,猜测是新版本目录结构与老版本不通导致.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker-ce-17.03.2.ce版本/var/lib/docker目录</span><br><span class="line">containers image network overlay plugins swarm tmp trust volumes</span><br><span class="line"># docker-ce-18.06.0.ce版本/var/lib/docker目录</span><br><span class="line">builder buildkit containerd containers image network overlay2 plugins runtimesswarm tmp trust volumes</span><br><span class="line">$ rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker常见问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker实战之jenkins集群</title>
      <link href="/blog/2018/10/15/docker%E5%AE%9E%E6%88%98%E4%B9%8Bjenkins%E9%9B%86%E7%BE%A4/"/>
      <url>/blog/2018/10/15/docker%E5%AE%9E%E6%88%98%E4%B9%8Bjenkins%E9%9B%86%E7%BE%A4/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>centos 7</li><li>jenkins 2.121.1</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>jenkins集群是必须搭建的,可以提高部署效率,每次只是部署几个job自然不会出现问题,如果一次要执行100个呢?试过就知道有多慢了!</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>jenkins-master只负责分发构建任务.</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw8owhub28j31kw0s47a1.jpg" alt="img"></p><p>搭建之前,我先把几个关键点梳理下:</p><ul><li>jenkins主节点创建job到目标部署主机的ssh免密登录密钥信息,在集群中的jenkins从节点如何获取?</li><li>jenkins主节点数据必须持久化到本地磁盘</li></ul><h3 id="Pull-jenkins-images"><a href="#Pull-jenkins-images" class="headerlink" title="Pull jenkins images"></a>Pull jenkins images</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><h3 id="Jenkins-master-and-Mount-data-volume"><a href="#Jenkins-master-and-Mount-data-volume" class="headerlink" title="Jenkins master and Mount data volume"></a>Jenkins master and Mount data volume</h3><h4 id="Build-Dockerfile-jenkins-data-and-jenkins-master"><a href="#Build-Dockerfile-jenkins-data-and-jenkins-master" class="headerlink" title="Build Dockerfile: jenkins-data and jenkins-master"></a>Build Dockerfile: jenkins-data and jenkins-master</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f jenkins-data-dockerfile -t jenkins-data .</span><br><span class="line">$ docker build -f jenkins-master-dockerfile -t jenins-master .</span><br><span class="line"># 从节点宿主机上执行</span><br><span class="line">$ docker build -f jenkins-slave-dockerfile -t jenins-slave .</span><br></pre></td></tr></table></figure><h4 id="Run-jenkins-master"><a href="#Run-jenkins-master" class="headerlink" title="Run jenkins-master"></a>Run jenkins-master</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户持久化jenkins数据文件的目录及日志目录.</span><br><span class="line">$ mkdir -p &#123;/data/jenkins,/data/logs/jenkins&#125;</span><br><span class="line"># 容器内启动jenkins服务使用的是jenkins用户,所以必须修改目录用户拥有者为</span><br><span class="line">$ chown 1000:1000 &#123;/data/jenkins,/data/logs/jenkins&#125;</span><br><span class="line"># 启动数据卷jenkins-datas</span><br><span class="line">$ docker run --name jenkins-data \</span><br><span class="line">-v /data/jenkins:/var/jenkins_home \</span><br><span class="line">-v /data/logs/jenkins:/var/log/jenkins \</span><br><span class="line">jenkins-data</span><br><span class="line"># 启动jenkins-master.(构建dockerfile见附录.)</span><br><span class="line">$ docker run -d \</span><br><span class="line">-p 19875:8080 \</span><br><span class="line">-p 50000:50000 \</span><br><span class="line">--volumes-from jenkins-data \</span><br><span class="line">--name jenkins-master \</span><br><span class="line">jenkins-master</span><br></pre></td></tr></table></figure><h4 id="Run-jenkins-slave-in-slave-machine"><a href="#Run-jenkins-slave-in-slave-machine" class="headerlink" title="Run jenkins-slave in slave machine"></a>Run jenkins-slave in slave machine</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -ti -d \</span><br><span class="line">-p 19222:22 \</span><br><span class="line">--restart on-failure \</span><br><span class="line">--network host \ </span><br><span class="line">--name jenkins-slave \</span><br><span class="line">jenkins-slave</span><br></pre></td></tr></table></figure><h3 id="Jenkins-master-add-slave-node"><a href="#Jenkins-master-add-slave-node" class="headerlink" title="Jenkins master add slave node"></a>Jenkins master add slave node</h3><h4 id="添加登录slave的用户名密码"><a href="#添加登录slave的用户名密码" class="headerlink" title="添加登录slave的用户名密码"></a>添加登录slave的用户名密码</h4><p>Jenkins-&gt;Credentials</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw8owuiwo9j31kw0uv165.jpg" alt="img"></p><p>这里可以添加root用户,避免一些权限问题.</p><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><p>Jenkins-&gt;系统管理-&gt;管理节点</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw8ox2zmvzj31kw0upn4l.jpg" alt="img"></p><p>指定远程工作目录,如果是用jenkins_slave用户时注意/home/jenkins_home需要jenkins_slave权限.为了方便起见,这里就直接使用root用户</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw8oxb0mqpj31kw0uq7de.jpg" alt="img"></p><h3 id="同步jenkins-master的密钥及相关脚本"><a href="#同步jenkins-master的密钥及相关脚本" class="headerlink" title="同步jenkins-master的密钥及相关脚本"></a>同步jenkins-master的密钥及相关脚本</h3><p>这里我采用的做法是配置job,通过job将.ssh/id_rsa, .ssh/id_rsa.pub,.ssh/known_hosts拷贝到slave中(见rsa_sysnc.sh脚本).<br>(所有脚本<a href="https://github.com/steven-ji/proxy-scripts.git" target="_blank" rel="noopener">proxy-scripts</a>已同步到git上.)</p><h4 id="新建同步job"><a href="#新建同步job" class="headerlink" title="新建同步job"></a>新建同步job</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw8oxhw1j2j31ie0j63zx.jpg" alt="img"></p><h2 id="上传dockerfile到docker-hub个人仓库"><a href="#上传dockerfile到docker-hub个人仓库" class="headerlink" title="上传dockerfile到docker hub个人仓库."></a>上传dockerfile到docker hub个人仓库.</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="Getting-started-with-Docker-官方-推荐"><a href="#Getting-started-with-Docker-官方-推荐" class="headerlink" title="Getting started with Docker 官方,推荐"></a><a href="https://jenkins.io/solutions/docker/" target="_blank" rel="noopener">Getting started with Docker</a> 官方,推荐</h3><h3 id="Docker-Volume-之权限管理"><a href="#Docker-Volume-之权限管理" class="headerlink" title="Docker Volume 之权限管理"></a><a href="https://www.cnblogs.com/jackluo/p/5783116.html" target="_blank" rel="noopener">Docker Volume 之权限管理</a></h3><h3 id="Get-Started-with-Jenkins-2-0-with-Docker"><a href="#Get-Started-with-Jenkins-2-0-with-Docker" class="headerlink" title="Get Started with Jenkins 2.0 with Docker"></a><a href="https://www.cloudbees.com/blog/get-started-jenkins-20-docker" target="_blank" rel="noopener">Get Started with Jenkins 2.0 with Docker</a></h3><h3 id="Official-Jenkins-Docker-image"><a href="#Official-Jenkins-Docker-image" class="headerlink" title="Official Jenkins Docker image"></a><a href="https://github.com/jenkinsci/docker/blob/master/README.md" target="_blank" rel="noopener">Official Jenkins Docker image</a></h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="jenkins-data-dockerfile"><a href="#jenkins-data-dockerfile" class="headerlink" title="jenkins-data-dockerfile"></a>jenkins-data-dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim jenkins-data-dockerfile</span><br><span class="line">FROM debian:jessie</span><br><span class="line"># Create the jenkins user</span><br><span class="line">RUN useradd -d &quot;/var/jenkins_home&quot; -u 1000 -m -s /bin/bash jenkins</span><br><span class="line"># Create the folders and volume mount points</span><br><span class="line">RUN mkdir -p /var/log/jenkins</span><br><span class="line">RUN chown -R jenkins:jenkins /var/log/jenkins</span><br><span class="line">VOLUME [&quot;/var/log/jenkins&quot;, &quot;/var/jenkins_home&quot;]</span><br><span class="line">USER jenkins</span><br><span class="line">CMD [&quot;echo&quot;, &quot;Data container for Jenkins&quot;]</span><br></pre></td></tr></table></figure><h3 id="jenkins-master-dockerfile-待补充插件列表"><a href="#jenkins-master-dockerfile-待补充插件列表" class="headerlink" title="jenkins-master-dockerfile(待补充插件列表)"></a>jenkins-master-dockerfile(待补充插件列表)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim jenkins-master-dockerfile</span><br><span class="line">FROM jenkins/jenkins:lts</span><br><span class="line"># 增加swarm:3.13插件.https://plugins.jenkins.io/swarm</span><br><span class="line">USER root</span><br><span class="line">RUN /usr/local/bin/install-plugins.sh docker_swarm Ansible Multijob Pipeline</span><br><span class="line">USER jenkins</span><br></pre></td></tr></table></figure><h3 id="jenkins-slave-dockerfile"><a href="#jenkins-slave-dockerfile" class="headerlink" title="jenkins-slave-dockerfile"></a>jenkins-slave-dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:centos7</span><br><span class="line"># 创建用户及修改密码</span><br><span class="line">RUN groupadd -g 1000 jenkins_slave</span><br><span class="line">RUN useradd -d /home/jenkins_home -s /bin/bash \</span><br><span class="line">-m jenkins_slave -u 1000 -g jenkins_slave</span><br><span class="line">RUN echo &apos;ys123456&apos; | passwd --stdin root</span><br><span class="line">RUN echo &apos;jpass&apos; | passwd --stdin jenkins_slave</span><br><span class="line"># 安装依赖包</span><br><span class="line">RUN yum install -y passwd openssl openssh-server wget git vim java-1.8.0-openjdk java-1.8.0-openjdk-devel ansible</span><br><span class="line"># 设置maven,安装路径保持和jenkins-master中的一致.</span><br><span class="line">RUN rm -rf /opt/apache-maven* &amp;&amp; \</span><br><span class="line">wget -O /opt/apache-maven-3.5.4.tar.gz http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz &amp;&amp; \</span><br><span class="line">tar -xvf /opt/apache-maven-3.5.4.tar.gz -C /opt/ &amp;&amp; \</span><br><span class="line">mv /opt/apache-maven-3.5.4 /opt/maven &amp;&amp; \</span><br><span class="line">rm -rf /opt/apache-maven-3.5.4 &amp;&amp; \</span><br><span class="line">rm -rf /opt/apache-maven-3.5.4.tar.gz &amp;&amp; \</span><br><span class="line">echo &quot;export MAVEN_HOME=/opt/maven&quot; &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">echo &apos;PATH=$PATH:$MAVEN_HOME/bin&apos; &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">source /etc/profile</span><br><span class="line"># 设置jdk,安装路径保持和jenkins-master中的一致.</span><br><span class="line">RUN mkdir -p /usr/local/java &amp;&amp; \</span><br><span class="line">wget --no-cookies \</span><br><span class="line">--no-check-certificate \</span><br><span class="line">--header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; \</span><br><span class="line">http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz \</span><br><span class="line">-O /usr/local/java/jdk1.8.tar.gz</span><br><span class="line">RUN tar -xvf /usr/local/java/jdk1.8.tar.gz -C /usr/local/java &amp;&amp; mv /usr/local/java/jdk1.8.0_171 /usr/local/java/jdk1.8 &amp;&amp; echo &apos;export JAVA_HOME=/usr/local/java/jdk1.8&apos; &gt;&gt; /etc/profile &amp;&amp; echo &apos;PATH=$PATH:$JAVA_HOME/bin&apos; &amp;&amp; source /etc/profile</span><br><span class="line"># 设置jenkins_home目录,保持和jenkins-master一致.(根据需要自己修改路径)</span><br><span class="line">RUN mkdir -p /root/.jenkins &amp;&amp; echo &apos;export JENKINS_HOME=/root/.jenkins/&apos; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</span><br><span class="line"># 生成密钥</span><br><span class="line">RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &apos;&apos;</span><br><span class="line">RUN ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N &apos;&apos;</span><br><span class="line">RUN sed -i &apos;s|session required pam_loginuid.so|session optional pam_loginuid.so|g&apos; /etc/pam.d/sshd</span><br><span class="line">RUN mkdir -p /root/.ssh &amp;&amp; chown root.root /root &amp;&amp; chmod 700 /root/.ssh</span><br><span class="line"></span><br><span class="line"># 下载脚本.这里是因为脚本构建用到了许多脚本.</span><br><span class="line">RUN git clone https://github.com/steven-ji/proxy-scripts.git /opt/scripts</span><br><span class="line">RUN chown -R 1000:1000 /opt/scripts</span><br><span class="line"></span><br><span class="line">#设置时区</span><br><span class="line">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &apos;Asia/Shanghai&apos; &gt;/etc/timezone</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">CMD ip addr ls eth0 | awk &apos;&#123;print $2&#125;&apos; | egrep -o &apos;([0-9]+\.)&#123;3&#125;[0-9]+&apos;;/usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><h3 id="jenkins-slave-swarm-dockerfile"><a href="#jenkins-slave-swarm-dockerfile" class="headerlink" title="jenkins-slave-swarm-dockerfile"></a>jenkins-slave-swarm-dockerfile</h3><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><h3 id="场景一-jenkins-master为较早创建-需要扩展jenkins-slave"><a href="#场景一-jenkins-master为较早创建-需要扩展jenkins-slave" class="headerlink" title="场景一:jenkins-master为较早创建,需要扩展jenkins-slave"></a>场景一:jenkins-master为较早创建,需要扩展jenkins-slave</h3><p>jenkins-master为较早创建的,其中全局工具配置里jdk路径、maven路径、工作空间路径等都是已经确定好的.在创建jenkins-slave时,需要保持与jenkins-master一致.(或者修改主master的相关路径)</p><ul><li>jdk安装路径一致</li><li>maven安装路径一致</li><li>工作空间(workspace)路径一致<br>jenkins-&gt;全局工具配置</li></ul><p>jenkins-&gt;系统设置<br>Jenkins默认的内置工作空间为系统用户的根目录下，其文件夹名称为”.jenkins”.如果设置了JENKINS_HOME则使用.</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins集群 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitLab安装篇</title>
      <link href="/blog/2018/10/13/GitLab%E5%AE%89%E8%A3%85%E7%AF%87/"/>
      <url>/blog/2018/10/13/GitLab%E5%AE%89%E8%A3%85%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>最近准备迁移公司的svn仓库,记录下自己学习及迁移过程.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>GitLab目前提供三个版本:(以下都是docker镜像)</p><ul><li><a href="https://hub.docker.com/r/gitlab/gitlab-ce/" target="_blank" rel="noopener">GitLab Community Edition</a></li><li><a href="https://hub.docker.com/r/gitlab/gitlab-ee/" target="_blank" rel="noopener">GitLab Enterprise Edition</a></li><li><a href="https://hub.docker.com/r/gitlab/gitlab-runner/" target="_blank" rel="noopener">GitLab Runner</a></li></ul><p>只是为了满足基本使用,以CE版本安装.</p><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><ul><li><p>运行环境要求</p><p>4G内存(最低2G)、4核或8核CPU</p></li></ul><p>启动GitLab是比较简单.但在正式开始使用之前,对它的配置有个全面的了解是很有必要的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  --hostname 192.168.1.222 \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /data/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /data/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  --network host \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br><span class="line"># 443 https访问端口,80 http访问端口, 22 docker容器端口.</span><br><span class="line"># /data/gitlab/config配置文件目录</span><br><span class="line"># /data/gitlab/logs日志存储目录</span><br><span class="line"># /data/gitlab/data应用数据存储目录</span><br></pre></td></tr></table></figure><ul><li><p><code>--env GITLAB_OMNIBUS_CONFIG=&quot;&quot;</code></p><p>该参数可以覆盖容器中GitLab的配置文件/etc/gitlab/gitlab.rb.具体参数详见<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">gitlab.rb.template</a></p></li></ul><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><ul><li><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">gitlab.rb配置详情</a></li></ul><p>GitLab启动加载的配置文件为gitlab.rb,先创建出来.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch /data/gitlab/config/gitlab.rb</span><br></pre></td></tr></table></figure><h4 id="邮件通知配置"><a href="#邮件通知配置" class="headerlink" title="邮件通知配置"></a>邮件通知配置</h4><p>邮件的配置方式比较多,这里以<strong>阿里云企业邮箱</strong>为主.(以下提供链接)</p><ul><li><a href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener">SMTP</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails[&apos;smtp_enable&apos;] = true</span><br><span class="line">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.qiye.aliyun.com&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_port&apos;] = 465</span><br><span class="line">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;username@your domain&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_password&apos;] = &quot;password&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_domain&apos;] = &quot;your domain&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = false</span><br><span class="line">gitlab_rails[&apos;smtp_tls&apos;] = true</span><br></pre></td></tr></table></figure><h5 id="测试邮箱"><a href="#测试邮箱" class="headerlink" title="测试邮箱"></a>测试邮箱</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ssh到Gitlab的docker容器中.</span><br><span class="line">$ docker exec -ti gitlab /bin/bash</span><br><span class="line">$ gitlab-rails console</span><br><span class="line">$ Notify.test_email(&apos;destination_email@address.com&apos;, &apos;Message Subject&apos;, &apos;Message Body&apos;).deliver_now</span><br></pre></td></tr></table></figure><h4 id="配置外部访问的URL"><a href="#配置外部访问的URL" class="headerlink" title="配置外部访问的URL"></a>配置外部访问的URL</h4><p>不使用内置的nginx时可以不配置.</p><ul><li>支持https</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件中添加如下,则访问GitLab的路径就是:http://gitlab.example.com</span><br><span class="line">external_url &quot;http://gitlab.example.com&quot;</span><br><span class="line">external_url &quot;https://gitlab.example.com&quot;</span><br><span class="line"># 重新加载配置</span><br><span class="line">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h4 id="配置支持Https"><a href="#配置支持Https" class="headerlink" title="配置支持Https"></a>配置支持Https</h4><p>GitLab安装时默认绑定安装了一个内置的Nginx.</p><h5 id="使用内置Nginx"><a href="#使用内置Nginx" class="headerlink" title="使用内置Nginx"></a>使用内置Nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 域名可以自己注册,如果没有,只能使用ip.</span><br><span class="line">external_url &quot;https://gitlab.example.com&quot;</span><br><span class="line"># 兼容http方式.</span><br><span class="line">nginx[&apos;redirect_http_to_https&apos;] = true</span><br><span class="line"># 配置GitLab证书.可以使用自生成的,也可以使用收费的.如startssl.</span><br><span class="line">nginx[&apos;ssl_certificate&apos;] = &quot;/etc/gitlab/ssl/gitlab.example.com.crt&quot;</span><br><span class="line">nginx[&apos;ssl_certificate_key&apos;] = &quot;/etc/gitlab/ssl/gitlab.example.com.key&quot;</span><br><span class="line"># </span><br><span class="line"> nginx[&apos;proxy_set_headers&apos;] = &#123;</span><br><span class="line">  &quot;X-Forwarded-Proto&quot; =&gt; &quot;http&quot;,</span><br><span class="line">  &quot;CUSTOM_HEADER&quot; =&gt; &quot;VALUE&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="使用外部Nginx"><a href="#使用外部Nginx" class="headerlink" title="使用外部Nginx"></a>使用外部Nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 关闭内置nginx</span><br><span class="line">nginx[&apos;enable&apos;] = false</span><br><span class="line"># 配置访问用户.Debian/Ubuntu the default user is www-data for both Apache/Nginx whereas for RHEL/CentOS the Nginx user is nginx.</span><br><span class="line">web_server[&apos;external_users&apos;] = [&apos;www-data&apos;,&apos;nginx&apos;]</span><br><span class="line"># 配置nginx服务器ip白名单</span><br><span class="line">gitlab_rails[&apos;trusted_proxies&apos;] = [&apos;192.168.1.0/24&apos;, &apos;192.168.2.1&apos;, &apos;2001:0db8::/32&apos; ]</span><br><span class="line"># Define the external url</span><br><span class="line">external_url &apos;http://git.example.com&apos;</span><br><span class="line"># Disable the built-in nginx</span><br><span class="line">nginx[&apos;enable&apos;] = false</span><br><span class="line"># Disable the built-in unicorn</span><br><span class="line">unicorn[&apos;enable&apos;] = false</span><br><span class="line"># Set the internal API URL</span><br><span class="line">gitlab_rails[&apos;internal_api_url&apos;] = &apos;http://git.example.com&apos;</span><br><span class="line"># Define the web server process user (ubuntu/nginx)</span><br><span class="line">web_server[&apos;external_users&apos;] = [&apos;www-data&apos;]</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https" target="_blank" rel="noopener">Enable https</a></li></ul><h4 id="配置Git-Repository数据存储路径"><a href="#配置Git-Repository数据存储路径" class="headerlink" title="配置Git Repository数据存储路径"></a>配置Git Repository数据存储路径</h4><p>Git repository数据存储的默认路径是:/var/opt/gitlab/git-data.</p><p>注:如果采用了docker镜像方式,在启动时已经指定了宿主机的目录/data/gitlab/data,所以下面的配置可以不用.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># default修改存储目录,alternative增加一个存储目录</span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  &quot;default&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/var/opt/gitlab/git-data&quot; &#125;,</span><br><span class="line">  &quot;alternative&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/mnt/nas/git-data&quot; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="GitLab重新加载配置"><a href="#GitLab重新加载配置" class="headerlink" title="GitLab重新加载配置"></a>GitLab重新加载配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>#### </p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw84q9ykaij30vy082gly.jpg" alt="image-20181014223921033"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">GitLab Docker Images</a></li></ul>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gh-ost使用</title>
      <link href="/blog/2018/10/10/gh-ost%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2018/10/10/gh-ost%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>生产上,有时需要对一些大表(几千万数据)的表中字段进行增、改操作.如果直接操作,很可能对线上有比较大的影响.很多时候,需要在非忙时(大多是凌晨)进行表修改.想想都折磨人.</p><p>这里记录使用工具<a href="https://github.com/github/gh-ost" target="_blank" rel="noopener">gh-ost</a>(go语言编写)进行表字段修改.</p><h3 id="为什么用它"><a href="#为什么用它" class="headerlink" title="为什么用它"></a>为什么用它</h3><ul><li>不影响线上性能,基于binary log的,异步的处理增量数据.而其他工具基于triggle.<a href="https://github.com/github/gh-ost/blob/master/doc/why-triggerless.md" target="_blank" rel="noopener">为什么不使用triggle?</a></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>伪装成一个mysql的从节点,读取binary log.</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw42o0dt06j31bw0lgjxf.jpg" alt="gh-ost-general-flow"></p></li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在阿里云上的一台mysql,一张2000w数据的表,需要增加一个int型字段.</p><p>使用gh-ost,耗时37分钟.</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>mysql 5.7.15-log (阿里云)</li><li>gh-ost 1.0.46</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>If you mysql already using RBR, all is well for you</li><li>If not, convert one of your replicas to <code>binlog_format=&#39;ROW&#39;</code>, or let <code>gh-ost</code> do this for you.<code>gh-ost</code> <strong>will not</strong> convert back to <code>STATEMENT</code> (SBR)</li><li>Replica should support log-slave-updates.</li></ul><p>所以,gh-ost建议连接到mysql的从节点上.原因如上:如果binary log为statement模式时,gh-ost会强制转换到row模式,且需要自己手动改回statement.(注: gh-ost参数中配置–switch-to-rbr)</p><h3 id="limitations"><a href="#limitations" class="headerlink" title="limitations"></a>limitations</h3><ul><li>使用具有管理员账号的权限.</li></ul><ul><li>gh-ost对表名大小写不敏感,如待迁移的表名为:MyTable,且存在一张表为Mytable,则不能使用.</li></ul><ul><li><p>表需要存在主键,且主键的值不是null,否则需要在gh-ost参数中添加<code>--allow-nullable-unique-key</code>.一般表的id都设置为自增主键,通用场景不用考虑这种问题.<a href="https://github.com/github/gh-ost/blob/master/doc/shared-key.md" target="_blank" rel="noopener">Read more</a></p></li><li><p>如果gh-ost连接的是从节点,需要确保主从节点上两张表的表结构一直.</p></li><li>使用google云数据库,参数添加 <code>--gcp</code></li><li>使用阿里云的RDS,参数添加 <code>--aliyun-rds</code> </li><li>对表重命名不能使用</li></ul><h3 id="Install-and-Use"><a href="#Install-and-Use" class="headerlink" title="Install and Use"></a>Install and Use</h3><ul><li><a href="https://github.com/github/gh-ost/releases" target="_blank" rel="noopener">download</a></li></ul><p>下载完成后解压后直接使用即可.</p><p>使用的关键是相关参数的设置及理解.参数的详细信息通过<code>./gh-ost --help</code>查看即可.这里我也罗列了详见附录gh-ost参数详解.</p><p>这里记录下我迁移中设置的相关参数.</p><h4 id="阿里云RDS且无从节点"><a href="#阿里云RDS且无从节点" class="headerlink" title="阿里云RDS且无从节点"></a>阿里云RDS且无从节点</h4><ul><li><p>阿里云的RDS,需要添加参数–aliyun-rds</p></li><li><p>无从节点,直接在主节点上执行–allow-on-master</p></li></ul><h5 id="Check-binlog-format"><a href="#Check-binlog-format" class="headerlink" title="Check binlog_format"></a>Check binlog_format</h5><p>检查mysql的binary log格式(FULL也是支持的).如果是statement,需要添加–switch-to-rbr参数,且最后需要手动将binlog_format设置回statement格式.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ show variables like &apos;binlog_format&apos;;</span><br><span class="line">+-----------------------------------------+--------------------------------+</span><br><span class="line">| Variable_name                           | Value                          |</span><br><span class="line">+-----------------------------------------+--------------------------------+</span><br><span class="line">| binlog_format                           | ROW                            |</span><br></pre></td></tr></table></figure><h5 id="Run-migrate"><a href="#Run-migrate" class="headerlink" title="Run migrate"></a>Run migrate</h5><ul><li><a href="https://github.com/github/gh-ost/blob/master/doc/cut-over.md" target="_blank" rel="noopener">cut-over</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">./gh-ost \</span><br><span class="line">--aliyun-rds=true \</span><br><span class="line">--allow-on-master \</span><br><span class="line">--host= --port= --database= --table= --conf=/opt/account.cnf \</span><br><span class="line">--alter=&quot;ADD COLUMN platform int(2) DEFAULT NULL COMMENT &apos;所属平台&apos;&quot; \</span><br><span class="line">--chunk-size=5000 \</span><br><span class="line">--concurrent-rowcount \</span><br><span class="line">--cut-over=atomic \</span><br><span class="line">--cut-over-lock-timeout-seconds=3 \</span><br><span class="line">--initially-drop-ghost-table=true \</span><br><span class="line">--initially-drop-old-table=true \</span><br><span class="line">--initially-drop-socket-file=true \</span><br><span class="line">--timestamp-old-table=true \</span><br><span class="line">--verbose \</span><br><span class="line">--serve-socket-file=/tmp/gh-ost.test.sock \</span><br><span class="line">--switch-to-rbr \</span><br><span class="line">--execute</span><br><span class="line"></span><br><span class="line"># --conf设置登录mysql的用户名和密码文件的绝对路径.内容格式如下.</span><br><span class="line">[client]</span><br><span class="line">user=gh-ost</span><br><span class="line">password=123456</span><br><span class="line"># --aliyun-rds=true针对使用阿里云的RDS.</span><br><span class="line"># --allow-on-master没有从节点时,直接连接主mysql时指定.</span><br><span class="line"># --alter表结构操作,如我这里添加字段&quot;ADD COLOUM platform int(2) DEFAULT NULL COMMENT &apos;所属平台&apos;&quot;</span><br><span class="line"># --chunk-size每次复制数据的数量,默认是1000,允许100~100,000之间.</span><br><span class="line"># --concurrent-rowcount一边复制数据一边计算数据量</span><br><span class="line"># --cut-over数据复制的最后一步,安全的对原表和新表进行切换.默认是atomic,而two-step则不安全.</span><br><span class="line"># --cut-over-lock-timeout-seconds执行cut-over时间.默认3秒,可以不用配置.</span><br><span class="line"># --cut-over-exponential-backoff执行cut-over失败后执行指数级等待.</span><br><span class="line"># --exponential-backoff-max-interval执行指数级等待的最大时间间隔.默认是64.如:</span><br><span class="line"># --exact-rowcount真实计算数据总量,执行count()操作.个人觉得没必要,比较耗时.</span><br><span class="line"># --initially-drop-ghost-table(建议使用)清除以前操作遗留下的ghost表</span><br><span class="line"># --initially-drop-old-table(建议使用)清除以前操作遗留下的旧表</span><br><span class="line"># --initially-drop-socket-file(建议使用)清除以前遗留的socket文件</span><br><span class="line"># --timestamp-old-table旧表加上时间戳</span><br><span class="line"># --verbose日志界别debug</span><br><span class="line"># --serve-socket-file=/tmp/gh-ost.test.sock </span><br><span class="line"># --panic-flag-file=/tmp/gh-ost.panic.flag(暂时不清楚,先不使用)</span><br><span class="line"># --switch-to-rbr(建议添加)这样不用关注mysql的bin log的格式.让gh-ost去执行设置bin-log格式操作.</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="gh-ost参数详解"><a href="#gh-ost参数详解" class="headerlink" title="gh-ost参数详解"></a>gh-ost参数详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">-aliyun-rds</span><br><span class="line">  set to &apos;true&apos; when you execute on Aliyun RDS.</span><br><span class="line">-allow-master-master</span><br><span class="line">  explicitly allow running in a master-master setup</span><br><span class="line">-allow-nullable-unique-key</span><br><span class="line">  allow gh-ost to migrate based on a unique key with nullable columns. As long as no NULL values exist, this should be OK. If NULL values exist in chosen key, data may be corrupted. Use at your own risk!</span><br><span class="line">-allow-on-master</span><br><span class="line">  allow this migration to run directly on master. Preferably it would run on a replica</span><br><span class="line">-alter string</span><br><span class="line">  alter statement (mandatory)</span><br><span class="line">-approve-renamed-columns ALTER</span><br><span class="line">  in case your ALTER statement renames columns, gh-ost will note that and offer its interpretation of the rename. By default gh-ost does not proceed to execute. This flag approves that gh-ost&apos;s interpretation is correct</span><br><span class="line">-ask-pass</span><br><span class="line">  prompt for MySQL password</span><br><span class="line">-assume-master-host string</span><br><span class="line">  (optional) explicitly tell gh-ost the identity of the master. Format: some.host.com[:port] This is useful in master-master setups where you wish to pick an explicit master, or in a tungsten-replicator where gh-ost is unable to determine the master</span><br><span class="line">-assume-rbr</span><br><span class="line">  set to &apos;true&apos; when you know for certain your server uses &apos;ROW&apos; binlog_format. gh-ost is unable to tell, event after reading binlog_format, whether the replication process does indeed use &apos;ROW&apos;, and restarts replication to be certain RBR setting is applied. Such operation requires SUPER privileges which you might not have. Setting this flag avoids restarting replication and you can proceed to use gh-ost without SUPER privileges</span><br><span class="line">-check-flag</span><br><span class="line">  Check if another flag exists/supported. This allows for cross-version scripting. Exits with 0 when all additional provided flags exist, nonzero otherwise. You must provide (dummy) values for flags that require a value. Example: gh-ost --check-flag --cut-over-lock-timeout-seconds --nice-ratio 0</span><br><span class="line">-chunk-size int</span><br><span class="line">  amount of rows to handle in each iteration (allowed range: 100-100,000) (default 1000)</span><br><span class="line">-concurrent-rowcount</span><br><span class="line">  (with --exact-rowcount), when true (default): count rows after row-copy begins, concurrently, and adjust row estimate later on; when false: first count rows, then start row copy (default true)</span><br><span class="line">-conf string</span><br><span class="line">  Config file</span><br><span class="line">-critical-load string</span><br><span class="line">  Comma delimited status-name=threshold, same format as --max-load. When status exceeds threshold, app panics and quits</span><br><span class="line">-critical-load-hibernate-seconds int</span><br><span class="line">  When nonzero, critical-load does not panic and bail out; instead, gh-ost goes into hibernate for the specified duration. It will not read/write anything to from/to any server</span><br><span class="line">-critical-load-interval-millis int</span><br><span class="line">  When 0, migration immediately bails out upon meeting critical-load. When non-zero, a second check is done after given interval, and migration only bails out if 2nd check still meets critical load</span><br><span class="line">-cut-over string</span><br><span class="line">  choose cut-over type (default|atomic, two-step) (default &quot;atomic&quot;)</span><br><span class="line">-cut-over-exponential-backoff</span><br><span class="line">  Wait exponentially longer intervals between failed cut-over attempts. Wait intervals obey a maximum configurable with &apos;exponential-backoff-max-interval&apos;).</span><br><span class="line">-cut-over-lock-timeout-seconds int</span><br><span class="line">  Max number of seconds to hold locks on tables while attempting to cut-over (retry attempted when lock exceeds timeout) (default 3)</span><br><span class="line">-database string</span><br><span class="line">  database name (mandatory)</span><br><span class="line">-debug</span><br><span class="line">  debug mode (very verbose)</span><br><span class="line">-default-retries int</span><br><span class="line">  Default number of retries for various operations before panicking (default 60)</span><br><span class="line">-discard-foreign-keys</span><br><span class="line">  DANGER! This flag will migrate a table that has foreign keys and will NOT create foreign keys on the ghost table, thus your altered table will have NO foreign keys. This is useful for intentional dropping of foreign keys</span><br><span class="line">-dml-batch-size int</span><br><span class="line">  batch size for DML events to apply in a single transaction (range 1-100) (default 10)</span><br><span class="line">-exact-rowcount</span><br><span class="line">  actually count table rows as opposed to estimate them (results in more accurate progress estimation)</span><br><span class="line">-execute</span><br><span class="line">  actually execute the alter &amp; migrate the table. Default is noop: do some tests and exit</span><br><span class="line">-exponential-backoff-max-interval int</span><br><span class="line">  Maximum number of seconds to wait between attempts when performing various operations with exponential backoff. (default 64)</span><br><span class="line">-force-named-cut-over</span><br><span class="line">  When true, the &apos;unpostpone|cut-over&apos; interactive command must name the migrated table</span><br><span class="line">-force-table-names string</span><br><span class="line">  table name prefix to be used on the temporary tables</span><br><span class="line">-heartbeat-interval-millis int</span><br><span class="line">  how frequently would gh-ost inject a heartbeat value (default 100)</span><br><span class="line">-help</span><br><span class="line">  Display usage</span><br><span class="line">-hooks-hint string</span><br><span class="line">  arbitrary message to be injected to hooks via GH_OST_HOOKS_HINT, for your convenience</span><br><span class="line">-hooks-path string</span><br><span class="line">  directory where hook files are found (default: empty, ie. hooks disabled). Hook files found on this path, and conforming to hook naming conventions will be executed</span><br><span class="line">-host string</span><br><span class="line">  MySQL hostname (preferably a replica, not the master) (default &quot;127.0.0.1&quot;)</span><br><span class="line">-initially-drop-ghost-table</span><br><span class="line">  Drop a possibly existing Ghost table (remains from a previous run?) before beginning operation. Default is to panic and abort if such table exists</span><br><span class="line">-initially-drop-old-table</span><br><span class="line">  Drop a possibly existing OLD table (remains from a previous run?) before beginning operation. Default is to panic and abort if such table exists</span><br><span class="line">-initially-drop-socket-file</span><br><span class="line">  Should gh-ost forcibly delete an existing socket file. Be careful: this might drop the socket file of a running migration!</span><br><span class="line">-master-password string</span><br><span class="line">  MySQL password on master, if different from that on replica. Requires --assume-master-host</span><br><span class="line">-master-user string</span><br><span class="line">  MySQL user on master, if different from that on replica. Requires --assume-master-host</span><br><span class="line">-max-lag-millis int</span><br><span class="line">  replication lag at which to throttle operation (default 1500)</span><br><span class="line">-max-load string</span><br><span class="line">  Comma delimited status-name=threshold. e.g: &apos;Threads_running=100,Threads_connected=500&apos;. When status exceeds threshold, app throttles writes</span><br><span class="line">-migrate-on-replica</span><br><span class="line">  Have the migration run on a replica, not on the master. This will do the full migration on the replica including cut-over (as opposed to --test-on-replica)</span><br><span class="line">-nice-ratio float</span><br><span class="line">  force being &apos;nice&apos;, imply sleep time per chunk time; range: [0.0..100.0]. Example values: 0 is aggressive. 1: for every 1ms spent copying rows, sleep additional 1ms (effectively doubling runtime); 0.7: for every 10ms spend in a rowcopy chunk, spend 7ms sleeping immediately after</span><br><span class="line">-ok-to-drop-table</span><br><span class="line">  Shall the tool drop the old table at end of operation. DROPping tables can be a long locking operation, which is why I&apos;m not doing it by default. I&apos;m an online tool, yes?</span><br><span class="line">-panic-flag-file string</span><br><span class="line">  when this file is created, gh-ost will immediately terminate, without cleanup</span><br><span class="line">-password string</span><br><span class="line">  MySQL password</span><br><span class="line">-port int</span><br><span class="line">  MySQL port (preferably a replica, not the master) (default 3306)</span><br><span class="line">-postpone-cut-over-flag-file string</span><br><span class="line">  while this file exists, migration will postpone the final stage of swapping tables, and will keep on syncing the ghost table. Cut-over/swapping would be ready to perform the moment the file is deleted.</span><br><span class="line">-quiet</span><br><span class="line">  quiet</span><br><span class="line">-replica-server-id uint</span><br><span class="line">  server id used by gh-ost process. Default: 99999 (default 99999)</span><br><span class="line">-replication-lag-query string</span><br><span class="line">  Deprecated. gh-ost uses an internal, subsecond resolution query</span><br><span class="line">-serve-socket-file string</span><br><span class="line">  Unix socket file to serve on. Default: auto-determined and advertised upon startup</span><br><span class="line">-serve-tcp-port int</span><br><span class="line">  TCP port to serve on. Default: disabled</span><br><span class="line">-skip-foreign-key-checks</span><br><span class="line">  set to &apos;true&apos; when you know for certain there are no foreign keys on your table, and wish to skip the time it takes for gh-ost to verify that</span><br><span class="line">-skip-renamed-columns ALTER</span><br><span class="line">  in case your ALTER statement renames columns, gh-ost will note that and offer its interpretation of the rename. By default gh-ost does not proceed to execute. This flag tells gh-ost to skip the renamed columns, i.e. to treat what gh-ost thinks are renamed columns as unrelated columns. NOTE: you may lose column data</span><br><span class="line">-stack</span><br><span class="line">  add stack trace upon error</span><br><span class="line">-switch-to-rbr</span><br><span class="line">  let this tool automatically switch binary log format to &apos;ROW&apos; on the replica, if needed. The format will NOT be switched back. I&apos;m too scared to do that, and wish to protect you if you happen to execute another migration while this one is running</span><br><span class="line">-table string</span><br><span class="line">  table name (mandatory)</span><br><span class="line">-test-on-replica</span><br><span class="line">  Have the migration run on a replica, not on the master. At the end of migration replication is stopped, and tables are swapped and immediately swap-revert. Replication remains stopped and you can compare the two tables for building trust</span><br><span class="line">-test-on-replica-skip-replica-stop</span><br><span class="line">  When --test-on-replica is enabled, do not issue commands stop replication (requires --test-on-replica)</span><br><span class="line">-throttle-additional-flag-file string</span><br><span class="line">  operation pauses when this file exists; hint: keep default, use for throttling multiple gh-ost operations (default &quot;/tmp/gh-ost.throttle&quot;)</span><br><span class="line">-throttle-control-replicas string</span><br><span class="line">  List of replicas on which to check for lag; comma delimited. Example: myhost1.com:3306,myhost2.com,myhost3.com:3307</span><br><span class="line">-throttle-flag-file string</span><br><span class="line">  operation pauses when this file exists; hint: use a file that is specific to the table being altered</span><br><span class="line">-throttle-http string</span><br><span class="line">  when given, gh-ost checks given URL via HEAD request; any response code other than 200 (OK) causes throttling; make sure it has low latency response</span><br><span class="line">-throttle-query string</span><br><span class="line">  when given, issued (every second) to check if operation should throttle. Expecting to return zero for no-throttle, &gt;0 for throttle. Query is issued on the migrated server. Make sure this query is lightweight</span><br><span class="line">-timestamp-old-table</span><br><span class="line">  Use a timestamp in old table name. This makes old table names unique and non conflicting cross migrations</span><br><span class="line">-tungsten</span><br><span class="line">  explicitly let gh-ost know that you are running on a tungsten-replication based topology (you are likely to also provide --assume-master-host)</span><br><span class="line">-user string</span><br><span class="line">  MySQL user</span><br><span class="line">-verbose</span><br><span class="line">  verbose</span><br><span class="line">-version</span><br><span class="line">  Print version &amp; exit</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/github/gh-ost" target="_blank" rel="noopener">gh-ost github</a></p></li><li><p><a href="https://www.cnblogs.com/zhoujinyi/p/9187421.html" target="_blank" rel="noopener">MySQL在线DDL gh-ost 使用说明</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据迁移 </tag>
            
            <tag> mysql大表修改 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ansible使用常见问题汇总.md</title>
      <link href="/blog/2018/09/17/ansible%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB-md/"/>
      <url>/blog/2018/09/17/ansible%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB-md/</url>
      <content type="html"><![CDATA[<h2 id="Cannot-have-both-the-docker-py-and-docker-python-modules-installed-together"><a href="#Cannot-have-both-the-docker-py-and-docker-python-modules-installed-together" class="headerlink" title="Cannot have both the docker-py and docker python modules installed together"></a>Cannot have both the docker-py and docker python modules installed together</h2><p>问题很明显,目标服务器pip即安装了docker-py又安装了docker,解决办法:两者都写在后,重新安装docker-py.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询版本</span><br><span class="line">$ pip show docker-py</span><br><span class="line">$ pip show docker</span><br><span class="line"># 卸载,同理pip、pip2、pip3</span><br><span class="line">$ pip uninstall docker</span><br><span class="line">$ pip uninstall docker-py</span><br><span class="line">$ pip uninstall docker-compose</span><br><span class="line"># 安装(--ignore-installed)</span><br><span class="line">$ pip install &apos;docker-compose&gt;=1.7.0&apos;</span><br><span class="line">$ pip install &apos;docker-py&gt;=1.7.0&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ansible Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus内存用量估算</title>
      <link href="/blog/2018/09/12/prometheus%E5%86%85%E5%AD%98%E7%94%A8%E9%87%8F%E4%BC%B0%E7%AE%97/"/>
      <url>/blog/2018/09/12/prometheus%E5%86%85%E5%AD%98%E7%94%A8%E9%87%8F%E4%BC%B0%E7%AE%97/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Jib使用</title>
      <link href="/blog/2018/09/10/Jib%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2018/09/10/Jib%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li>Jib 0.9.10</li><li>Jdk1.8</li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><ul><li><p>What</p><p>针对Java构建容器镜像.提供以maven插件和gradle插件的方式快速构建镜像.</p><p>特点:1、快速;2、不依赖docker命令,不需要写Dockerfile;3、同docker一样采用分层构建;</p><p>缺点:1、不能指定volume挂载;2、<del>一些java启动命令不能使用,如java -jar **.jar –spring.profiles.active=prod …</del></p></li></ul><h3 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h3><ul><li><p>Simple</p><p>原来构建步骤</p></li></ul><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fv4h4ia8r6j30gi031dg1.jpg" alt="img"></p><pre><code>现在构建步骤</code></pre><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fv4hab4u2vj30ey016web.jpg" alt="img"></p><pre><code>开发人员无需了解Dockerfile的细节,通过jib上传镜像.</code></pre><ul><li><p>Fast</p><p>为什么会快呢?学习了docker的层概念,增量构建.传统构建是将jar包打入镜像,而jib的策略的将依赖的class文件上传.</p></li><li><p>不依赖于docker</p><p>构建过程完成不依赖于本地是否有安装docker.</p></li><li><p>缺点</p><p>不能通过jib指定volume,只能提前将volume构建在镜像中.</p></li></ul><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">        &lt;!-- 依赖包 --&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.9.11&lt;/version&gt; </span><br><span class="line">            &lt;!-- 将jib:build的命令绑定到maven的生命周期中.</span><br><span class="line">                原来执行打包方式为mvn compile jib:build,现在只要执行mvn package --&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                &lt;goals&gt;</span><br><span class="line">                    &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">                &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;!-- 镜像拉取配置. --&gt;</span><br><span class="line">                &lt;from&gt;</span><br><span class="line">                &lt;!-- 镜像地址. --&gt;</span><br><span class="line">                    &lt;image&gt;&lt;/image&gt;</span><br><span class="line">                    &lt;!-- 用户名/密码安全加密,可以不配置.使用auth --&gt;</span><br><span class="line">                    &lt;credHelper&gt;none&lt;/credHelper&gt;</span><br><span class="line">                    &lt;auth&gt;</span><br><span class="line">                        &lt;username&gt;私仓用户名&lt;/username&gt;</span><br><span class="line">                        &lt;password&gt;私仓密码&lt;/password&gt;</span><br><span class="line">                    &lt;/auth&gt;</span><br><span class="line">                &lt;/from&gt;</span><br><span class="line">                &lt;!-- 镜像上传配置. --&gt;</span><br><span class="line">                &lt;to&gt;</span><br><span class="line">                    &lt;!-- 镜像地址. --&gt;</span><br><span class="line">                    &lt;image&gt;&lt;/image&gt;</span><br><span class="line">                    &lt;credHelper&gt;none&lt;/credHelper&gt;</span><br><span class="line">                    &lt;auth&gt;</span><br><span class="line">                        &lt;username&gt;私仓用户名&lt;/username&gt;</span><br><span class="line">                        &lt;password&gt;私仓密码&lt;/password&gt;</span><br><span class="line">                    &lt;/auth&gt;</span><br><span class="line">                &lt;/to&gt;</span><br><span class="line">                &lt;!-- 默认值为false,用于gradle的缓存设置. --&gt;</span><br><span class="line">                &lt;useOnlyProjectCache&gt;false&lt;/useOnlyProjectCache&gt;</span><br><span class="line">                &lt;!-- 默认值为false,是否开启HTTPS的认证.(推荐为false) --&gt;</span><br><span class="line">                &lt;allowInsecureRegistries&gt;false&lt;/allowInsecureRegistries&gt;</span><br><span class="line">                &lt;!-- Copies files from &apos;src/main/custom-extra-dir&apos; instead of &apos;src/main/jib&apos; </span><br><span class="line">                用于将其他文件添加到镜像中.--&gt;</span><br><span class="line">                &lt;extraDirectory&gt;$&#123;project.basedir&#125;/src/main/custom-extra-dir&lt;/extraDirectory&gt;</span><br><span class="line">                &lt;container&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.bsd.proxy.monitor.MonitorApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;!-- JVM相关参数. --&gt;</span><br><span class="line">                    &lt;jvmFlags&gt;</span><br><span class="line">                        &lt;jvmFlag&gt;-Xms512m&lt;/jvmFlag&gt;</span><br><span class="line">                        &lt;jvmFlag&gt;-Xmx512m&lt;/jvmFlag&gt;</span><br><span class="line">                    &lt;/jvmFlags&gt;</span><br><span class="line">                    &lt;!-- 暴露端口.同docker一样.也可以配置端口范围. --&gt;</span><br><span class="line">                    &lt;ports&gt;</span><br><span class="line">                        &lt;port&gt;9999&lt;/port&gt;</span><br><span class="line">                        &lt;port&gt;2000-2003/udp&lt;/port&gt;</span><br><span class="line">                    &lt;/ports&gt;</span><br><span class="line">                    &lt;!-- 生成的Dockerfile中CMD的参数. --&gt;</span><br><span class="line">                    &lt;args&gt;</span><br><span class="line">                        &lt;arg&gt;some&lt;/arg&gt;</span><br><span class="line">                        &lt;arg&gt;args&lt;/arg&gt;</span><br><span class="line">                    &lt;/args&gt;</span><br><span class="line">                    &lt;!-- 同docker的labels. --&gt;</span><br><span class="line">                    &lt;labels&gt;</span><br><span class="line">                        &lt;key1&gt;value1&lt;/key1&gt;</span><br><span class="line">                    &lt;/labels&gt;</span><br><span class="line">                    &lt;!-- 构建容器镜像类型.还支持OCI --&gt;</span><br><span class="line">                    &lt;format&gt;docker&lt;/format&gt;</span><br><span class="line">                    &lt;!-- 默认值为false,指在打包镜像是是否带时间戳.--&gt;</span><br><span class="line">                    &lt;useCurrentTimestamp&gt;&lt;/useCurrentTimestamp&gt;</span><br><span class="line">                    &lt;!-- (不建议使用)容器启动命令,同docker中的ENTRYPOINT,如果指定了则jvmFlags和mainClass失效.--&gt;</span><br><span class="line">                    &lt;entrypoint&gt;&lt;/entrypoint&gt;</span><br><span class="line">                &lt;/container&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="打包应用镜像并上传"><a href="#打包应用镜像并上传" class="headerlink" title="打包应用镜像并上传"></a>打包应用镜像并上传</h4><h5 id="不依赖本地docker"><a href="#不依赖本地docker" class="headerlink" title="不依赖本地docker"></a>不依赖本地docker</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mvn compile com.google.cloud.tools:jib-maven-plugin:0.9.11:build -Dimage=&lt;MY IMAGE&gt;</span><br><span class="line"># 或者</span><br><span class="line">$ mvn compile jib:build</span><br><span class="line"># 指定上传镜像超时时间(毫秒).默认是20000毫秒.或者设置0为没有超时时间.</span><br><span class="line">$ mvn compile jib:build -Djib.httpTimeout=3000</span><br></pre></td></tr></table></figure><h5 id="依赖本地docker"><a href="#依赖本地docker" class="headerlink" title="依赖本地docker"></a>依赖本地docker</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mvn compile com.google.cloud.tools:jib-maven-plugin:0.9.10:dockerBuild</span><br><span class="line"># 或者</span><br><span class="line">$ mvn compile jib:dockerBuild</span><br></pre></td></tr></table></figure><h4 id="镜像打成tar包"><a href="#镜像打成tar包" class="headerlink" title="镜像打成tar包"></a>镜像打成tar包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 会在项目路径的target目录下生成jib-image.tar.</span><br><span class="line">$ mvn compile jib:buildTar</span><br><span class="line"># 通过docker导入镜像.</span><br><span class="line">$ docker load --input target/jib-image.tar</span><br></pre></td></tr></table></figure><h4 id="导出镜像的Dockerfile"><a href="#导出镜像的Dockerfile" class="headerlink" title="导出镜像的Dockerfile"></a>导出镜像的Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 默认生成在target/jib-docker-context下.-DjibTargetDir用于指定生成路径.</span><br><span class="line">$ mvn compile jib:exportDockerContext -DjibTargetDir=my/docker/context/</span><br><span class="line"># 下面是我pom中的配置,并生成的一个Dockerfile</span><br><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/jiuming/java-alpine-openjdk8-jre-shanghai</span><br><span class="line">  </span><br><span class="line">COPY libs /app/libs/</span><br><span class="line">COPY resources /app/resources/</span><br><span class="line">COPY classes /app/classes/</span><br><span class="line"></span><br><span class="line">EXPOSE 9999</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Xms512m, -Xmx512m&quot;, -cp&quot;,&quot;/app/resources/:/app/classes/:/app/libs/*&quot;,&quot;com.bsd.proxy.monitor.MonitorApplication&quot;]</span><br><span class="line">CMD []</span><br></pre></td></tr></table></figure><h3 id="配置私仓身份认证"><a href="#配置私仓身份认证" class="headerlink" title="配置私仓身份认证"></a>配置私仓身份认证</h3><p>如果没有使用credHelper,</p><h4 id="通过Docker-Credential-Helps"><a href="#通过Docker-Credential-Helps" class="headerlink" title="通过Docker Credential Helps"></a>通过Docker Credential Helps</h4><p>待补充,<a href="https://github.com/docker/docker-credential-helpers" target="_blank" rel="noopener">Docker Credential Helps</a></p><h4 id="通过Maven配置"><a href="#通过Maven配置" class="headerlink" title="通过Maven配置"></a>通过Maven配置</h4><p>配置Setting.xml文件</p><ul><li>maven加密方式参见<a href="https://maven.apache.org/guides/mini/guide-encryption.html" target="_blank" rel="noopener">Password Encryption</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;servers&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;!-- id为仓库名称 --&gt;</span><br><span class="line">      &lt;id&gt;MY_REGISTRY&lt;/id&gt;</span><br><span class="line">      &lt;username&gt;MY_USERNAME&lt;/username&gt;</span><br><span class="line">      &lt;!-- maven encryption --&gt;</span><br><span class="line">      &lt;password&gt;&#123;MY_SECRET&#125;&lt;/password&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">  &lt;/servers&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><ul><li><p>目标描述</p><p>使用spring boot构建一个java应用程序镜像,并指定profile运行.</p></li></ul><p>为了能够指定profile运行,main启动代码要改动.</p><p>平常启动应用的命令是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Xms512m -Xmx512m **.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><p>Jib打成的镜像,ENTRYPOINT实际的启动命令是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms512m -Xmx512m -cp app/libs/*:app/resources:app/classes package.MonitorApplication</span><br></pre></td></tr></table></figure><p>为了能够指定profile运行,需要在docker启动添加参数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class MonitorApplication &#123;</span><br><span class="line"></span><br><span class="line">    private final static String ACTIVE = &quot;prod&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplicationBuilder builder = new SpringApplicationBuilder(MonitorApplication.class);</span><br><span class="line">        if (Arrays.stream(args).anyMatch(t -&gt; t.equals(ACTIVE))) &#123;</span><br><span class="line">            builder.profiles(ACTIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">         </span><br><span class="line">    ......</span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;0.9.10&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;from&gt;</span><br><span class="line">                        &lt;image&gt;指定拉取镜像的私仓地址&lt;/image&gt;</span><br><span class="line">                        &lt;auth&gt;</span><br><span class="line">                            &lt;username&gt;私仓用户名&lt;/username&gt;</span><br><span class="line">                            &lt;password&gt;私仓密码&lt;/password&gt;</span><br><span class="line">                        &lt;/auth&gt;</span><br><span class="line">                    &lt;/from&gt;</span><br><span class="line">                    &lt;to&gt;</span><br><span class="line">                        &lt;image&gt;指定推送镜像的私仓地址&lt;/image&gt;</span><br><span class="line">                        &lt;auth&gt;</span><br><span class="line">                            &lt;username&gt;指定推送镜像的私仓地址&lt;/username&gt;</span><br><span class="line">                            &lt;password&gt;私仓密码&lt;/password&gt;</span><br><span class="line">                        &lt;/auth&gt;</span><br><span class="line">                    &lt;/to&gt;</span><br><span class="line">                    &lt;container&gt;</span><br><span class="line">                    &lt;!-- 指定MonitorApplication的全路径. --&gt;</span><br><span class="line">                        &lt;mainClass&gt;mypackage.MonitorApplication&lt;/mainClass&gt;</span><br><span class="line">                        &lt;jvmFlags&gt;</span><br><span class="line">                            &lt;jvmFlag&gt;-Xms512m&lt;/jvmFlag&gt;</span><br><span class="line">                            &lt;jvmFlag&gt;-Xmx512m&lt;/jvmFlag&gt;</span><br><span class="line">                        &lt;/jvmFlags&gt;</span><br><span class="line">                        &lt;ports&gt;</span><br><span class="line">                            &lt;port&gt;9999&lt;/port&gt;</span><br><span class="line">                        &lt;/ports&gt;</span><br><span class="line">                        &lt;!-- 这里用于配置默认执行的profile,可以不用配置,在docker启动命令中配置 --&gt;</span><br><span class="line">                        &lt;!--args&gt;</span><br><span class="line">                            &lt;arg&gt;prod&lt;/arg&gt;</span><br><span class="line">                        &lt;/args--&gt;</span><br><span class="line">                    &lt;/container&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;profile&gt;</span><br></pre></td></tr></table></figure><h3 id="构建并上传images"><a href="#构建并上传images" class="headerlink" title="构建并上传images"></a>构建并上传images</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull [镜像名称]</span><br><span class="line">$ docker run -ti --network host --name [容器名称] -v /store/logs:/store/logs -p 9999:9999 -d [镜像名称] [指定profile]</span><br></pre></td></tr></table></figure><h3 id="结合Ansible-Scripts"><a href="#结合Ansible-Scripts" class="headerlink" title="结合Ansible Scripts"></a>结合Ansible Scripts</h3><h4 id="配置ansible脚本"><a href="#配置ansible脚本" class="headerlink" title="配置ansible脚本"></a>配置ansible脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /opt/ansible-biz/roles/monitor/tasks</span><br><span class="line">$ cd /opt/ansible-biz</span><br><span class="line">$ vim site.yml</span><br><span class="line">- name: deploy proxy</span><br><span class="line">  hosts: all</span><br><span class="line">  gather_facts: false</span><br><span class="line">  roles:</span><br><span class="line">    - &#123;role: monitor, tags: &quot;monitor&quot;&#125;</span><br><span class="line">$ vim hosts</span><br><span class="line">[product]</span><br><span class="line">xxyp-dev ansible_host=192.168.1.222 ansible_port=22</span><br><span class="line">$ vim /opt/ansible-biz/roles/monitor/tasks/main.yml</span><br><span class="line">- pip:</span><br><span class="line">    name: docker-py</span><br><span class="line">    state: present</span><br><span class="line">- name: Pull monitor image</span><br><span class="line">  docker_image:</span><br><span class="line">    name: registry.cn-hangzhou.aliyuncs.com/yuanshi/monitor</span><br><span class="line">    tag: v1.0.0</span><br><span class="line">    force: yes</span><br><span class="line">- name: Restart monitor container</span><br><span class="line">  docker_container:</span><br><span class="line">    name: operation</span><br><span class="line">    image: registry.cn-hangzhou.aliyuncs.com/yuanshi/monitor:v1.0.0</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /store/logs:/store/logs</span><br><span class="line">    exposed_ports:</span><br><span class="line">      - 9082</span><br><span class="line">    recreate: yes</span><br><span class="line">    command: &quot;&#123;&#123; profile &#125;&#125;&quot;</span><br><span class="line">#    env:</span><br><span class="line">#      zooCluster=&quot;&#123;&#123; zooCluster &#125;&#125;&quot;</span><br><span class="line">    restart_policy: always</span><br><span class="line">    state: started</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>$ ansible-playbook -i hosts -e profile=prod sity.yml</code></p><h2 id="Expend-Study"><a href="#Expend-Study" class="headerlink" title="Expend Study"></a>Expend Study</h2><p>使用alpine镜像或distroless镜像作为基础构建镜像.</p><h2 id="Reference-Resources"><a href="#Reference-Resources" class="headerlink" title="Reference Resources"></a>Reference Resources</h2><ul><li><a href="[GoogleContainerTools](https://github.com/GoogleContainerTools">Github Jib</a>/jib)</li><li><a href="https://www.youtube.com/watch?v=H6gR_Cv4yWI" target="_blank" rel="noopener">Jib介绍视屏</a></li><li><a href="https://cloudplatform.googleblog.com/2018/07/introducing-jib-build-java-docker-images-better.html" target="_blank" rel="noopener">Jib Blog</a></li><li><a href="https://speakerdeck.com/coollog/build-containers-faster-with-jib-a-google-image-build-tool-for-java-applications" target="_blank" rel="noopener">Jib PPT</a></li></ul>]]></content>
      
      <categories>
          
          <category> Spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java应用容器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zookeeper学习视图</title>
      <link href="/blog/2018/09/05/zookeeper/"/>
      <url>/blog/2018/09/05/zookeeper/</url>
      <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuz15j25jpj30os0ergmp.jpg" alt="Zookeeper技术视图"></p><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>上面这个视图,就是我对zookeeper需要学习知识的总结.我也将按照这个方式记录自己学习的内容.</p><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">官网</a></li><li>书籍:《从Paxos到ZooKeeper》</li></ul><h2 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h2><h3 id="常规部署"><a href="#常规部署" class="headerlink" title="常规部署"></a>常规部署</h3><h3 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h3><h3 id="ansible-playbook部署"><a href="#ansible-playbook部署" class="headerlink" title="ansible-playbook部署"></a>ansible-playbook部署</h3><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="ZKClient"><a href="#ZKClient" class="headerlink" title="ZKClient"></a>ZKClient</h3><h3 id="Curator"><a href="#Curator" class="headerlink" title="Curator"></a>Curator</h3><h2 id="ZAB"><a href="#ZAB" class="headerlink" title="ZAB"></a>ZAB</h2><h2 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h2><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2>]]></content>
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper学习试图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker实战之zookeeper集群</title>
      <link href="/blog/2018/08/29/docker%E5%AE%9E%E6%88%98%E4%B9%8Bzookeeper%E9%9B%86%E7%BE%A4/"/>
      <url>/blog/2018/08/29/docker%E5%AE%9E%E6%88%98%E4%B9%8Bzookeeper%E9%9B%86%E7%BE%A4/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>centos7</li><li>zookeeper 3.4.12</li><li>docker 18.03.1-ce</li></ul><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>基于docker创建zookeeper集群.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>开始之前,先梳理下几个关键问题:</p><ul><li>zookeeper的配置文件、日志、数据文件需要映射到宿主机中</li><li>docker hub中提供的镜像,其在容器中zookeeper的路径(需查阅<a href="https://github.com/31z4/zookeeper-docker/blob/0e558d7a6df4031a6be7c1df4ba1e2367666d004/3.4.12/Dockerfile" target="_blank" rel="noopener">dockerfile文件</a>)</li></ul><h3 id="Pull-Image"><a href="#Pull-Image" class="headerlink" title="Pull Image"></a>Pull Image</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull zookeeper:3.4.12</span><br></pre></td></tr></table></figure><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="create-persistent-directory"><a href="#create-persistent-directory" class="headerlink" title="create persistent directory"></a>create persistent directory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据持久目录、日志目录、启动配置文件目录</span><br><span class="line">$ mkdir -p &#123;/opt/zookeeper/conf,/data/zookeeper,/data/logs/zookeeper&#125;</span><br></pre></td></tr></table></figure><h4 id="create-zoo-cfg、myid"><a href="#create-zoo-cfg、myid" class="headerlink" title="create zoo.cfg、myid"></a>create zoo.cfg、myid</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这里看需要多少节点的集群,配置文件有适当调整,这里以三台为例.</span><br><span class="line">$ vim /opt/zookeeper/conf/zoo.cfg</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/data</span><br><span class="line">dataLogDir=/datalog</span><br><span class="line">clientPort=20181</span><br><span class="line">server.1=58.221.62.131:2888:3888</span><br><span class="line">server.2=58.221.61.57:2888:3888    </span><br><span class="line">server.3=58.221.61.62:2888:3888</span><br><span class="line"># 对应机器,都需要myid文件里的值不能重复.</span><br><span class="line">$ echo 1 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 每台机器分别启动,注意替换--name的值</span><br><span class="line">$ docker run -ti --restart always -d \</span><br><span class="line">-v /opt/zookeeper/conf/zoo.cfg:/conf/zoo.cfg \</span><br><span class="line">-v /data/zookeeper:/data \</span><br><span class="line">-v /data/logs/zookeeper:/datalog \</span><br><span class="line">--network host \</span><br><span class="line">--name zoo1 \</span><br><span class="line">zookeeper:3.4.12</span><br><span class="line"># 如果使用--network host参数,则不需要映射端口</span><br><span class="line">-p 20181:20181 \</span><br><span class="line">-p 2888:2888 \</span><br><span class="line">-p 3888:3888 \</span><br><span class="line"># 查询容器日志,需要全部启动才不会报错.</span><br><span class="line">$ docker logs -t zoo1</span><br><span class="line"># 查看集群,stat</span><br><span class="line">$ telnet 58.221.62.131 20181</span><br><span class="line">Trying 58.221.61.57...</span><br><span class="line">Connected to 58.221.61.57.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">stat # 输入</span><br><span class="line">Zookeeper version: 3.4.12-e5259e437540f349646870ea94dc2658c4e44b3b, built on 03/27/2018 03:55 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /58.221.62.131:52061[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/2/17</span><br><span class="line">Received: 16</span><br><span class="line">Sent: 15</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x100000bb0</span><br><span class="line">Mode: follower</span><br><span class="line">Node count: 1009</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line"></span><br><span class="line"># 以下只做记录,不会出现这种问题.可用于其他docker容器启动报错排查参考.</span><br><span class="line">mkdir: can&apos;t create directory &apos;/opt/&apos;: Permission denied</span><br><span class="line"># 查看容器使用用户</span><br><span class="line">$ docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; zookeeper:3.4.12 -c &quot;whoami &amp;&amp; id&quot;</span><br><span class="line"># 查询容器中zookeeper目录权限</span><br><span class="line">$ docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; zookeeper:3.4.12 -c &quot;ls -la&quot;</span><br><span class="line">......</span><br><span class="line">drwxr-xr-x 2 zookeepe zookeepe 4096 Jun 12 01:28 bin</span><br><span class="line">-rw-rw-r-- 1 zookeepe zookeepe 87945 Mar 27 04:32 build.xml</span><br><span class="line">drwxr-xr-x 2 zookeepe zookeepe 6 Jun 12 01:28 conf</span><br><span class="line">....</span><br><span class="line"># 查询容器启动用户id</span><br><span class="line">$ docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; zookeeper:3.4.12 -c &quot;cat /etc/passwd | grep zookeeper&quot;</span><br><span class="line">zookeeper:x:1000:1000:Linux User,,,:/home/zookeeper:</span><br><span class="line"># 修改目录权限所属用户</span><br><span class="line">$ chown -R 1000:1000 /opt/zookeeper</span><br></pre></td></tr></table></figure><h3 id="Don’t-Forget"><a href="#Don’t-Forget" class="headerlink" title="Don’t Forget"></a>Don’t Forget</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 防火墙添加端口</span><br><span class="line">## zookeeper访问端口,和配置文件中的clientPort一致</span><br><span class="line">$ firewall-cmd --add-port=20181/tcp --permanent</span><br><span class="line">$ firewall-cmd --add-port=2888/tcp --permanent</span><br><span class="line">$ firewall-cmd --add-port=3888/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Use-Ansible-playbook"><a href="#Use-Ansible-playbook" class="headerlink" title="Use Ansible-playbook"></a>Use Ansible-playbook</h2><p>待完成</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="docker-zookeeper"><a href="#docker-zookeeper" class="headerlink" title="docker zookeeper"></a><a href="https://hub.docker.com/_/zookeeper/" target="_blank" rel="noopener">docker zookeeper</a></h3><h3 id="Docker部署Zookeeper集群"><a href="#Docker部署Zookeeper集群" class="headerlink" title="Docker部署Zookeeper集群"></a><a href="https://www.waitig.com/docker%E9%83%A8%E7%BD%B2zookeeper%E9%9B%86%E7%BE%A4.html" target="_blank" rel="noopener">Docker部署Zookeeper集群</a></h3>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper集群安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring boot之Actuator理解</title>
      <link href="/blog/2018/08/27/Spring-boot%E4%B9%8BActuator%E7%90%86%E8%A7%A3/"/>
      <url>/blog/2018/08/27/Spring-boot%E4%B9%8BActuator%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li>Spring boot 2.0.4</li><li>Jdk1.8</li></ul><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>今天生产上的日志文件把磁盘撑爆了,非常悲剧.既然出了问题,就得找到原因以及解决方案.(一劳永逸)</p><p>通过梳理,识别出以下几个问题:</p><ul><li>代码中的日志没有行至有效的规范.debug和info没有明确的规范.</li><li>有些debug日志有助于生产上排查错误,需要动态切换日志级别的能力.</li></ul><p>针对日志规范问题,每个人的见解不一样,我自己的梳理在《Java日志规范看法》中.</p><p>根据第二个问题,发现spring boot actuator提供了这个能力,这就促使我去研究一番.</p><h2 id="Spring-Boot-Actuator"><a href="#Spring-Boot-Actuator" class="headerlink" title="Spring Boot Actuator"></a>Spring Boot Actuator</h2><p>○ Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application.</p><p>☆ Spring boot 提供了以HTTP或JMX管理和监控应用程序.适用于应用程序的审计、健康情况、度量收集.</p><h3 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h3><p>maven项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="提供的端点"><a href="#提供的端点" class="headerlink" title="提供的端点"></a>提供的端点</h3><ul><li>详细用法参考<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/actuator-api//html/#overview" target="_blank" rel="noopener">Usage</a>.</li></ul><p>下表提供了16个请求端点,HTTP和JMX都可以使用.另外4个端点在使用web时可以用.</p><ul><li>请求前缀为/actuators</li></ul><p>例如:以http方式,监测应用程序健康情况:/actuators/health</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:[port]/actuator/health</span><br><span class="line">&#123;&quot;status&quot;:&quot;UP&quot;&#125;</span><br></pre></td></tr></table></figure><p>列表:</p><table><thead><tr><th>ID</th><th>Description</th><th>Enabled by default</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>Exposes audit events information for the current application.</td><td>Yes</td></tr><tr><td><code>beans</code></td><td>Displays a complete list of all the Spring beans in your application.</td><td>Yes</td></tr><tr><td><code>conditions</code></td><td>Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.</td><td>Yes</td></tr><tr><td><code>configprops</code></td><td>Displays a collated list of all <code>@ConfigurationProperties</code>.</td><td>Yes</td></tr><tr><td><code>env</code></td><td>Exposes properties from Spring’s <code>ConfigurableEnvironment</code>.</td><td>Yes</td></tr><tr><td><code>flyway</code></td><td>Shows any Flyway database migrations that have been applied.</td><td>Yes</td></tr><tr><td><code>health</code></td><td>Shows application health information.</td><td>Yes</td></tr><tr><td><code>httptrace</code></td><td>Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges).</td><td>Yes</td></tr><tr><td><code>info</code></td><td>Displays arbitrary application info.</td><td>Yes</td></tr><tr><td><code>loggers</code></td><td>Shows and modifies the configuration of loggers in the application.</td><td>Yes</td></tr><tr><td><code>liquibase</code></td><td>Shows any Liquibase database migrations that have been applied.</td><td>Yes</td></tr><tr><td><code>metrics</code></td><td>Shows ‘metrics’ information for the current application.</td><td>Yes</td></tr><tr><td><code>mappings</code></td><td>Displays a collated list of all <code>@RequestMapping</code> paths.</td><td>Yes</td></tr><tr><td><code>scheduledtasks</code></td><td>Displays the scheduled tasks in your application.</td><td>Yes</td></tr><tr><td><code>sessions</code></td><td>Allows retrieval and deletion of user sessions from a Spring Session-backed session store. Not available when using Spring Session’s support for reactive web applications.</td><td>Yes</td></tr><tr><td><code>shutdown</code></td><td>Lets the application be gracefully shutdown.</td><td>No</td></tr><tr><td><code>threaddump</code></td><td>Performs a thread dump.</td><td>Yes</td></tr></tbody></table><p>○ If your application is a web application (Spring MVC, Spring WebFlux, or Jersey),you can use the following additional endpoints.</p><table><thead><tr><th>ID</th><th>Description</th><th>Enabled by default</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>Returns a GZip compressed <code>hprof</code> heap dump file.</td><td>Yes</td></tr><tr><td><code>jolokia</code></td><td>Exposes JMX beans over HTTP (when Jolokia is on the classpath, not available for WebFlux).</td><td>Yes</td></tr><tr><td><code>logfile</code></td><td>Returns the contents of the logfile (if <code>logging.file</code> or <code>logging.path</code> properties have been set). Supports the use of the HTTP <code>Range</code> header to retrieve part of the log file’s content.</td><td>Yes</td></tr><tr><td><code>prometheus</code></td><td>Exposes metrics in a format that can be scraped by a Prometheus server.</td><td>Yes</td></tr></tbody></table><h4 id="开启端点"><a href="#开启端点" class="headerlink" title="开启端点"></a>开启端点</h4><ul><li>actuator中提供的20个端点,默认级别开关级别如下:</li></ul><table><thead><tr><th>ID</th><th>JMX</th><th>Web</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>Yes</td><td>No</td></tr><tr><td><code>beans</code></td><td>Yes</td><td>No</td></tr><tr><td><code>conditions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>configprops</code></td><td>Yes</td><td>No</td></tr><tr><td><code>env</code></td><td>Yes</td><td>No</td></tr><tr><td><code>flyway</code></td><td>Yes</td><td>No</td></tr><tr><td><code>health</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>heapdump</code></td><td>N/A</td><td>No</td></tr><tr><td><code>httptrace</code></td><td>Yes</td><td>No</td></tr><tr><td><code>info</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>jolokia</code></td><td>N/A</td><td>No</td></tr><tr><td><code>logfile</code></td><td>N/A</td><td>No</td></tr><tr><td><code>loggers</code></td><td>Yes</td><td>No</td></tr><tr><td><code>liquibase</code></td><td>Yes</td><td>No</td></tr><tr><td><code>metrics</code></td><td>Yes</td><td>No</td></tr><tr><td><code>mappings</code></td><td>Yes</td><td>No</td></tr><tr><td><code>prometheus</code></td><td>N/A</td><td>No</td></tr><tr><td><code>scheduledtasks</code></td><td>Yes</td><td>No</td></tr><tr><td><code>sessions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>shutdown</code></td><td>Yes</td><td>No</td></tr><tr><td><code>threaddump</code></td><td>Yes</td><td>No</td></tr></tbody></table><ul><li><p>JMX</p><p>除prometheus、logfile、jolokia、heapdump没有提供外,其余端点默认开启.</p></li><li><p>Web</p><p>默认只开启health、info端点.</p></li></ul><p>正确打开姿势:</p><ul><li><p>JMX</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 打开 management.endpoints.jmx.exposure.include</span><br><span class="line"># 关闭 management.endpoints.jmx.exposure.exclude</span><br><span class="line"># 如关闭mappings、shutdown端点.</span><br><span class="line">management.endpoints.jmx.exposure.exclude=mappings,shutdown</span><br><span class="line"># 如关闭所有端点.</span><br><span class="line">management.endpoints.jmx.exposure.exclude=*</span><br><span class="line"># YAML中*有特殊含义,需要用&quot;*&quot;</span><br></pre></td></tr></table></figure></li><li><p>Web</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 打开 management.endpoints.web.exposure.include</span><br><span class="line"># 关闭 management.endpoints.web.exposure.exclude</span><br><span class="line"># 如打开env、mappings端点</span><br><span class="line">management.endpoints.web.exposure.include=env,mappings</span><br><span class="line"># 如打开所有端点</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"># YAML中*有特殊含义,需要用&quot;*&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="端点详细用法"><a href="#端点详细用法" class="headerlink" title="端点详细用法"></a>端点详细用法</h4><p>请求前缀为/actuators.具体用法参考文档<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/actuator-api//html/#overview" target="_blank" rel="noopener">Usage</a>.</p><h4 id="配置端点缓存"><a href="#配置端点缓存" class="headerlink" title="配置端点缓存"></a>配置端点缓存</h4><p>○ Endpoints automatically cache responses to read operations that do not take any parameters. </p><p>☆ 官方说是默认缓存读取操作的无参端点返回值.至于具体时间只能看源码了.</p><p>对应的源码类为:EndpointAutoConfiguration、EndpointIdTimeToLivePropertyFunction</p><p>正确配置姿势如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># The prefix management.endpoint.&lt;name&gt; is used to uniquely identify the endpoint that is being configured.</span><br><span class="line"># 如配置bean端点返回值缓存时间为10秒</span><br><span class="line">management.endpoint.beans.cache.time-to-live=10s</span><br></pre></td></tr></table></figure><h4 id="自定义端点路径"><a href="#自定义端点路径" class="headerlink" title="自定义端点路径"></a>自定义端点路径</h4><ul><li><p>base-path</p><p>默认值是:/actuator</p></li><li><p>path-mapping</p><p>端点映射路径,默认是官方提供的20个端点名称.</p></li></ul><p>完整请求路径为:[base-path]+[path-mapping]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 原health端点为:/actuator/health,现在改为:/manager/healthcheck</span><br><span class="line">management.endpoints.web.base-path=/manager</span><br><span class="line">management.endpoints.web.path-mapping.health=healthcheck</span><br></pre></td></tr></table></figure><h4 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h4><p>○ If you add a <code>@Bean</code> annotated with <code>@Endpoint</code>, any methods annotated with <code>@ReadOperation</code>, <code>@WriteOperation</code>, or <code>@DeleteOperation</code> are automatically exposed over JMX and, in a web application, over HTTP as well. Endpoints can be exposed over HTTP using Jersey, Spring MVC, or Spring WebFlux.</p><p>○ You can also write technology-specific endpoints by using <code>@JmxEndpoint</code> or <code>@WebEndpoint</code>. These endpoints are restricted to their respective technologies. For example, <code>@WebEndpoint</code> is exposed only over HTTP and not over JMX.</p><p>○ You can write technology-specific extensions by using <code>@EndpointWebExtension</code> and <code>@EndpointJmxExtension</code>. These annotations let you provide technology-specific operations to augment an existing endpoint.</p><p>○ Finally, if you need access to web-framework-specific functionality, you can implement Servlet or Spring <code>@Controller</code> and <code>@RestController</code> endpoints at the cost of them not being available over JMX or when using a different web framework.</p><p>☆ actuator可以提供JMX和HTTP两种方式,所以也提供对应实现的方式.</p><ul><li><code>@Endpoint</code>针对JMX和HTTP.</li><li><code>@JmxEndpoint</code>或<code>@EndpointJmxExtension</code>只针对JMX.</li><li><code>@WebEndpoint</code>或<code>@EndpointWebExtension</code>只针对HTTP.</li><li><code>@ReadOperation</code>, <code>@WriteOperation</code>, <code>@DeleteOperation</code> 这三个用于指定请求方式.</li></ul><table><thead><tr><th>Operation</th><th>HTTP method</th></tr></thead><tbody><tr><td><code>@ReadOperation</code></td><td><code>GET</code></td></tr><tr><td><code>@WriteOperation</code></td><td><code>POST</code></td></tr><tr><td><code>@DeleteOperation</code></td><td><code>DELETE</code></td></tr></tbody></table><h5 id="☆-使用actuator的自定义端点有特别的意义吗"><a href="#☆-使用actuator的自定义端点有特别的意义吗" class="headerlink" title="☆ 使用actuator的自定义端点有特别的意义吗?"></a>☆ 使用actuator的自定义端点有特别的意义吗?</h5><p>目前看,针对HTTP的方式,与平常我自己暴露端点也没区别.但针对JMX监控的话,这就是它优势之处了.</p><p>另外,个人认为没有特殊要求,使用<code>@Endpoint</code>更好,既提供了JMX监控端点,也同时提供了HTTP监控端点.</p><h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><p>○ To allow the input to be mapped to the operation method’s parameters, Java code implementing an endpoint should be compiled with <code>-parameters</code>, and Kotlin code implementing an endpoint should be compiled with <code>-java-parameters</code>. This will happen automatically if you are using Spring Boot’s Gradle plugin or if you are using Maven and <code>spring-boot-starter-parent</code>.</p><p>☆ 在使用<code>@ReadOperation</code>等时,默认是按照参数名匹配入参,如果需要参数数量自动匹配,需要在spring boot时添加<code>-parameters</code>.</p><h6 id="新增端点"><a href="#新增端点" class="headerlink" title="新增端点"></a>新增端点</h6><ul><li>使用<code>@Endpoint</code>、<code>@ReadOperation</code>, <code>@WriteOperation</code>, <code>@DeleteOperation</code> </li></ul><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Endpoint(id = &quot;custom-health&quot;)</span><br><span class="line">public class CustomHealthEndpoint &#123;</span><br><span class="line"></span><br><span class="line">    @ReadOperation</span><br><span class="line">    public String health() &#123;</span><br><span class="line">        return &quot;health&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ReadOperation</span><br><span class="line">    public String health2(@Selector String name) &#123;</span><br><span class="line">        return &quot;custom-end-point get parameter: &quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ReadOperation</span><br><span class="line">    public String health3(@Selector String name, @Selector String name2) &#123;</span><br><span class="line">        return &quot;custom-end-point get parameter1: &quot; + name +&quot;,parameter2: &quot; + name2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @WriteOperation</span><br><span class="line">    public String writeOperation(@Selector String name) &#123;</span><br><span class="line">        return &quot;custom-end-point post&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @DeleteOperation</span><br><span class="line">    public String deleteOperation(@Selector String name) &#123;</span><br><span class="line">        return &quot;custom-end-point delete&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动时,使用-parameters参数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 调用health2方法 http://localhost:[port]/actuator/custom-health/&#123;anystring&#125;</span><br><span class="line">$ curl http://localhost:[port]/actuator/custom-health/hello</span><br><span class="line">custom-end-point get parameter: hello</span><br><span class="line"></span><br><span class="line"># 调用health3方法,参数名必须相同,&#123;angstring&#125;用任意字符串替换就行.http://localhost:[port]/actuator/custom-health/&#123;anystring&#125;/&#123;anystring&#125;</span><br><span class="line">$ curl http://localhost:[port]/actuator/custom-health/hello/world</span><br><span class="line">custom-end-point get parameter1: hello,parameter2: world</span><br></pre></td></tr></table></figure><p>启动时,不使用-parameters参数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 调用health无参方法</span><br><span class="line">$ curl http://localhost:[port]/actuator/custom-health</span><br><span class="line">health</span><br><span class="line"></span><br><span class="line"># 调用health2方法</span><br><span class="line">$ curl http://localhost:[port]/actuator/custom-health/name</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2018-08-27T11:04:06.709+0000&quot;,&quot;status&quot;:400,&quot;error&quot;:&quot;Bad Request&quot;,&quot;message&quot;:&quot;Missing parameters: name&quot;,&quot;path&quot;:&quot;/actuator/custom-health/p1&quot;&#125;</span><br><span class="line"></span><br><span class="line">只能通过以下方式才能请求到health2方法,参数名必须相同.&#123;angstring&#125;用任意字符串替换就行.</span><br><span class="line">$ curl http://localhost:[port]/actuator/custom-health/&#123;anystring&#125;?name=hello</span><br><span class="line">custom-end-point get parameter: hello</span><br><span class="line"></span><br><span class="line"># 调用health3方法,参数名必须相同,&#123;angstring&#125;用任意字符串替换就行.</span><br><span class="line">$ curl http://localhost:[port]/actuator/custom-health/&#123;anystring&#125;/&#123;anystring&#125;?name=hello&amp;name=world</span><br><span class="line">custom-end-point get parameter1: hello,parameter2: world</span><br></pre></td></tr></table></figure><p>☆ 总结:actuator中端点的多参数请求方式,不按照参数名匹配.所以需要在启动时添加-parameters参数.</p><ul><li>使用<code>WebEndpointExtension</code>或<code>@EndpointJmxExtension</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Endpoint(id = &quot;myhealth&quot;)</span><br><span class="line">public class MyHealthEndpoint &#123;</span><br><span class="line"></span><br><span class="line">    @ReadOperation</span><br><span class="line">    public String health() &#123;</span><br><span class="line">        return &quot;health&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@EndpointWebExtension(endpoint = MyHealthEndpoint.class)</span><br><span class="line">public class MyHealthWebEndpointExtension &#123;</span><br><span class="line"></span><br><span class="line">    private final MyHealthEndpoint delegate;</span><br><span class="line"></span><br><span class="line">    public MyHealthWebEndpointExtension(MyHealthEndpoint delegate) &#123;</span><br><span class="line">        this.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ReadOperation</span><br><span class="line">    public WebEndpointResponse&lt;String&gt; getHealth() &#123;</span><br><span class="line">        return new WebEndpointResponse&lt;&gt;(&quot;health&quot;, 200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ActuatorConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    @ConditionalOnEnabledEndpoint</span><br><span class="line">    public MyHealthEndpoint myHealthEndpoint() &#123;</span><br><span class="line">        return new MyHealthEndpoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    @ConditionalOnEnabledEndpoint</span><br><span class="line">    @ConditionalOnBean(&#123;MyHealthEndpoint.class&#125;)</span><br><span class="line">    public MyHealthWebEndpointExtension myHealthWebEndpointExtension(</span><br><span class="line">            MyHealthEndpoint delegate) &#123;</span><br><span class="line">        return new MyHealthWebEndpointExtension(delegate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># application.yml</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    myhealth:</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure><h6 id="覆盖原端点"><a href="#覆盖原端点" class="headerlink" title="覆盖原端点"></a>覆盖原端点</h6><p>目前覆盖原端点只能通过重载的方式.我这里测试了health端点的覆盖.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyHealthIndicator implements HealthIndicator &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Health health() &#123;</span><br><span class="line">        return Health.down().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 再次请求Health端点,返回值就为&#123;&quot;status&quot;:&quot;DOWN&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><h3 id="端点默认缓存的默认时间是多少"><a href="#端点默认缓存的默认时间是多少" class="headerlink" title="端点默认缓存的默认时间是多少?"></a>端点默认缓存的默认时间是多少?</h3><h3 id="官网还有更多关于监控文章待学习"><a href="#官网还有更多关于监控文章待学习" class="headerlink" title="官网还有更多关于监控文章待学习."></a>官网还有更多关于监控文章待学习.</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="spring-boot-2-0-4-doc"><a href="#spring-boot-2-0-4-doc" class="headerlink" title="spring-boot-2.0.4-doc"></a><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#production-ready" target="_blank" rel="noopener">spring-boot-2.0.4-doc</a></h3><h3 id="Custom-Endpoint-in-Spring-Boot-Actuator"><a href="#Custom-Endpoint-in-Spring-Boot-Actuator" class="headerlink" title="Custom Endpoint in Spring Boot Actuator"></a><a href="https://www.javadevjournal.com/spring-boot/spring-boot-actuator-custom-endpoint/" target="_blank" rel="noopener">Custom Endpoint in Spring Boot Actuator</a></h3><h3 id="How-to-make-the-Endpoint-id-“health”-working-in-Spring-Boot-2-0"><a href="#How-to-make-the-Endpoint-id-“health”-working-in-Spring-Boot-2-0" class="headerlink" title="How to make the @Endpoint(id = “health”) working in Spring Boot 2.0?"></a><a href="https://stackoverflow.com/questions/46796899/how-to-make-the-endpointid-health-working-in-spring-boot-2-0" target="_blank" rel="noopener">How to make the <code>@Endpoint(id = “health”)</code> working in Spring Boot 2.0?</a></h3>]]></content>
      
      <categories>
          
          <category> Spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring boot 监控 </tag>
            
            <tag> Spring boot Actuator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes的DNS理解</title>
      <link href="/blog/2018/08/23/kubernetes%E7%9A%84DNS%E7%90%86%E8%A7%A3/"/>
      <url>/blog/2018/08/23/kubernetes%E7%9A%84DNS%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>对于k8s的DNS理解还是有些模糊,这里梳理阅读相关文章后的理解.</p><ul><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/coredns/" target="_blank" rel="noopener">Using CoreDNS for Service Discovery</a></li><li><a href="https://kubernetes.io/cn/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">在 Kubernetes 中配置私有 DNS 和上游域名服务器</a></li><li><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/" target="_blank" rel="noopener">DNS for Services and Pods</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">Customizing DNS Service</a></li></ul><h2 id="Kubernetes提供的DNS服务"><a href="#Kubernetes提供的DNS服务" class="headerlink" title="Kubernetes提供的DNS服务"></a>Kubernetes提供的DNS服务</h2><p>DNS是kubernetes内置的Pod服务.包含三个容器:</p><ul><li><p>kubedns</p><p>监测kubernetes的master节点对Services和Endpoints的变化,并且保留在内存中,服务DNS查询.</p></li><li><p>dnsmasq</p><p>缓存DNS,提高查询效率.</p></li><li><p>sidecars</p><p>为dnsmasq和kubedns提供健康检查的端点.</p></li></ul><h3 id="Kube-DNS和CoreDNS"><a href="#Kube-DNS和CoreDNS" class="headerlink" title="Kube-DNS和CoreDNS"></a>Kube-DNS和CoreDNS</h3><p>kubernetes提供了两种DNS服务</p><ul><li>kube-dns</li><li>CoreDNS</li></ul><p>从v1.11版本开始,CoreDNS已经是GA版本了,且已经作为Kubernetes的DNS服务.(<a href="https://coredns.io/" target="_blank" rel="noopener">CoreDNS</a>已经作为CNCF的独立项目)</p><p>kube-dns是在1.9版本前使用.</p><p>在v1.11版本之后,(不建议)如果还想继续使用kube-dns,则在初始化集群是配置以下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init --feature-gates=CoreDNS=false</span><br></pre></td></tr></table></figure><h3 id="配置kube-dns的存根域和上游DNS服务器"><a href="#配置kube-dns的存根域和上游DNS服务器" class="headerlink" title="配置kube-dns的存根域和上游DNS服务器"></a>配置kube-dns的存根域和上游DNS服务器</h3><p>这里有两个概念:stub domains 和upstream nameservers.这里我翻译为存根域和上游DNS服务器.</p><ul><li>upstreamNameservers,会覆盖node节点上的/etc/resolv.conf文件,且最多配置三个upstream nameservers.</li></ul><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  stubDomains: |</span><br><span class="line">    &#123;&quot;acme.local&quot;: [&quot;1.2.3.4&quot;]&#125;</span><br><span class="line">  upstreamNameservers: |</span><br><span class="line">    [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]</span><br></pre></td></tr></table></figure><p>DNS请求如果后缀有<code>acme.local</code>,则返回DNS Server的地址1.2.3.4.</p><table><thead><tr><th>Domain name</th><th>Server answering the query</th></tr></thead><tbody><tr><td>kubernetes.default.svc.cluster.local</td><td>kube-dns</td></tr><tr><td>foo.acme.local</td><td>custom DNS (1.2.3.4)</td></tr><tr><td>widget.com</td><td>upstream DNS (one of 8.8.8.8, 8.8.4.4)</td></tr></tbody></table><h4 id="Pod设置dnsPolicy对DNS查询的影响"><a href="#Pod设置dnsPolicy对DNS查询的影响" class="headerlink" title="Pod设置dnsPolicy对DNS查询的影响"></a>Pod设置dnsPolicy对DNS查询的影响</h4><p>当在pod中设置的dnsPolicy为<code>default</code> 和<code>None</code>,则自定义的stub domain和upstream nameservers不会生效.</p><p>当dnsPolicy为<code>ClusterFirst</code>后</p><ul><li><p>未配置了存根域和upstream</p><p>如果咩有匹配的domain后缀,如<code>www.kubernetes.io</code>则去查找upstream nameserver.</p></li><li><p>配置自定义存根域和upstream</p><p>首先查找kube-dns的DNS cache.</p><p>再查找自定义的stub domain,即图中的custom DNS.</p><p>最后查找upstream DNS.</p><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180824174249533.png" alt="image-20180824174249533"></p></li></ul><h3 id="配置CoreDNS的存根域和上游DNS服务器"><a href="#配置CoreDNS的存根域和上游DNS服务器" class="headerlink" title="配置CoreDNS的存根域和上游DNS服务器"></a>配置CoreDNS的存根域和上游DNS服务器</h3><p>CoreDNS提供链条插件式扩展,非常灵活.CoreDNS安装后默认包含了30个插件.CoreDNS的功能可以由一个或多个插件组成.只要会go语言,以及指导DNS工作原理就可以开发插件.</p><p>CoreDNS的配置文件Corefile.且语法规则如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">coredns.io &#123;</span><br><span class="line">    file coredns.io.signed &#123;</span><br><span class="line">        transfer to * 185.49.140.62</span><br><span class="line">    &#125;</span><br><span class="line">    prometheus</span><br><span class="line">    errors</span><br><span class="line">    log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细信息可浏览官网<a href="https://coredns.io/manual/toc/" target="_blank" rel="noopener">CoreDNS</a>.</p><p>在v1.10版本后,kubeadm支持自动转换ConfigMap为Corefile.</p><p>Example:</p><p>kubedns使用以下配置.stubDomain存根域及upstream上游域.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  federations: |</span><br><span class="line">    &#123;&quot;foo&quot; : &quot;foo.feddomain.com&quot;&#125;</span><br><span class="line">  stubDomains: |</span><br><span class="line">    &#123;&quot;abc.com&quot; : [&quot;1.2.3.4&quot;], &quot;my.cluster.local&quot; : [&quot;2.3.4.5&quot;]&#125;</span><br><span class="line">  upstreamNameservers: |</span><br><span class="line">    [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]</span><br><span class="line">kind: ConfigMap</span><br></pre></td></tr></table></figure><p>等价的Corefile配置文件为:</p><ul><li>For federations:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">federation cluster.local &#123;</span><br><span class="line">       foo foo.feddomain.com</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>For stubDomains:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">abc.com:53 &#123;</span><br><span class="line">    errors</span><br><span class="line">    cache 30</span><br><span class="line">    proxy . 1.2.3.4</span><br><span class="line">&#125;</span><br><span class="line">my.cluster.local:53 &#123;</span><br><span class="line">    errors</span><br><span class="line">    cache 30</span><br><span class="line">    proxy . 2.3.4.5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整配置如下:DNS使用UDP协议,且端口为53</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        health</span><br><span class="line">        kubernetes cluster.local  in-addr.arpa ip6.arpa &#123;</span><br><span class="line">           upstream  8.8.8.8 8.8.4.4</span><br><span class="line">           pods insecure</span><br><span class="line">           fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">        &#125;</span><br><span class="line">        federation cluster.local &#123;</span><br><span class="line">           foo foo.feddomain.com</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        proxy .  8.8.8.8 8.8.4.4</span><br><span class="line">        cache 30</span><br><span class="line">    &#125;</span><br><span class="line">    abc.com:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        cache 30</span><br><span class="line">        proxy . 1.2.3.4</span><br><span class="line">    &#125;</span><br><span class="line">    my.cluster.local:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        cache 30</span><br><span class="line">        proxy . 2.3.4.5</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="DNS中的记录生成规则"><a href="#DNS中的记录生成规则" class="headerlink" title="DNS中的记录生成规则"></a>DNS中的记录生成规则</h3><p>DNS包含A记录和SRV记录.A记录就是ip和域名的映射,SRV记录是端口映射.</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>Service分为Headless和非Headless.(Headless Service:<code>.spec.clusterIP</code>设置为None)</p><p>Service创建之后,默认会生成一条DNS映射的A记录,格式为:<code>[.metadata.name].[namespace].svc.cluster.local</code>.</p><p>还会生成一条DNS映射的SRV(端口)记录,格式为:<code>_my-port-name._my-port-protocol.my-svc.my-namespace.svc.cluster.local</code>.</p><p>对非Headless的Service,端口的DNS映射就是:<code>[.metadata.name].[namespace].svc.cluster.local</code>.</p><p>对于Headless的Service,目前还不是特别明白.暂且先将原文描述贴下来.For a headless service, this resolves to multiple answers, one for each pod that is backing the service, and contains the port number and the domain name of the pod of the form <code>auto-generated-name.my-svc.my-namespace.svc.cluster.local</code>.</p><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><p>创建Pod会生成一条DNS的A记录:<code>pod-ip-address.my-namespace.pod.cluster.local</code>.</p><p>在集群中查找Pod,可以通过这种格式<code>[.metadata.name].[.spec.subdomain].[namespace].svc.cluster.local</code>查找.</p><h3 id="Pod的DNS规则"><a href="#Pod的DNS规则" class="headerlink" title="Pod的DNS规则"></a>Pod的DNS规则</h3><p> 设置字段:<code>.spec.dsnPolicy</code>.有四种规则:</p><ul><li><p>Default</p><p>虽然名字是Default,但是不是默认规则.</p><p>The Pod inherits the name resolution configuration from the node that the pods run on</p></li><li><p>ClusterFirst</p><p>集群规则优先,如果没有查询到,则去上游域名服务器查询.集群DNS服务和上游DNS服务都可以配置.</p></li><li><p>ClusterFirstWithHostNet</p><p>For Pods running with hostNetwork, you should explicitly set its DNS policy</p></li><li><p>None</p><p>忽略在kubernetes环境DNS配置,并使用自定义的DNS配置.<code>.spec.dsnConfig</code></p></li></ul><h4 id="如何手动设置Pod中的DNS解析配置"><a href="#如何手动设置Pod中的DNS解析配置" class="headerlink" title="如何手动设置Pod中的DNS解析配置"></a>如何手动设置Pod中的DNS解析配置</h4><p>需要在集群中开启功能支持,<code>--feature-gates=CustomPodDNS=true</code>.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  namespace: default</span><br><span class="line">  name: dns-example</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: test</span><br><span class="line">      image: nginx</span><br><span class="line">  dnsPolicy: &quot;None&quot;</span><br><span class="line">  dnsConfig:</span><br><span class="line">    nameservers:</span><br><span class="line">      - 1.2.3.4</span><br><span class="line">    searches:</span><br><span class="line">      - ns1.svc.cluster.local</span><br><span class="line">      - my.dns.search.suffix</span><br><span class="line">    options:</span><br><span class="line">      - name: ndots</span><br><span class="line">        value: &quot;2&quot;</span><br><span class="line">      - name: edns0</span><br></pre></td></tr></table></figure><p>运行后,会在Pod中的/etc/resolv.conf文件中生成以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nameserver 1.2.3.4</span><br><span class="line">search ns1.svc.cluster.local my.dns.search.suffix</span><br><span class="line">options ndots:2 edns0</span><br></pre></td></tr></table></figure><h3 id="自定义DNS服务"><a href="#自定义DNS服务" class="headerlink" title="自定义DNS服务"></a>自定义DNS服务</h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes DNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DNS for Services and Pods翻译</title>
      <link href="/blog/2018/08/22/DNS-for-Services-and-Pods%E7%BF%BB%E8%AF%91/"/>
      <url>/blog/2018/08/22/DNS-for-Services-and-Pods%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/" target="_blank" rel="noopener">原文链接</a></h2><h2 id="DNS-for-Services-and-Pods"><a href="#DNS-for-Services-and-Pods" class="headerlink" title="DNS for Services and Pods"></a>DNS for Services and Pods</h2><p>这篇文章是kubernetes关于DNS的概述.</p><ul><li>Introduction</li><li>Services</li><li>Pods</li></ul><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Kubernetes DNS 在集群中调度一个DNS Pod和Service,并配置kubelets去告诉独立的容器使用DNS Service’s IP去解析DNS名称.</p><h4 id="What-things-get-DNS-names"><a href="#What-things-get-DNS-names" class="headerlink" title="What things get DNS names?"></a>What things get DNS names?</h4><p>在集群中的每个service都会被分配一个DNS名称.默认情况下,客户端发起的Pod的DNS搜索包括Pod的namespace和集群默认的域名.这里有个例子说明:</p><p>假设一个Service名称为foo,在kubernetes中的namespace为bar.一个运行在namespace为bar的pod,通过简便的DNS查询到名称为foo的Service.一个运行在namespace为quux的pod,可以在DNS中通过搜索名称为foo.bar,并查到这个容器.</p><p>下面的章节详细的说明了支持的record类型以及支持的布局设计.</p><h3 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h3><h4 id="A-Record"><a href="#A-Record" class="headerlink" title="A Record"></a>A Record</h4><p>正常(not headless)Services会被分配一个这种格式的DNS A 记录<code>my-svc.my-namespace.svc.cluster.local</code>.这个解析集群的Service Ip.</p><p>Headless(没有cluster ip)Services会被分配一个这种格式的DNS A记录<code>my-svc.my-namespace.svc.cluster.local</code>.和正常的Services不同的是,通过解析Pod中的一组Ip.</p><h4 id="SRV-Record"><a href="#SRV-Record" class="headerlink" title="SRV Record"></a>SRV Record</h4><p>SRV记录是在正常或Headless Service创建时指定端口.每个指定的端口,SRV记录的格式是: <code>_my-port-name._my-port-protocol.my-svc.my-namespace.svc.cluster.local</code>.对于headless serviec来说,这个解析会得到多个结果,pod中的容器端口号和子域名格式为:<code>auto-generated-name.my-svc.my-namespace.svc.cluster.local</code>.</p><h3 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h3><h4 id="A-Record-1"><a href="#A-Record-1" class="headerlink" title="A Record"></a>A Record</h4><p>Pods会被分配这种格式的一条DNS A记录:<code>pod-ip-address.my-namespace.pod.cluster.local</code></p><p>例如:一个pod的ip是1.2.3.4,namespace为default,DNS为cluster.local的DNS记录为:1-2-3-4.default.pod.cluster.local</p><h4 id="Pod’s-hostname-and-subdomain-fields"><a href="#Pod’s-hostname-and-subdomain-fields" class="headerlink" title="Pod’s hostname and subdomain fields"></a>Pod’s hostname and subdomain fields</h4><p>创建pod时,它的hostname默认为Pod中的metadata.name的值.</p><p>Pod的spec有个hostname字段选项,用来指定pod的hostname.而<code>.spec.hostname</code>优先级高于<code>.metadata.name</code>.例如:给一个pod的hostname设置为”my-host”,那么这个pod的名称就是”my-host”.</p><p>Pod的spec有个subdomain字段选项,用来指定pod的子域名.例如:一个pod的hostname设置为”foo”,subdomain设置为”bar”,namespace为”my-namespace”,则它的查询名称就为:<code>foo.bar.my-namespace.svc.cluster.local</code></p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: default-subdomain</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    name: busybox</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: foo # Actually, no port is needed.</span><br><span class="line">    port: 1234</span><br><span class="line">    targetPort: 1234</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox1</span><br><span class="line">  labels:</span><br><span class="line">    name: busybox</span><br><span class="line">spec:</span><br><span class="line">  hostname: busybox-1</span><br><span class="line">  subdomain: default-subdomain</span><br><span class="line">  containers:</span><br><span class="line">  - image: busybox</span><br><span class="line">    command:</span><br><span class="line">      - sleep</span><br><span class="line">      - &quot;3600&quot;</span><br><span class="line">    name: busybox</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox2</span><br><span class="line">  labels:</span><br><span class="line">    name: busybox</span><br><span class="line">spec:</span><br><span class="line">  hostname: busybox-2</span><br><span class="line">  subdomain: default-subdomain</span><br><span class="line">  containers:</span><br><span class="line">  - image: busybox</span><br><span class="line">    command:</span><br><span class="line">      - sleep</span><br><span class="line">      - &quot;3600&quot;</span><br><span class="line">    name: busybox</span><br></pre></td></tr></table></figure><p>如果存在一个headless service和一个pod在同一个namespace中,并且headless service的名称和pod中的subdomain名称相同,kubernetes的DNS服务一样查询到这个Service.例如:上面配置中,一个Pod的hostname是”busybox-1”,subdomain是default-subdomain,而headless service命名为”default-subdomain”.那么这个DNS为<code>busybox-1.default-subdomain.my-namespace.svc.cluster.local</code></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS for Services and Pods翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes常用命令</title>
      <link href="/blog/2018/08/21/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2018/08/21/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># nginx-deployment.yaml</span><br><span class="line">$ vim nginx-deployment.yaml</span><br><span class="line">apiVersion: apps/v1 # 1.11版本之后</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3 # 3个副本</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx # 与template.metadata.labels一致</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><h4 id="创建Deployments"><a href="#创建Deployments" class="headerlink" title="创建Deployments"></a>创建Deployments</h4><ul><li>record参数设置为true,在Deployment revision时方便命令记录,以及在describe时能够看到Annotations中指令记录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f nginx-deployment.yaml --record</span><br><span class="line">deployment &quot;nginx-deployment&quot; created</span><br></pre></td></tr></table></figure><h4 id="查看发布历史记录"><a href="#查看发布历史记录" class="headerlink" title="查看发布历史记录"></a>查看发布历史记录</h4><ul><li>rollout 字面是上线意思,我理解为发布.</li></ul><p>替换metadata.name,即上面文件中的nginx-deployment名称.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># kubectl rollout history deployment/[metadata.name]</span><br><span class="line">$ kubectl rollout history deployment/nginx-deployment</span><br><span class="line"># 如果在创建Deployments时没有使用--record,没有命令记录.</span><br><span class="line">deployments &quot;nginx-deployment&quot;</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line"># 如果在创建时指定--record,会有命令记录.</span><br><span class="line">deployments &quot;nginx-deployment&quot;</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         kubectl create --filename=nginx-deployment.yaml --record=true</span><br></pre></td></tr></table></figure><p>查看历史版本的具体信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout history deployment/nginx-deployment --revision=1</span><br><span class="line">deployments &quot;nginx-deployment&quot; with revision #1</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:app=nginx</span><br><span class="line">pod-template-hash=2777190766</span><br><span class="line">  Annotations:kubernetes.io/change-cause=kubectl create --filename=nginx-deployment.yaml --record=true</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:nginx</span><br><span class="line">    Port:80/TCP</span><br><span class="line">    Host Port:0/TCP</span><br><span class="line">    Environment:&lt;none&gt;</span><br><span class="line">    Mounts:&lt;none&gt;</span><br><span class="line">  Volumes:&lt;none&gt;</span><br></pre></td></tr></table></figure><h4 id="查看Deployments"><a href="#查看Deployments" class="headerlink" title="查看Deployments"></a>查看Deployments</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment [metadata.name](可选)</span><br><span class="line"># 不指定deployment的名字将查询全部的deployments.如下:</span><br><span class="line">NAME                    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">hello-node-deployment   1         1         1            1           17m</span><br><span class="line">nginx-deployment        1         1         1            1           4m</span><br></pre></td></tr></table></figure><h4 id="查看RS-ReplicaSet"><a href="#查看RS-ReplicaSet" class="headerlink" title="查看RS(ReplicaSet)"></a>查看RS(ReplicaSet)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                              DESIRED   CURRENT   READY     AGE</span><br><span class="line">nginx-deployment-966857787        1         1         1         5m</span><br></pre></td></tr></table></figure><h4 id="更新Deployments-自动rollout"><a href="#更新Deployments-自动rollout" class="headerlink" title="更新Deployments(自动rollout)"></a>更新Deployments(自动rollout)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 方式一,修改文件中的spec.template.spec.containers[0].image值</span><br><span class="line">kubectl edit deployment/[metadata.name]</span><br><span class="line">$ kubectl edit deployment/nginx-deployment</span><br><span class="line"># 方式二 </span><br><span class="line">kubectl set image deployment [metadata.name] [spec.spec.containers.name]=镜像名称</span><br><span class="line">$ kubectl set image deployment nginx-deployment nginx=nginx:1.7.9</span><br></pre></td></tr></table></figure><h4 id="查看发布状态"><a href="#查看发布状态" class="headerlink" title="查看发布状态"></a>查看发布状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># kubectl rollout status deployment/[metadata.name]</span><br><span class="line">$ kubectl rollout status deployment/nginx-deployment</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...</span><br><span class="line">deployment &quot;nginx-deployment&quot; successfully rolled out</span><br></pre></td></tr></table></figure><h4 id="查看deployment详细信息"><a href="#查看deployment详细信息" class="headerlink" title="查看deployment详细信息"></a>查看deployment详细信息</h4><ul><li>关注Events,记录了发布的过程.实际是创建了一个新的ReplicaSet-&gt;nginx-deployment-6ccc5f4cbb,然后逐渐下原来的ReplicaSet-&gt;nginx-deployment-966857787的Pod.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># kubectl describe deployment/[metadata.name]</span><br><span class="line">$ kubectl describe deployment/nginx-deployment</span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Tue, 21 Aug 2018 15:18:18 +0800</span><br><span class="line">Labels:                 app=nginx</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision=2</span><br><span class="line">                        kubernetes.io/change-cause=kubectl create --filename=nginx-deployment.yaml --record=true</span><br><span class="line">Selector:               app=nginx</span><br><span class="line">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.7.9</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-6ccc5f4cbb (3/3 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age   From                   Message</span><br><span class="line">  ----    ------             ----  ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  4m    deployment-controller  Scaled up replica set nginx-deployment-966857787 to 3</span><br><span class="line">  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled up replica set nginx-deployment-6ccc5f4cbb to 1</span><br><span class="line">  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled down replica set nginx-deployment-966857787 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled up replica set nginx-deployment-6ccc5f4cbb to 2</span><br><span class="line">  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled down replica set nginx-deployment-966857787 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled up replica set nginx-deployment-6ccc5f4cbb to 3</span><br><span class="line">  Normal  ScalingReplicaSet  3m    deployment-controller  Scaled down replica set nginx-deployment-966857787 to 0</span><br></pre></td></tr></table></figure><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul><li><p>回滚之后,revision对应记录就会消失</p></li><li><p>undo是回滚到上一个版本的操作.</p><p>假设有三个版本:nginx:1.4.7, nginx:1.7.9, nginx:1.9.7, nginx:1.10.3,当前版本为nginx:1.10.3.</p><p>1、假如指定to-revision回滚到1.7.9版本,再执行undo(不指定to-revision),则恢复到1.10.3版本.</p><p>2、第一次执行undo(不指定to-revision),回滚到1.9.7版本,再次执行undo(不指定to-revision),则恢复到1.10.3版本.</p><p>3、第一次指定to-revision回滚到1.7.9,第二次指定to-revision回滚到1.9.7,第三次指定to-revision回滚到1.4.7,第四次指定undo(不指定to-revison),则是回滚到1.9.7.</p></li></ul><p>假设有三个版本:nginx:1.7.9,nginx:1.9.7,nginx:1.10.3,当前版本为nginx:1.10.3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看发布历史记录</span><br><span class="line">$ kubectl rollout history deployment/nginx-deployment </span><br><span class="line">deployments &quot;nginx-deployment&quot;</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         kubectl create --filename=nginx-deployment.yaml --record=true</span><br><span class="line">2         kubectl create --filename=nginx-deployment.yaml --record=true</span><br><span class="line">3         kubectl create --filename=nginx-deployment.yaml --record=true</span><br></pre></td></tr></table></figure><p>第一次执行undo回退到前一个版本,即nginx:1.9.7.如果第二次再执行,又会回滚到原版本,即nginx:1.10.3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># kubectl rollout undo deployment/[metatdata.name]</span><br><span class="line">$ kubectl rollout undo deployment/nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line"># 这里查看下发布历史记录,发现revision为3的记录消失了.</span><br><span class="line">deployments &quot;nginx-deployment&quot;</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         kubectl create --filename=nginx-deployment.yaml --record=true</span><br><span class="line">2         kubectl create --filename=nginx-deployment.yaml --record=true</span><br><span class="line">4         kubectl create --filename=nginx-deployment.yaml --record=true</span><br></pre></td></tr></table></figure><p>指定to-revision回退到指定历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl rollout undo deployment/[metadata.name] --to-revision=[number]</span><br><span class="line">$ kubectl rollout undo deployment/nginx-deployment --to-revision=2</span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line"># 这里如果执行undo但不指定--to-revision,则恢复导原来版本.</span><br></pre></td></tr></table></figure><h4 id="Deployment扩容"><a href="#Deployment扩容" class="headerlink" title="Deployment扩容"></a>Deployment扩容</h4><p>指定 扩容/缩容 副本数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># kubectl scale deployment/[metadata.name] --replicas=[number]</span><br><span class="line">$ kubectl scale deployment/nginx-deployment --replicas=6</span><br><span class="line">deployment.extensions/nginx-deployment scaled</span><br><span class="line"># 查看扩容状态</span><br><span class="line">$ kubectl rollout status deployment/nginx-deployment</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 3 of 6 updated replicas are available...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 4 of 6 updated replicas are available...</span><br><span class="line">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 5 of 6 updated replicas are available...</span><br><span class="line">deployment &quot;nginx-deployment&quot; successfully rolled out</span><br></pre></td></tr></table></figure><p>当集群启用horizontal pod autoscaling后,可以根据CPU利用率,在范围内扩容或缩容.(todo还不知道怎么做)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ $ kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80</span><br><span class="line">deployment &quot;nginx-deployment&quot; autoscaled</span><br></pre></td></tr></table></figure><h4 id="设置Deployments发布历史记录"><a href="#设置Deployments发布历史记录" class="headerlink" title="设置Deployments发布历史记录"></a>设置Deployments发布历史记录</h4><p>在nginx-deployment.yaml中设置spec.revisionHistoryLimits属性,默认是保留全部历史记录.可以不用去理会.</p><h4 id="设置Deployments发布策略"><a href="#设置Deployments发布策略" class="headerlink" title="设置Deployments发布策略"></a>设置Deployments发布策略</h4><p><code>spec.strategy</code> 指定新的Pod替换旧的Pod的策略。 <code>spec.strategy.type</code> 可以是<code>Recreate</code>或者是 <code>RollingUpdate</code>。<code>RollingUpdate</code>是默认值。</p><ul><li>Recreate 指在创建出新的Pod之前会杀掉已经存在的Pod.(强烈建议不使用)</li><li>RollingUpdate 指滚动升级.逐步一个一个交替升级.可以指定<code>maxUnavailable</code> 和 <code>maxSurge</code> 来控制 rolling update 进程。<ul><li>maxUnavaiables <code>.spec.strategy.rollingUpdate.maxUnavailable</code>指定在升级的过程中不可用的Pod数量.默认为1,也可以设置为百分比.如设置为30%,则原来的ReplicaSet会立刻缩容到70%.</li><li>maxSurge <code>.spec.strategy.rollingUpdate.maxSurge</code>指定在升级过程中,新老Pod的总数的最大值.如设置为30%,启动rolling update后新的ReplicatSet将会立即扩容,新老Pod的总数不能超过期望的Pod数量的130%。</li></ul></li></ul><h4 id="Pause设置"><a href="#Pause设置" class="headerlink" title="Pause设置"></a>Pause设置</h4><p><code>.spec.paused</code>是可以可选配置项，boolean值。默认为false.</p><p>如果设置paused后,对Deployment中的PodTemplateSpec的修改都不会触发新的rollout。</p><h2 id="后续需要学习"><a href="#后续需要学习" class="headerlink" title="后续需要学习"></a>后续需要学习</h2><h3 id="如何在集群中启用了horizontal-pod-autoscaling"><a href="#如何在集群中启用了horizontal-pod-autoscaling" class="headerlink" title="如何在集群中启用了horizontal pod autoscaling"></a>如何在集群中启用了horizontal pod autoscaling</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="Kubernetes-apis"><a href="#Kubernetes-apis" class="headerlink" title="Kubernetes apis"></a><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11" target="_blank" rel="noopener">Kubernetes apis</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gluster入门</title>
      <link href="/blog/2018/08/20/Gluster%E5%85%A5%E9%97%A8/"/>
      <url>/blog/2018/08/20/Gluster%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuzxicxxpzj30jx08rq3v.jpg" alt="Gluster技术视图"></p><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><ul><li><p>Recommend use XFS filesystem.</p><p>○  Typically, XFS is recommended but it can be used with other filesystems as well. Most commonly EXT4 is used when XFS isn’t, but you can (and many, many people do) use another filesystem that suits you. </p><p>☆ 推荐使用XFS文件系统.EXT4等其他文件系统也是可以.</p></li><li><p>Correct DNS entries (forward and reverse) and NTP are essential.</p><p>☆ DNS一般不需要特殊配置,采用默认即可.NTP,就是要求每台机器的时钟进行校对,节点机器都在同一个时区,并校对.校对方式很多,使用一致的即可.</p></li><li><p>Firewalls are great, except when they aren’t.In case you absolutely need to set up a firewall, have a look at <a href="https://docs.gluster.org/en/latest/Administrator%20Guide/Setting%20Up%20Clients/" target="_blank" rel="noopener">Setting up clients</a> for information on the ports used.</p><p>☆ 不建议Gluster节点之间开启防火墙.如果实在有必要开启防火墙,我是配置IP级别的,这样可以减少一些复杂度.</p></li><li><p>2 CPU’s, 2GB of RAM, 1GBE(千兆带宽)</p><p>☆ 服务端配置至少需要这种配置</p></li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Gluster-Native-Client"><a href="#Gluster-Native-Client" class="headerlink" title="Gluster Native Client"></a>Gluster Native Client</h3><p>○ The Gluster Native Client is a FUSE-based client running in user space. Gluster Native Client is the recommended method for accessing volumes when high concurrency and high write performance is required.</p><p>☆ 推荐使用这种方式,其基于内核提供的FUSE,在高并发、大数据量写入时效果更好.</p><h3 id="NFS-Client"><a href="#NFS-Client" class="headerlink" title="NFS Client"></a>NFS Client</h3><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><p>○  GlusterFS is a scalable network filesystem suitable for data-intensive tasks such as cloud storage and media streaming. GlusterFS is free and open source software and can utilize common off-the-shelf hardware.</p><p>GlusterFS isn’t really a filesystem in and of itself. It concatenates existing filesystems into one (or more) big chunks so that data being written into or read out of Gluster gets distributed across multiple hosts simultaneously</p><p>☆ Gluster是一个开源的、可扩展的、分布式数据存储管理软件.其并不是一个文件系统,只是提供连接能力,将分布的文件系统组装成一个更大的文件存储系统.</p><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><ul><li><p>TSP</p><p>○  A trusted storage pool(TSP) is a trusted network of storage servers. Before you can configure a GlusterFS volume, you must create a trusted storage pool of the storage servers that will provide bricks to the volume by peer probing the servers. The servers in a TSP are peers of each other.</p><p>☆ Gluster通过TSP(信任存储池)来确定可提供存储服务的机器有哪些.</p></li><li><p>Brick</p><p>○  A brick is used to refer to any device (really this means filesystem) that is being used for Gluster storage.</p><p>☆ Gluster使用的存储单位.在linux系统中,常用<code>fdisk -l</code>来查看挂载的磁盘,而brick对Gluster来说,就是它的挂载的磁盘.只不过这里将brick与磁盘进行一个bind,一一映射.</p></li><li><p>Gluster volume</p><p>○  A <strong>Gluster volume</strong> is a collection of one or more bricks (of course, typically this is two or more). This is analogous(类似的) to /etc/exports entries for NFS.</p><p>☆ Brick的集合.</p></li><li><p>Global Namespace</p><p>○  The term <strong>Global Namespace</strong> is a fancy way of saying a Gluster volume.</p><p>☆ 对Cluster volume的另一种叫法.</p></li><li><p>Export</p><p>○  An <strong>export</strong> refers to the mount path of the brick(s) on a given server, for example, /export/brick1.</p><p>☆ 暂时不能理解,待补充.</p></li><li><p><strong>GNFS</strong> and <strong>kNFS</strong></p><p>○  GNFS is how we refer to our inline NFS server. kNFS stands for kernel NFS, or, as most people would say, just plain NFS. Most often, you will want kNFS services disabled on the Gluster nodes. Gluster NFS doesn’t take any additional configuration and works just like you would expect with NFSv3. It is possible to configure Gluster and NFS to live in harmony if you want to.</p><p>☆ Gluster内部的NFS服务,启动好Glusterd Daemon后,通过GNFS其他Gluster进行数据交互.kNFS是Linux系统内核的NFS服务.两者不会互相干扰,可以共同使用.</p></li></ul><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>Centos系统可参考&lt;&lt;Gluster安装&gt;&gt;.<a href="https://docs.gluster.org/en/latest/Install-Guide/Install/" target="_blank" rel="noopener">其他系统安装</a>.</p><h3 id="System-Packaged-version"><a href="#System-Packaged-version" class="headerlink" title="System Packaged version"></a>System Packaged version</h3><p>各系统的安装包版本及依赖包.<a href="https://docs.gluster.org/en/latest/Install-Guide/Community_Packages/" target="_blank" rel="noopener">Packages</a></p><h3 id="Manage-Trust-Storage-Pool"><a href="#Manage-Trust-Storage-Pool" class="headerlink" title="Manage Trust Storage Pool"></a>Manage Trust Storage Pool</h3><p>○  The firewall on the servers must be configured to allow access to port 24007.</p><p>☆ 存储节点使用24007端口进行通信</p><p>假设有4台机器,server1,server2,server3,server4在一个TSP中.</p><h4 id="Add-to-trust-storage-pool"><a href="#Add-to-trust-storage-pool" class="headerlink" title="Add to trust storage pool"></a>Add to trust storage pool</h4><p>在任意一台机器上机器上执行.</p><ul><li>gluster peer probe <server></server></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gluster peer probe &lt;server&gt;</span><br><span class="line">Probe successful</span><br></pre></td></tr></table></figure><h4 id="List-Servers"><a href="#List-Servers" class="headerlink" title="List Servers"></a>List Servers</h4><p>在任意一台机器上执行.</p><ul><li>gluster pool list</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 假设在server1上执行.</span><br><span class="line">$ gluster pool list</span><br><span class="line">UUID                                    Hostname        State</span><br><span class="line">d18d36c5-533a-4541-ac92-c471241d5418    localhost       Connected</span><br><span class="line">5e987bda-16dd-43c2-835b-08b7d55e94e5    server2         Connected</span><br><span class="line">1e0ca3aa-9ef7-4f66-8f15-cbc348f29ff7    server3         Connected</span><br><span class="line">3e0cabaa-9df7-4f66-8e5d-cbc348f29ff7    server4         Connected</span><br></pre></td></tr></table></figure><h4 id="Views-peer-status"><a href="#Views-peer-status" class="headerlink" title="Views peer status"></a>Views peer status</h4><ul><li>gluster peer status</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 假设在server1上执行.</span><br><span class="line">$ gluster peer status</span><br><span class="line">Hostname: server2</span><br><span class="line">Uuid: 5e987bda-16dd-43c2-835b-08b7d55e94e5</span><br><span class="line">State: Peer in Cluster (Connect</span><br><span class="line">Hostname: server3</span><br><span class="line">Uuid: 1e0ca3aa-9ef7-4f66-8f15-cbc348f29ff7</span><br><span class="line">State: Peer in Cluster (Connect</span><br><span class="line">Hostname: server4</span><br><span class="line">Uuid: 3e0cabaa-9df7-4f66-8e5d-cbc348f29ff7</span><br><span class="line">State: Peer in Cluster (Connected)</span><br></pre></td></tr></table></figure><h4 id="Removing-Servers"><a href="#Removing-Servers" class="headerlink" title="Removing Servers"></a>Removing Servers</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># gluster peer detach &lt;server&gt;</span><br></pre></td></tr></table></figure><h3 id="Brick-Naming-Convertions"><a href="#Brick-Naming-Convertions" class="headerlink" title="Brick Naming Convertions"></a>Brick Naming Convertions</h3><ul><li><p>/data/glusterfs/<volume>/<brick>/brick</brick></volume></p><p><volume>是对linux磁盘绑定起的别名,如系统中<em>/dev/sdb</em>磁盘,我们绑定后,可以命名为test(环境使用类型),这样可区分所属环境.</volume></p><p><brick>就可以任意命名了,我是通过业务进行区分.如es表示搜索引擎业务使用,logs表示日志使用.不同的业务可能对磁盘性能可能也是不一样的,可以通过多个磁盘分出来.</brick></p></li></ul><p>要搞明白Brick的命名规范,就需要先理解brick的概念.在linux系统中,常用<code>fdisk -l</code>来查看挂载的磁盘,而brick就Gluster来说,就是它的挂载的磁盘.只不过这里将brick与磁盘进行一个bind,一一映射.</p><p>举个例子:</p><p>比如一块物理磁盘/dev/sdb,现在我用于测试环境中,用户通常的业务,存储一些日志等.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/glusterfs/test/biz</span><br><span class="line">$ mount /dev/sdb /data/glusterfs/test/biz</span><br><span class="line">$ gluster volume create test replica 2 server&#123;1..4&#125;:/data/glusterfs/test/biz/brick</span><br><span class="line"># 如果要启用还要start</span><br><span class="line">$ gluster volume start test</span><br></pre></td></tr></table></figure><p>这里有个疑问,为什么需要使用brick呢?</p><p>假如server1有两个磁盘/dev/sda,/dev/sdb.而server2有两个/dev/sdb1,/dev/sdb2.磁盘名称就存在不同,要通过brick去屏蔽底层磁盘的名称的不同和性能的不同.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/glusterfs/test/biz</span><br><span class="line"># server1</span><br><span class="line">$ mount /dev/sda /data/glusterfs/test/biz</span><br><span class="line"># server2</span><br><span class="line">$ mount /dev/sdb1 /data/glusterfs/test/biz</span><br><span class="line">$ gluster volume create test replica 2 server&#123;1..4&#125;:/data/glusterfs/test/biz/brick</span><br></pre></td></tr></table></figure><h3 id="Formatting-and-Mounting-Bricks"><a href="#Formatting-and-Mounting-Bricks" class="headerlink" title="Formatting and Mounting Bricks"></a>Formatting and Mounting Bricks</h3><p>待完善.这里主要涉及Linux卷相关概念:lV逻辑卷,VG卷组,PV物理卷.</p><p><a href="https://wiki.archlinux.org/index.php/LVM" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/LVM</a></p><p><a href="https://linux.cn/article-5117-1.html" target="_blank" rel="noopener">https://linux.cn/article-5117-1.html</a></p><p><a href="https://askubuntu.com/questions/417642/logical-volume-physical-volume-and-volume-groups" target="_blank" rel="noopener">https://askubuntu.com/questions/417642/logical-volume-physical-volume-and-volume-groups</a></p><h3 id="Set-ACL"><a href="#Set-ACL" class="headerlink" title="Set ACL"></a>Set ACL</h3><p>待完善.这里主要是Linux中ACL与Gluster的使用.</p><h3 id="Volume-Types"><a href="#Volume-Types" class="headerlink" title="Volume Types"></a>Volume Types</h3><p>○ A volume is a logical collection of bricks.</p><p>以下罗列了Gluster提供的Volume类型.</p><ul><li><p><strong>Distributed</strong> - Distributed volumes distribute files across the bricks in the volume. You can use distributed volumes where the requirement is to scale storage and the redundancy is either not important or is provided by other hardware/software layers.</p></li><li><p><strong>Replicated</strong> – Replicated volumes replicate files across bricks in the volume. You can use replicated volumes in environments where high-availability and high-reliability are critical.</p></li><li><p><strong>Distributed Replicated</strong> - Distributed replicated volumes distribute files across replicated bricks in the volume. You can use distributed replicated volumes in environments where the requirement is to scale storage and high-reliability is critical. Distributed replicated volumes also offer improved read performance in most environments.</p></li><li><p><strong>Dispersed</strong> - Dispersed volumes are based on erasure codes, providing space-efficient protection against disk or server failures. It stores an encoded fragment of the original file to each brick in a way that only a subset of the fragments is needed to recover the original file. The number of bricks that can be missing without losing access to data is configured by the administrator on volume creation time.</p><p>☆ 这里的关键是erasure codes算法.<a href="https://en.wikipedia.org/wiki/Erasure_code" target="_blank" rel="noopener">Erasure-Code</a>, 简称 EC, 也叫做 <strong>擦除码</strong> 或 <strong>纠删码</strong>, 指使用 范德蒙(<a href="https://en.wikipedia.org/wiki/Vandermonde_matrix" target="_blank" rel="noopener">Vandermonde</a>) 矩阵的 里德-所罗门码(<a href="https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction" target="_blank" rel="noopener">Reed-Solomon</a>) 擦除码算法.</p><p>通过较少的数据冗余能够找回丢失数据.相比于Relica百分百冗余来说,这个方式更节省空间.</p><p>推荐学习这篇文章<a href="http://drmingdrmer.github.io/tech/distributed/2017/02/01/ec.html" target="_blank" rel="noopener">drdr.xp Blog</a></p></li><li><p><strong>Distributed Dispersed</strong> - Distributed dispersed volumes distribute files across dispersed subvolumes. This has the same advantages of distribute replicate volumes, but using disperse to store the data into the bricks.</p></li><li><strong>Striped [Deprecated]</strong> 、<strong>Distributed Striped [Deprecated]</strong> 、<strong>Distributed Striped Replicated [Deprecated]</strong>、<strong>Striped Replicated [Deprecated]</strong> </li></ul><p>☆ 上面主要有三种volume类型:Distributed, Replicated, Dispersed. 和组合后的二种:Distributed Replicated, Distributed Dispersed.</p><h4 id="Create-Command"><a href="#Create-Command" class="headerlink" title="Create Command"></a>Create Command</h4><p>stripe已经废弃,所以目前只有replica和disperse两种volume类型.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># gluster volume create [stripe | replica | disperse] [transport tcp | rdma | tcp,rdma]</span><br><span class="line">  volume  create  &lt;NEW-VOLNAME&gt; [stripe &lt;COUNT&gt;] [replica &lt;COUNT&gt;] [disperse</span><br><span class="line">  [&lt;COUNT&gt;]] [redundancy &lt;COUNT&gt;] [transport &lt;tcp|rdma|tcp,rdma&gt;] &lt;NEW-BRICK&gt;</span><br><span class="line">  ...</span><br><span class="line">  Create a new volume of the specified type using the specified bricks</span><br><span class="line">  and transport type (the default transport type is tcp).  To create a</span><br><span class="line">  volume   with  both  transports  (tcp  and  rdma),  give  &apos;transport</span><br><span class="line">  tcp,rdma&apos; as an option.</span><br></pre></td></tr></table></figure><h4 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h4><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180904111824011.png" alt="image-20180904111824011"></p><ul><li><p>优点</p><p>节省空间,易扩展.</p></li><li><p>缺点</p><p>数据丢失风险:由于数据没有冗余,一旦机器故障数据就会丢失.</p></li></ul><p><strong>Note</strong>: Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># gluster volume create  [transport tcp | rdma | tcp,rdma]</span><br><span class="line"># If the transport type is not specified, tcp is used as the default.</span><br><span class="line">$ gluster volume create test-volume server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4</span><br><span class="line">$ gluster volume info</span><br><span class="line">Volume Name: test-volume</span><br><span class="line">Type: Distribute</span><br><span class="line">Status: Created</span><br><span class="line">Number of Bricks: 4</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: server1:/exp1</span><br><span class="line">Brick2: server2:/exp2</span><br><span class="line">Brick3: server3:/exp3</span><br><span class="line">Brick4: server4:/exp4</span><br></pre></td></tr></table></figure><h4 id="Replicated"><a href="#Replicated" class="headerlink" title="Replicated"></a>Replicated</h4><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180904112531086.png" alt="image-20180904112531086"></p><ul><li><p>优点</p><p>数据有冗余,数据丢失依然可用.</p></li><li><p>缺点</p><p>存储空间消耗较多</p></li></ul><p><strong>Note</strong>:</p><ul><li><p>Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p></li><li><p>GlusterFS will fail to create a replicate volume if more than one brick of a replica set is present on the same peer. For eg. a four node replicated volume where more than one brick of a replica set is present on the same peer.</p><p>☆ 这种Volume类型不能指定同一台机器.如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gluster volume create &lt;volname&gt; replica 4 server1:/brick1 server1:/brick2 server2:/brick3 server4:/brick4</span><br><span class="line">volume create: &lt;volname&gt;: failed: Multiple bricks of a replicate volume are present on the same server. This setup is not optimal. Use &apos;force&apos; at the end of the command if you want to override this behavior.</span><br></pre></td></tr></table></figure><p>这里指定了server1:/brick1和server1/brick2,所以报错,不能同时冗余一份到同一台机器.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># gluster volume create  [replica ] [transport tcp | rdma | tcp,rdma]</span><br><span class="line"># transport type is not specified, tcp is used as the default. </span><br><span class="line">$ gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2</span><br></pre></td></tr></table></figure><h4 id="Dispersed"><a href="#Dispersed" class="headerlink" title="Dispersed"></a>Dispersed</h4><ul><li><p>优点</p><p>同replica一样,数据高可用,而且数据存储量更少.</p></li><li><p>缺点</p><p>暂未发现</p></li></ul><p>○  Dispersed volumes are based on erasure codes.</p><p>☆ 基于纠偏码算法.不同于replica,冗余数据量大幅减少的情况下,依然做到数据高可用.</p><p>分布式系统中,为了保证数据高可用,一般选择副本数为3,这个可靠性的预期大约是11个9以上(99.999999999%的概率不丢数据).这里有业界报告来支撑这个数值.<a href="https://www.backblaze.com/blog/hard-drive-reliability-stats-q1-2016/" target="_blank" rel="noopener"><a href="https://www.backblaze.com/blog/hard-drive-reliability-stats-q1-2016/" target="_blank" rel="noopener">backblaze发布的硬盘故障率统计</a></a></p><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180904153714497.png" alt="image-20180904153714497"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 正常可以不用指定redundancy,在创建时会提示指定数量.</span><br><span class="line"># gluster volume create [disperse [&lt;count&gt;]] [redundancy &lt;count&gt;] [transport tcp | rdma | tcp,rdma]</span><br><span class="line"># 如下:提示使用redundancy.</span><br><span class="line">$ gluster volume create test-volume disperse 4 server&#123;1..4&#125;:/bricks/test-volume</span><br><span class="line">There isn&apos;t an optimal redundancy value for this configuration. Do you want to create the volume with redundancy 1 ? (y/n)</span><br></pre></td></tr></table></figure><h4 id="Distributed-Replicated"><a href="#Distributed-Replicated" class="headerlink" title="Distributed Replicated"></a>Distributed Replicated</h4><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180904114809633.png" alt="image-20180904114809633"></p><ul><li><p>优点</p><p>数据冗余,数据丢失后依然可用.</p></li><li><p>缺点</p><p>于Replica不同的是,冗余的数据存在随机性,不便于管理.另外,存储空间消耗大.</p></li></ul><p><strong>Note</strong>: - Make sure you start your volumes before you try to mount them or else client operations after the mount will hang.</p><ul><li><p>GlusterFS will fail to create a distribute replicate volume if more than one brick of a replica set is present on the same peer. For eg. for a four node distribute (replicated) volume where more than one brick of a replica set is present on the same peer.</p><p>☆ 这种类型的Volume,同样不能指定同一台机器,不然报错.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gluster volume create &lt;volname&gt; replica 4 server1:/brick1 server1:/brick2 server2:/brick3 server4:/brick4</span><br><span class="line">volume create: &lt;volname&gt;: failed: Multiple bricks of a replicate volume are present on the same server. This setup is not optimal. Use &apos;force&apos; at the end of the command if you want to override this behavior.</span><br></pre></td></tr></table></figure><p>这里指定了server1:/brick1和server1/brick2,所以报错,不能同时冗余一份到同一台机器.</p></li></ul><p>从执行指令上看,Relicated和Distributed Relicated是相同的.只是后面的节点数量多于replica的数量.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># gluster volume create [replica ] [transport tcp | rdma | tcp,rdma]</span><br><span class="line"># 这个执行结果结果就是上图所示.</span><br><span class="line">$ gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4</span><br><span class="line"># 如果指定6个节点,replica为2,则会随机选取2个节点存储数据,1个节点存储原数据,1个节点冗余数据.</span><br><span class="line">$ gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 server5:/exp5 server6:/exp6</span><br></pre></td></tr></table></figure><h4 id="Distributed-Dispersed"><a href="#Distributed-Dispersed" class="headerlink" title="Distributed Dispersed"></a>Distributed Dispersed</h4>]]></content>
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gluster Concept </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gluster安装</title>
      <link href="/blog/2018/08/20/Gluster%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/08/20/Gluster%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li>Centos 7</li><li>Gluster 4.1</li></ul><p>使用三台机器</p><ul><li>192.168.1.100 server1</li><li>192.168.1.101 server2</li><li>192.168.1.102 server3</li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>kubernetes的持久化需要使用gluster.这里基于Centos提供的Quick-Start教程验证后的记录.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="DNS和NTP"><a href="#DNS和NTP" class="headerlink" title="DNS和NTP"></a>DNS和NTP</h4><p>DNS如果没有特殊要求,采用默认配置即可,每台服务器对时间进行校对和统一时区.</p><h4 id="Hosts-Set"><a href="#Hosts-Set" class="headerlink" title="Hosts Set"></a>Hosts Set</h4><p>建议使用服务器名的方式管理gluster,则需要配置ip和名称的映射.每台机器都需要配置.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line">192.168.1.100 server1</span><br><span class="line">192.168.1.101 server2</span><br><span class="line">192.168.1.102 server3</span><br></pre></td></tr></table></figure><h3 id="Add-Yum-Repository"><a href="#Add-Yum-Repository" class="headerlink" title="Add Yum Repository"></a>Add Yum Repository</h3><p>添加gluster下载仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install centos-release-gluster</span><br></pre></td></tr></table></figure><h3 id="Use-XFS"><a href="#Use-XFS" class="headerlink" title="Use XFS"></a>Use XFS</h3><p>推荐使用XFS文件系统,这里我还是使用exts4,没有重新格式化文件系统.格式化参考教程网上很多.</p><h3 id="Install-Gluster-And-Start"><a href="#Install-Gluster-And-Start" class="headerlink" title="Install Gluster And Start"></a>Install Gluster And Start</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install glusterfs-server</span><br><span class="line">$ systemctl enable glusterd &amp;&amp; systemctl start glusterd</span><br></pre></td></tr></table></figure><h3 id="Set-Firewalld"><a href="#Set-Firewalld" class="headerlink" title="Set Firewalld"></a>Set Firewalld</h3><p>○  By default, glusterd will listen on tcp/24007. But each time you add a brick, it will open a new port (that you’ll be able to see with “gluster volume status”)</p><p>☆ 默认是24007端口,但是每增加brick都会新增监听端口,具体端口可以通过gluster volume status查看.不过在配置防火墙时,我使用授权ip方式.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这里的TCP Port指定的49152就是需要开放的端口.</span><br><span class="line">$ gluster volume status</span><br><span class="line">Status of volume: gv0</span><br><span class="line">Gluster process                             TCP Port  RDMA Port  Online  Pid</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Brick server1:/bricks/brick1/gv0            49152     0          Y       6566</span><br><span class="line">Brick server2:/bricks/brick1/gv0            49152     0          Y       26880</span><br><span class="line">Self-heal Daemon on localhost               N/A       N/A        Y       6590</span><br><span class="line">Self-heal Daemon on server2                 N/A       N/A        Y       26903</span><br><span class="line"></span><br><span class="line">Task Status of Volume gv0</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">There are no active volume tasks</span><br></pre></td></tr></table></figure><p>centos7默认使用firewalld,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 允许指定ip.我使用三台机器做测试,每台机器要配置另外两台服务器的ip.</span><br><span class="line">$ firewall-cmd --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;192.168.1.101&apos; accept&quot;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="Set-Trusted-Pool"><a href="#Set-Trusted-Pool" class="headerlink" title="Set Trusted Pool"></a>Set Trusted Pool</h3><p>这里使用三台机器,可以在任意一台服务器,将另外两台服务器添加到Trust Pool即可.</p><p>如在server1上将server2和server3添加到Trust Pool.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注:/etc/hosts需要配置映射.</span><br><span class="line">$ gluster peer probe server2</span><br><span class="line">$ gluster peer probe server3</span><br></pre></td></tr></table></figure><h3 id="Create-a-Volume"><a href="#Create-a-Volume" class="headerlink" title="Create a Volume"></a>Create a Volume</h3><p>在三台服务器上分别创建/bricks/brick1/gv0目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 官网推荐brick命名方式:/data/glusterfs/&lt;volume&gt;/&lt;brick&gt;/brick</span><br><span class="line">$ mkdir -p /bricks/brick1/gv0</span><br></pre></td></tr></table></figure><p>挂载目录到gluster上.(任意节点执行命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这里选择的replicas模式,保证数据丢失,其他模式不在这里讨论.</span><br><span class="line">$ gluster volume create gv0 replica 3 server1:/bricks/brick1/gv0 server2:/bricks/brick1/gv0 server3:/bricks/brick1/gv0</span><br><span class="line">$ gluster volume start gv0</span><br></pre></td></tr></table></figure><p>查看volume信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ gluster volume info</span><br><span class="line">Volume Name: gv0</span><br><span class="line">Type: Replicate</span><br><span class="line">Volume ID: 5835a014-b598-467d-ba34-3301d6730d6f</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 1 x 3 = 3</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: server1:/bricks/brick1/gv0</span><br><span class="line">Brick2: server2:/bricks/brick1/gv0</span><br><span class="line">Brick3: server3:/bricks/brick1/gv0</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line">performance.client-io-threads: off</span><br></pre></td></tr></table></figure><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将server1:/gv0 挂在到/mnt目录</span><br><span class="line">$ mount -t glusterfs server1:/gv0 /mnt</span><br><span class="line"># 生成100个copy-test的文件</span><br><span class="line">$ for i in `seq -w 1 100`; do cp -rp /var/log/messages /mnt/copy-test-$i; done</span><br><span class="line"># 在三台机器上查看是否都有100个文件.</span><br><span class="line">$ ls -lA /bricks/brick1/gv0</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>推荐部署机器为奇数,不然会出现脑裂现象.(猜测使用了poxis算法)</li><li>gluster推荐使用<a href="https://zh.wikipedia.org/wiki/XFS" target="_blank" rel="noopener">xfs文件系统</a>,centos/Red Hat Enterprise Linux 7默认使用,磁盘格式化时可能没有指定.</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li><a href="http://xiaqunfeng.cc/2017/07/06/XFS-vs-EXT4/" target="_blank" rel="noopener">XFS vs EXT4</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/ch-xfs" target="_blank" rel="noopener">THE XFS FILE SYSTEM</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="gluster-Quickstart"><a href="#gluster-Quickstart" class="headerlink" title="gluster-Quickstart"></a><a href="https://wiki.centos.org/SpecialInterestGroup/Storage/gluster-Quickstart" target="_blank" rel="noopener">gluster-Quickstart</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gluster Install </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes Pods指定镜像仓库</title>
      <link href="/blog/2018/08/15/Kubernetes-Pods%E6%8C%87%E5%AE%9A%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
      <url>/blog/2018/08/15/Kubernetes-Pods%E6%8C%87%E5%AE%9A%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>在创建pod时,image是从哪个仓库下载?应该如何指定公司的Regitry?最佳实践是什么?带着这些问题,记录自己的爬坑经历.</p><h2 id="镜像建议"><a href="#镜像建议" class="headerlink" title="镜像建议"></a>镜像建议</h2><ul><li>对每个镜像都指定明确的版本号(不要使用latest这样的版本号),减少去镜像仓库拉取的消耗.(可以学习kube的api,版本为X.Y.Z. X is the major version, Y is the minor version, and Z is the patch version) </li></ul><h2 id="使用镜像私仓"><a href="#使用镜像私仓" class="headerlink" title="使用镜像私仓"></a>使用镜像私仓</h2><ul><li><p>使用私仓时,需要配置认证信息.</p></li><li><p>pod中指定私仓优先级高于node指定私仓.</p></li></ul><h3 id="在node节点中配置-推荐"><a href="#在node节点中配置-推荐" class="headerlink" title="在node节点中配置(推荐)"></a>在node节点中配置(推荐)</h3><ul><li>与在每个pod中使用ImagePullSecrets相比,少了重复的配置代码.</li></ul><h4 id="配置认证信息"><a href="#配置认证信息" class="headerlink" title="配置认证信息"></a>配置认证信息</h4><ul><li>docker添加私仓认证信息,可参考<a href="https://docs.docker.com/engine/reference/commandline/login/#provide-a-password-using-stdin" target="_blank" rel="noopener">这里</a></li></ul><p>一般使用docker时,默认都是从docker hub上拉取镜像.正常拉取是不需要认证信息的,但在上传时需要认证信息.</p><p>在每个节点上配置登录认证信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 默认docker hub的地址是:https://index.docker.io/v1</span><br><span class="line">$ echo [密码] | docker login --username [用户名] --password-stdin [私仓服务器地址]</span><br><span class="line"># 认证后,会在$HOME/.docker/下生成config.json文件.如果指定退出则会删除该文件.</span><br></pre></td></tr></table></figure><h4 id="认证信息优先级"><a href="#认证信息优先级" class="headerlink" title="认证信息优先级"></a>认证信息优先级</h4><ul><li>{–root-dir:-/var/lib/kubelet}/config.json </li></ul><p>默认config.json不存在</p><ul><li>{cwd of kubelet}/config.json </li></ul><p>指定kubelet的工作空间路径,这种方式暂不考虑.</p><ul><li>${HOME}/.docker/config.json </li></ul><p>默认config.json是不存在的</p><ul><li>/.docker/config.json</li></ul><p>默认该目录不存在</p><h3 id="在pod中指定ImagePullSecrets"><a href="#在pod中指定ImagePullSecrets" class="headerlink" title="在pod中指定ImagePullSecrets"></a>在pod中指定ImagePullSecrets</h3><h4 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 实际上在pull镜像时创建一个虚拟的.docker/config.json文件.</span><br><span class="line">$ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL</span><br></pre></td></tr></table></figure><h4 id="pod中使用imagePulSecrets"><a href="#pod中使用imagePulSecrets" class="headerlink" title="pod中使用imagePulSecrets"></a>pod中使用imagePulSecrets</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: apps/v1 # 可以使用kubectl api-versions确定指定的版本</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: foo</span><br><span class="line">  namespace: awesomeapps</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: foo</span><br><span class="line">      image: janedoe/awesomeapp:v1</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">    - name: myregistryke</span><br></pre></td></tr></table></figure><p>以上两种方式,可以结合使用,建议每台node上都先配置认证信息,有需要再使用第二种方式.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a><a href="https://kubernetes.io/docs/concepts/containers/images/" target="_blank" rel="noopener">Images</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes配置私仓 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes之pause容器</title>
      <link href="/blog/2018/08/12/kubernetes%E4%B9%8Bpause%E5%AE%B9%E5%99%A8/"/>
      <url>/blog/2018/08/12/kubernetes%E4%B9%8Bpause%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>之前对于docker的理解就是容器,但什么是容器呢?这个也没有去思考,借助pause容器的说明,顺便梳理下docker容器是什么?<br>docker容器实际是利用Linux的namespace和cgroup达到容器化的目的.</p><h2 id="Two-feature-of-Linux-kernel"><a href="#Two-feature-of-Linux-kernel" class="headerlink" title="Two feature of Linux kernel"></a>Two feature of Linux kernel</h2><p>linux有两个重要的特性,namespace和cgroup(control group).他们用于对资源进行隔离.<br>打个比方,就像你去买商品房,每套都是用混泥土墙隔开,保证别人不会闯到你家.这个可以类比为cgroup,而cgroup就是linux对机器的物理资源(cpu,内存,磁盘io)的隔离.买完了房子,那产权当然是属于你,而不是别人(可能有小三),另外,住进去后你要用水、用电、用网络,对其他人也一样,但是每户各自结算,这就像linux环境中的user namespace、network namespace等,属于环境的隔离.<br>由于能力有限,只能先这么去理解.这里罗列左耳朵耗子的文章.</p><ul><li><a href="https://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">DOCKER基础技术：LINUX NAMESPACE（上）</a></li><li><a href="https://coolshell.cn/articles/17029.html" target="_blank" rel="noopener">DOCKER基础技术：LINUX NAMESPACE（下）</a></li><li><a href="https://coolshell.cn/articles/17049.html" target="_blank" rel="noopener">DOCKER基础技术：LINUX CGROUP</a></li></ul><h2 id="AUFS-、DEVICEMAPPER"><a href="#AUFS-、DEVICEMAPPER" class="headerlink" title="AUFS 、DEVICEMAPPER"></a>AUFS 、DEVICEMAPPER</h2><p>对于这两个的理解,AUFS是文件管理系统,用于对文件进行分层.<br>具体可以看耗子叔的这两篇文章.<br><a href="https://coolshell.cn/articles/17061.html" target="_blank" rel="noopener">DOCKER基础技术：AUFS</a><br><a href="https://coolshell.cn/articles/17200.html" target="_blank" rel="noopener">DOCKER基础技术：DEVICEMAPPER</a></p><h2 id="Pause"><a href="#Pause" class="headerlink" title="Pause"></a>Pause</h2><p>In Kubernetes, the pause container serves as the “parent container” for all of the containers in your pod. The pause container has two core responsibilities. First, it serves as the basis of Linux namespace sharing in the pod. And second, with PID (process ID) namespace sharing enabled, it serves as PID 1 for each pod and reaps zombie processes.<br>对于pause的理解</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="What-are-Kubernetes-Pods-Anyway"><a href="#What-are-Kubernetes-Pods-Anyway" class="headerlink" title="What are Kubernetes Pods Anyway?"></a><a href="https://www.ianlewis.org/en/what-are-kubernetes-pods-anyway" target="_blank" rel="noopener">What are Kubernetes Pods Anyway?</a></h3><h3 id="The-Almighty-Pause-Container"><a href="#The-Almighty-Pause-Container" class="headerlink" title="The Almighty Pause Container"></a><a href="https://www.ianlewis.org/en/almighty-pause-container" target="_blank" rel="noopener">The Almighty Pause Container</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes的pause容器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes常见问题汇总</title>
      <link href="/blog/2018/08/11/kubernetes%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/blog/2018/08/11/kubernetes%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h3 id="报错-etc-kubernetes-pki-ca-crt-already-exists"><a href="#报错-etc-kubernetes-pki-ca-crt-already-exists" class="headerlink" title="报错:/etc/kubernetes/pki/ca.crt already exists"></a>报错:/etc/kubernetes/pki/ca.crt already exists</h3><ul><li><p>错误描述<br>在node节点操作kubeadm join时报出的错误.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[preflight] Running pre-flight checks.</span><br><span class="line">        [WARNING FileExisting-crictl]: crictl not found in system path</span><br><span class="line">[preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR Port-10250]: Port 10250 is in use</span><br><span class="line">        [ERROR DirAvailable--etc-kubernetes-manifests]: /etc/kubernetes/manifests is not empty</span><br><span class="line">        [ERROR FileAvailable--etc-kubernetes-pki-ca.crt]: /etc/kubernetes/pki/ca.crt already exists</span><br><span class="line">        [ERROR FileAvailable--etc-kubernetes-kubelet.conf]: /etc/kubernetes/kubelet.conf already exists</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br></pre></td></tr></table></figure></li><li><p>解决方案:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm reset</span><br><span class="line"># 再次执行kubeadm join</span><br><span class="line">$ kubeadm join &lt;ip&gt;:&lt;port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;*******&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes Q&amp;A </tag>
            
            <tag> kubernetes常见问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes之master搭建.md</title>
      <link href="/blog/2018/08/09/kubernetes%E4%B9%8Bmaster%E6%90%AD%E5%BB%BA/"/>
      <url>/blog/2018/08/09/kubernetes%E4%B9%8Bmaster%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ul><li>环境: centos7, kubernetes 1.11.2, docker-ce-17.03.2.ce</li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>Kubernetes对于Master机器的配置最低的要求是2G内存和2 Core CPU.<br>使用kubeadm来安装master cluster.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>1个master,2个node<br>k8s-master-1<br>192.168.1.100<br>k8s-node-1<br>192.168.1.101<br>k8s-node-2<br>192.168.1.102</p><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="端口检查"><a href="#端口检查" class="headerlink" title="端口检查"></a>端口检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Master node(s)</span><br><span class="line">Protocol Direction Port Range Purpose</span><br><span class="line">TCP Inbound 6443* Kubernetes API server</span><br><span class="line">TCP Inbound 2379-2380 etcd server client API</span><br><span class="line">TCP Inbound 10250 Kubelet API</span><br><span class="line">TCP Inbound 10251 kube-scheduler</span><br><span class="line">TCP Inbound 10252 kube-controller-manager</span><br><span class="line">TCP Inbound 10255 Read-only Kubelet API</span><br><span class="line"># Worker node(s)</span><br><span class="line">Protocol Direction Port Range Purpose</span><br><span class="line">TCP Inbound 10250 Kubelet API</span><br><span class="line">TCP Inbound 10255 Read-only Kubelet API</span><br><span class="line">TCP Inbound 30000-32767 NodePort Services**</span><br></pre></td></tr></table></figure><h4 id="环境调整"><a href="#环境调整" class="headerlink" title="环境调整"></a>环境调整</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 关闭SELinux(临时)</span><br><span class="line">$ setenforce 0</span><br><span class="line"># 永久关闭SELinux</span><br><span class="line">$ vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># 关闭swap</span><br><span class="line">$ swapoff -a</span><br><span class="line"># 添加kubernetes的yum仓库,这里使用阿里云的.</span><br><span class="line">$ vim /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><h4 id="设置hosts"><a href="#设置hosts" class="headerlink" title="设置hosts"></a>设置hosts</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line">192.1.1.100 k8s-master-1 </span><br><span class="line">192.1.1.100 k8s-node-1 </span><br><span class="line">192.1.1.100 k8s-node-2</span><br></pre></td></tr></table></figure><h3 id="Install-kubeadm-kubectl-kubelet"><a href="#Install-kubeadm-kubectl-kubelet" class="headerlink" title="Install kubeadm kubectl kubelet"></a>Install kubeadm kubectl kubelet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubeadm kubectl kubelet</span><br></pre></td></tr></table></figure><h3 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h3><p>kubernetes v1.11.2建议是用的docker版本是17.03版本,这里安装过程忽略.</p><h3 id="下载k8s相关镜像"><a href="#下载k8s相关镜像" class="headerlink" title="下载k8s相关镜像"></a>下载k8s相关镜像</h3><p>由于在使用kubeadm init时,下载的镜像从k8s.gcr.io上下载,国内网络被墙了,这边只能曲线救国.</p><p>利用docker hub做中转(因为docker hub是在国外的).</p><p>具体操作是先在github上创建相关的Docekrfile,然后再在docker hub上创建auto build仓库.最后从自己的docker hub仓库下载镜像后,重命名为k8s.gcr.io/kube-scheduler-amd64:v1.11.2等即可.</p><p>这里有个镜像拉取脚本.</p><p>(注意:v1.11版本以后,DNS服务使用coredns:1.1.3,不再使用k8s-dns相关容器,即k8s-dns-sidecar,k8s-dns-kube-dns,k8s-dns-dnsmasq)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">images=(</span><br><span class="line">  kube-proxy-amd64:v1.11.2</span><br><span class="line">  kube-scheduler-amd64:v1.11.2</span><br><span class="line">  kube-controller-manager-amd64:v1.11.2</span><br><span class="line">  kube-apiserver-amd64:v1.11.2</span><br><span class="line">  etcd-amd64:3.2.18</span><br><span class="line">  pause:3.1</span><br><span class="line">  kubernetes-dashboard-amd64:v1.8.3</span><br><span class="line">  k8s-dns-sidecar-amd64:1.14.8</span><br><span class="line">  k8s-dns-kube-dns-amd64:1.14.8</span><br><span class="line">  k8s-dns-dnsmasq-nanny-amd64:1.14.8</span><br><span class="line">  coredns:1.1.3</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull jilingjun1014/$imageName</span><br><span class="line">  docker tag jilingjun1014/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi jilingjun1014/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="master初始化"><a href="#master初始化" class="headerlink" title="master初始化"></a>master初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># master初始化</span><br><span class="line">$ kubeadm init --kubernetes-version=v1.11.2 --pod-network-cidr=10.244.0.0/16</span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line">  kubeadm join 116.62.177.233:6443 --token mfv9of.3bo96kuhwiuf2sh5 --discovery-token-ca-cert-hash sha256:d04a7670ef39c41900ca142e807e96a326d6f37300076e94ce2bda4c0934ff52</span><br><span class="line"># 配置kubectl认证(官方推荐用非root用户,这里为了方便起见,使用root用户)</span><br><span class="line">$ mkdir -p ~/.kube</span><br><span class="line">$ cp -i /etc/kubernetes/admin.conf ~/.kube/config</span><br><span class="line"># 非root用户需要配置</span><br><span class="line">$ chown $(id -u):$(id -g) $HOME/.kube/config </span><br><span class="line"># root用户需要配置</span><br><span class="line">$ echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; /etc/profile $ source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="Pod网络设置-flannel网络设置"><a href="#Pod网络设置-flannel网络设置" class="headerlink" title="Pod网络设置(flannel网络设置)"></a>Pod网络设置(flannel网络设置)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /etc/cni/net.d/</span><br><span class="line">$ cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;flannel&quot;,</span><br><span class="line">  &quot;delegate&quot;: &#123;</span><br><span class="line">    &quot;isDefaultGateway&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF </span><br><span class="line">$ mkdir /run/flannel/</span><br><span class="line">$ cat &lt;&lt;EOF&gt; /run/flannel/subnet.env</span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.244.1.0/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=true</span><br><span class="line">EOF</span><br><span class="line"># 添加网络类型</span><br><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h4 id="检查master是否创建成功"><a href="#检查master是否创建成功" class="headerlink" title="检查master是否创建成功"></a>检查master是否创建成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ready全部为1/1表示成功</span><br><span class="line">$ kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE    NAME                  READY STATUS RESTARTS AGE</span><br><span class="line">kube-system coredns-78fcdf6894-cvrzg 1/1 Running 0 3h   # 1/1表示正常</span><br><span class="line">kube-system coredns-78fcdf6894-sc2zd 1/1 Running 0 3h  # 1/1表示正常</span><br><span class="line">kube-system etcd-k8s-master-1 1/1 Running 0 3h</span><br><span class="line">kube-system kube-apiserver-k8s-master-1 1/1 Running 0 3h</span><br><span class="line">kube-system kube-controller-manager-k8s-master-1 1/1 Running 0 3h</span><br><span class="line">kube-system kube-flannel-ds-2dzz9 1/1 Running 0 3h   # 1/1表示正常</span><br><span class="line">kube-system kube-proxy-zgbcp 1/1 Running 0 3h</span><br><span class="line">kube-system kube-scheduler-k8s-master-1 1/1 Running 0 3h</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有pod信息,需要使用--all-namespaces,不然默认参数是default</span><br><span class="line">$ kubectl get pod --all-namespaces</span><br><span class="line"># 查看节点信息</span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">k8s-master-1 Ready master 1d v1.11.1</span><br><span class="line">k8s-node-1 Ready &lt;none&gt; 2h v1.11.1</span><br><span class="line">k8s-node-2 Ready &lt;none&gt; 1d v1.11.1</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="使用-kubeadm-搭建-kubernetes-1-10-2-集群"><a href="#使用-kubeadm-搭建-kubernetes-1-10-2-集群" class="headerlink" title="使用 kubeadm 搭建 kubernetes 1.10.2 集群"></a><a href="https://maiyang.me/post/2018-05-15-use-kubeadm-install-kubernetes-1.10.2/" target="_blank" rel="noopener">使用 kubeadm 搭建 kubernetes 1.10.2 集群</a></h3><h3 id="利用docker-hub做中转拉取google的k8s镜像"><a href="#利用docker-hub做中转拉取google的k8s镜像" class="headerlink" title="利用docker hub做中转拉取google的k8s镜像"></a><a href="https://www.cnblogs.com/cuishuai/p/8483496.html" target="_blank" rel="noopener">利用docker hub做中转拉取google的k8s镜像</a></h3><h3 id="深入玩转K8S之使用kubeadm安装Kubernetes-v1-10以及常见问题解答"><a href="#深入玩转K8S之使用kubeadm安装Kubernetes-v1-10以及常见问题解答" class="headerlink" title="深入玩转K8S之使用kubeadm安装Kubernetes v1.10以及常见问题解答"></a><a href="http://blog.51cto.com/devingeng/2096495" target="_blank" rel="noopener">深入玩转K8S之使用kubeadm安装Kubernetes v1.10以及常见问题解答</a></h3>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes参考资料.md</title>
      <link href="/blog/2018/08/08/kubernetes%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
      <url>/blog/2018/08/08/kubernetes%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noopener">官方文档</a></h3><p>选择 Browse Docs</p><h3 id="Kubernetes中文社区"><a href="#Kubernetes中文社区" class="headerlink" title="Kubernetes中文社区"></a><a href="https://www.kubernetes.org.cn/" target="_blank" rel="noopener">Kubernetes中文社区</a></h3><h3 id="Api-Example"><a href="#Api-Example" class="headerlink" title="Api Example"></a><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11" target="_blank" rel="noopener">Api Example</a></h3><h3 id="Basic-Commond"><a href="#Basic-Commond" class="headerlink" title="Basic Commond"></a><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-getting-started-strong-" target="_blank" rel="noopener">Basic Commond</a></h3><h3 id="Kubernetes中文指南"><a href="#Kubernetes中文指南" class="headerlink" title="Kubernetes中文指南"></a><a href="https://jimmysong.io/kubernetes-handbook/" target="_blank" rel="noopener">Kubernetes中文指南</a></h3><h3 id="Istio"><a href="#Istio" class="headerlink" title="Istio"></a><a href="http://www.servicemesher.com/blog/securing-ingress-services-in-istio-with-lets-encrypt-on-kubernetes/" target="_blank" rel="noopener">Istio</a></h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="什么是pause容器"><a href="#什么是pause容器" class="headerlink" title="什么是pause容器?"></a><a href="https://www.ianlewis.org/en/what-are-kubernetes-pods-anyway" target="_blank" rel="noopener">什么是pause容器?</a></h4>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes参考资料 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes之kubeadm安装.md</title>
      <link href="/blog/2018/08/08/Kubernetes%E4%B9%8Bkubeadm%E5%AE%89%E8%A3%85-md/"/>
      <url>/blog/2018/08/08/Kubernetes%E4%B9%8Bkubeadm%E5%AE%89%E8%A3%85-md/</url>
      <content type="html"><![CDATA[<ul><li>环境: Centos7, Kubernetes 1.11.2, docker-ce 17.03</li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>Kubernetes安装文档.</p><p>这里是一些安装软件的</p><ul><li><p>kubeadm: the command to bootstrap the cluster.</p></li><li><p>kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.</p></li><li><p>kubectl: the command line util to talk to your cluster.</p></li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="添加yum仓库配置文件"><a href="#添加yum仓库配置文件" class="headerlink" title="添加yum仓库配置文件"></a>添加yum仓库配置文件</h4><p>官方推荐的使用的packages.cloud.google.com地址不通,这里使用阿里云的yum仓库.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line"></span><br><span class="line">name=Kubernetes</span><br><span class="line"></span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line"></span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">repo_gpgcheck=0</span><br><span class="line"></span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line"></span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 临时关闭</span><br><span class="line"></span><br><span class="line">$ setenforce 0</span><br><span class="line"></span><br><span class="line"># 保证下次机器重启时生效.</span><br><span class="line"></span><br><span class="line">$ vim /etc/selinux/config</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h4 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ vim cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ sysctl --system</span><br></pre></td></tr></table></figure><h4 id="关闭系统swap"><a href="#关闭系统swap" class="headerlink" title="关闭系统swap"></a>关闭系统swap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br></pre></td></tr></table></figure><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>此处忽略,查看docker官方安装教程即可.</p><h3 id="Install-Master"><a href="#Install-Master" class="headerlink" title="Install Master"></a>Install Master</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">$ systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubeadm安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blackbox_exporter之安装</title>
      <link href="/blog/2018/08/06/Blackbox-exporter%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/08/06/Blackbox-exporter%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ul><li>环境:centos7, blackbox_exporter 0.12.0</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里使用blackbox_exporter的ssh和ping的检测功能.</p><h2 id="Build-with-Binary-And-Config-Systemd"><a href="#Build-with-Binary-And-Config-Systemd" class="headerlink" title="Build with Binary And Config Systemd"></a>Build with Binary And Config Systemd</h2><h3 id="Build-with-Binary"><a href="#Build-with-Binary" class="headerlink" title="Build with Binary"></a>Build with Binary</h3><ul><li><a href="https://prometheus.io/download/" target="_blank" rel="noopener">Download</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.12.0/blackbox_exporter-0.12.0.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf blackbox_exporter-0.12.0.linux-amd64.tar.gz &amp;&amp; mv blackbox_exporter-0.12.0.linux-amd64 blackbox_exporter-0.12.0</span><br></pre></td></tr></table></figure></li></ul><h3 id="Config-blackbox-yml"><a href="#Config-blackbox-yml" class="headerlink" title="Config blackbox.yml"></a>Config blackbox.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /opt/blackbox_exporter-0.12.0/blackbox.yml</span><br><span class="line">modules:</span><br><span class="line">  ssh_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    timeout: 15s</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - expect: &quot;^SSH-2.0-&quot;</span><br><span class="line">  icmp:</span><br><span class="line">    prober: icmp</span><br><span class="line">    timeout: 5s</span><br><span class="line">    icmp:</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot;</span><br></pre></td></tr></table></figure><h3 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/blackbox.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=blackbox.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/blackbox_exporter-0.12.0/blackbox_exporter --config.file=/opt/blackbox_exporter-0.12.0/blackbox.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable blackbox &amp;&amp; systemctl start blackbox</span><br></pre></td></tr></table></figure><h3 id="Test-blackbox"><a href="#Test-blackbox" class="headerlink" title="Test blackbox"></a>Test blackbox</h3><p>在浏览器中查看:<a href="http://10.1.1.26:9115" target="_blank" rel="noopener">http://10.1.1.26:9115</a></p><h2 id="Build-with-Docker"><a href="#Build-with-Docker" class="headerlink" title="Build with Docker"></a>Build with Docker</h2>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blackbox_exporter安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>altermanager使用</title>
      <link href="/blog/2018/08/05/altermanager%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/blog/2018/08/05/altermanager%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul><li>环境:centos7, alertmanager 0.15.1</li><li><a href="https://github.com/prometheus/alertmanager" target="_blank" rel="noopener">github</a></li></ul><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><ul><li><p>What</p><p>○  The Alertmanager handles alerts sent by client applications such as the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integration such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.</p><p>☆ Alertmanager用于接收报警信息并发送报警信息,经常和prometheus结合使用.它提供对报警信息分组、去重,并发送到指定的接收方,如email等.它同样关注沉默报警和抑制报警.</p><p>什么是沉默报警?</p><p>什么是抑制报警?</p></li></ul><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><h3 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h3><p>○ Grouping categorizes alerts of similar nature into a single notification. This is especially useful during larger outages when many systems fail at once and hundreds to thousands of alerts may be firing simultaneously.</p><p>☆ 报警信息分组合并.这个比较好理解,如果同时有100台机器有问题,你肯定不希望收到100封邮件.grouping就是将这些分组合并.这样只要收到1封邮件,里面有100台机器的报警信息.</p><h3 id="Inhibition"><a href="#Inhibition" class="headerlink" title="Inhibition"></a>Inhibition</h3><p>○ Inhibition is a concept of suppressing notifications for certain alerts if certain other alerts are already firing.</p><p>☆ </p><h2 id="Execute-Alertmanager"><a href="#Execute-Alertmanager" class="headerlink" title="Execute Alertmanager"></a>Execute Alertmanager</h2><h3 id="Build-with-Binary-and-Config-Systemd"><a href="#Build-with-Binary-and-Config-Systemd" class="headerlink" title="Build with Binary and Config Systemd"></a>Build with Binary and Config Systemd</h3><h4 id="Build-Binary"><a href="#Build-Binary" class="headerlink" title="Build Binary"></a>Build Binary</h4><ul><li><a href="https://prometheus.io/download/" target="_blank" rel="noopener">Download</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装在/opt下.下载地址prometheus官网有提供.</span><br><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/alertmanager/releases/download/v0.15.1/alertmanager-0.15.1.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf alertmanager-0.15.1.linux-amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">$ mv alertmanager-0.15.1.linux-amd64 alertmanager-0.15.1</span><br></pre></td></tr></table></figure></li></ul><h4 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/alertmanager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=alertmanager.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/alertmanager-0.15.1/alertmanager --config.file=/opt/alertmanager-0.15.1/alertmanager.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable alertmanager &amp;&amp; systemctl start alertmanager</span><br></pre></td></tr></table></figure><h3 id="Build-with-Docker"><a href="#Build-with-Docker" class="headerlink" title="Build with Docker"></a>Build with Docker</h3><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li><a href="https://prometheus.io/docs/alerting/configuration/" target="_blank" rel="noopener">alertmanager.yml example</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">$ vim /opt/alertmanager-0.15.1/alertmanager.yml</span><br><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_smarthost: &apos;smtp.mxhichina.com:25&apos;</span><br><span class="line">  smtp_from: &apos;xiaoxiangyoupin@basestonedata.com&apos;</span><br><span class="line">  smtp_auth_username: &apos;xiaoxiangyoupin@basestonedata.com&apos;</span><br><span class="line">  smtp_auth_password: &apos;Xiaoxiangyoupin1&apos;</span><br><span class="line">templates:</span><br><span class="line">  - &apos;/tmp/alert_test.txt&apos; # 发送消息模版.</span><br><span class="line">route:</span><br><span class="line">  group_by: [&apos;proxy&apos;]</span><br><span class="line">  group_wait: 10s</span><br><span class="line">  group_interval: 20s</span><br><span class="line">  repeat_interval: 5m # 警告发送成功后,等待该配置时间后才再次发送.</span><br><span class="line">  receiver: &apos;proxy-team&apos;</span><br><span class="line"># 以上配置会被routes标签继承或覆盖.</span><br><span class="line">#  routes: </span><br><span class="line">receivers: # 接收方集合</span><br><span class="line">- name: &apos;proxy-team&apos;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &apos;363054731@qq.com,jiangwe@basestonedata.com&apos;</span><br><span class="line">    text: &apos;报警&apos;</span><br><span class="line"># 防止过度报警.</span><br><span class="line">#inhibit_rules:</span><br><span class="line">#  - source_match:</span><br><span class="line">#      severity: &apos;critical&apos;</span><br><span class="line">#    target_match:</span><br><span class="line">#      severity: &apos;warning&apos;</span><br><span class="line">#    equal: [&apos;alertname&apos;, &apos;dev&apos;, &apos;instance&apos;]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alertmanager使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus之监测服务器心跳</title>
      <link href="/blog/2018/08/04/prometheus%E4%B9%8B%E7%9B%91%E6%B5%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%83%E8%B7%B3/"/>
      <url>/blog/2018/08/04/prometheus%E4%B9%8B%E7%9B%91%E6%B5%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%83%E8%B7%B3/</url>
      <content type="html"><![CDATA[<ul><li>环境:centos7, prometheus 2.3.1, blackbox_export 0.12.0</li><li>其他<a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">exporter</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>blackbox能支持什么协议:HTTP, HTTPS (via the http prober), DNS, TCP socket and ICMP.<br>对于机器可用性的监测,最简单的莫过于使用ping或者ssh的方式.这里使用blackbox_exporter,基于使用node_exporter的经验,可能会认为需要将blackbox_exporter部署到每个节点下,而实际上通过一个部署了blackbox_exporter的节点去检测其他机器.</p><p><img src="file:///var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/WizNote/df0296f8-6c9a-4642-991a-8b3679667974/index_files/82906877.png" alt="img"></p><h2 id="Execute-blackbox-exporter"><a href="#Execute-blackbox-exporter" class="headerlink" title="Execute blackbox_exporter"></a>Execute blackbox_exporter</h2><h3 id="Build-with-Binary-and-Config-Systemd"><a href="#Build-with-Binary-and-Config-Systemd" class="headerlink" title="Build with Binary and Config Systemd"></a>Build with Binary and Config Systemd</h3><h4 id="Build-Binary"><a href="#Build-Binary" class="headerlink" title="Build Binary"></a>Build Binary</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># prometheus官网有下载地址</span><br><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.12.0/blackbox_exporter-0.12.0.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf blackbox_exporter-0.12.0.linux-amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">$ mv blackbox_exporter-0.12.0.linux-amd64 blackbox_exporter-0.12.0</span><br></pre></td></tr></table></figure><h4 id="Config-Systemd"><a href="#Config-Systemd" class="headerlink" title="Config Systemd"></a>Config Systemd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/blackbox.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=blackbox.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/blackbox_exporter-0.12.0/blackbox_exporter --config.file=/opt/blackbox_exporter-0.12.0/blackbox.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable blackbox &amp;&amp; systemctl start blackbox</span><br></pre></td></tr></table></figure><h3 id="Build-with-Docker"><a href="#Build-with-Docker" class="headerlink" title="Build with Docker"></a>Build with Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pwd指定宿主机配置文件路径,我一般都放在/data/blackbox_exporter/config目录下</span><br><span class="line">$ docker build -t blackbox_exporter .</span><br><span class="line">$ docker run -d -p 9115:9115 --name blackbox_exporter -v `pwd`:/config blackbox_exporter --config.file=/config/blackbox.yml</span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li><a href="https://github.com/prometheus/blackbox_exporter/blob/master/example.yml" target="_blank" rel="noopener">blackbox_exporter example.yml</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 这里暂时只使用ping和ssh验证主机有效性的方式,其他配置可参看github上的example.yml</span><br><span class="line">$ vim blackbox.yml</span><br><span class="line"># probe探测频率由prometheus中的scripe_timeout决定.</span><br><span class="line">modules:</span><br><span class="line">  ssh_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    timeout: 10s # 每次探测的网络超时时间,默认为10秒</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - expect: &quot;^SSH-2.0-&quot;</span><br><span class="line">  icmp:</span><br><span class="line">    prober: icmp</span><br><span class="line">    timeout: 10s</span><br><span class="line">    icmp:</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Test-Blackbox-Exporter"><a href="#Test-Blackbox-Exporter" class="headerlink" title="Test Blackbox Exporter"></a>Test Blackbox Exporter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 测试目标10.1.1.21的ping信息</span><br><span class="line">$ curl http://10.1.1.26:9115/probe\?module\=icmp\&amp;target\=10.1.1.25</span><br><span class="line">......</span><br><span class="line">probe_success 0  # 目标主机ping失败</span><br><span class="line"># 测试目标10.1.1.21 22的ssh信息</span><br><span class="line">$ curl http://10.1.1.26:9115/probe\?module\=ssh_banner\&amp;target\=10.1.1.21:22</span><br><span class="line">......</span><br><span class="line">probe_success 1  # 目标主机ssh通过</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="blackbox-exporter-github"><a href="#blackbox-exporter-github" class="headerlink" title="blackbox_exporter github"></a><a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="noopener">blackbox_exporter github</a></h3><h3 id="用Prometheus进行网络质量ping"><a href="#用Prometheus进行网络质量ping" class="headerlink" title="用Prometheus进行网络质量ping"></a><a href="https://www.iamle.com/archives/2130.html" target="_blank" rel="noopener">用Prometheus进行网络质量ping</a></h3>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus服务器心跳监测 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus配置zookeeper服务发现机制</title>
      <link href="/blog/2018/08/03/prometheus%E9%85%8D%E7%BD%AEzookeeper%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/08/03/prometheus%E9%85%8D%E7%BD%AEzookeeper%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<ul><li>环境:zookeeper 3.4.12, prometheus 2.3.1, centos7.3,node_exporter 0.16.0</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>prometheus监听时,一般时配置到prometheus.yml中.机器数量少还好,如果机器数量大,每次改动再重启,简直就是个噩梦.还好它支持服务发现.<br>如何文件、consul、zookeeper等.具体可以查看<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#%3Cazure_sd_config%3E" target="_blank" rel="noopener">官网配置</a>说明.</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><h4 id="服务器及软件安装"><a href="#服务器及软件安装" class="headerlink" title="服务器及软件安装"></a>服务器及软件安装</h4><p>服务器    安装软件<br>10.1.1.25    prometheus,zookeeper<br>10.1.1.21<br>10.1.1.22<br>10.1.1.23    node_exporter<br>安装过程不在累述,自行百度即可.</p><h3 id="Config-Prometheus-yml"><a href="#Config-Prometheus-yml" class="headerlink" title="Config Prometheus.yml"></a>Config Prometheus.yml</h3><p>现在我需要监听118.10.2.34服务器中的3台虚拟机10.1.1.21:9100,10.1.1.22:9100,10.1.1.23:9100<br>zookeeper中的路径设置如下:<br>/proxy/118.10.2.34:22/10.1.1.21:9100<br>/proxy/118.10.2.34:22/10.1.1.22:9100<br>/proxy/118.10.2.34:22/10.1.1.23:9100</p><h4 id="promethues-yml"><a href="#promethues-yml" class="headerlink" title="promethues.yml"></a>promethues.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;proxy&apos;</span><br><span class="line">    honor_labels: true</span><br><span class="line">    serverset_sd_configs:</span><br><span class="line">    - servers:</span><br><span class="line">      - &apos;10.1.1.25:2181&apos; </span><br><span class="line">      paths:</span><br><span class="line">      - &apos;/proxy&apos;</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [&apos;__meta_serverset_path&apos;]    # 待抓取的服务器集合路径</span><br><span class="line">      regex: &apos;^/proxy/([^/]+)/([^/]+)&apos;                       # 路径匹配规则</span><br><span class="line">      target_label: &apos;meta_ip&apos;</span><br><span class="line">      replacement: &apos;$&#123;1&#125;&amp;$&#123;2&#125;&apos;</span><br><span class="line">    - source_labels: [&apos;meta_ip&apos;]</span><br><span class="line">      regex: &apos;(\d+.\d+.\d+.\d+):(\d+)&amp;(\d+.\d+.\d+.\d+):(\d+)&apos;  # 解析出ip</span><br><span class="line">      target_label: &apos;__address__&apos;</span><br><span class="line">      replacement: &apos;$&#123;1&#125;:$&#123;2&#125;&apos;   # 设置监听的服务器ip</span><br><span class="line">    - source_labels: [&apos;meta_ip&apos;]</span><br><span class="line">      regex: &apos;(\d+.\d+.\d+.\d+):(\d+)&amp;(\d+.\d+.\d+.\d+):(\d+)&apos;</span><br><span class="line">      target_label: &apos;machine&apos;    # 设置所属服务器,用于标识作用,便于以后分组</span><br><span class="line">      replacement: &apos;$&#123;3&#125;:$&#123;4&#125;&apos;</span><br></pre></td></tr></table></figure><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><p>zookeeper中的节点,如10.1.1.26:9100其值必须设置为json格式,可以简单设置为{},否则prometheus不能解析到该节点.</p><h3 id="效果检查"><a href="#效果检查" class="headerlink" title="效果检查"></a>效果检查</h3><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180828174240863.png" alt="image-20180828174240863"></p><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/image-20180828174254140.png" alt="image-20180828174254140"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="Prometheus-Configuration"><a href="#Prometheus-Configuration" class="headerlink" title="Prometheus Configuration"></a><a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#%3Cserverset_sd_config%3E" target="_blank" rel="noopener">Prometheus Configuration</a></h3><h3 id="ZooKeeper-serverset-discovery-Issues"><a href="#ZooKeeper-serverset-discovery-Issues" class="headerlink" title="ZooKeeper serverset discovery Issues"></a><a href="https://github.com/prometheus/prometheus/issues/2758" target="_blank" rel="noopener">ZooKeeper serverset discovery Issues</a></h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><h4 id="Prometheus-Node-exporter"><a href="#Prometheus-Node-exporter" class="headerlink" title="Prometheus/Node_exporter"></a><a href="https://prometheus.io/download/" target="_blank" rel="noopener">Prometheus/Node_exporter</a></h4><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a><a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">Zookeeper</a></h4>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus服务发现 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prometheus技术视图</title>
      <link href="/blog/2018/08/02/prometheus%E5%85%A5%E9%97%A8/"/>
      <url>/blog/2018/08/02/prometheus%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuzm0y206ej30kw08ljrx.jpg" alt="Prometheus技术视图"></p><h2 id="Foreward"><a href="#Foreward" class="headerlink" title="Foreward"></a>Foreward</h2><p>在学习每个新技术之前,都有必要弄懂以下6个问题(左耳朵耗子学习模版):</p><ul><li>这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题</li><li>这个技术的优势和劣势分别是什么,或者说这个技术的 trade-off 是什么。任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题.</li><li>适用的场景(业务场景或技术场景)</li><li>它的组成部分和关键点</li><li>它的底层原理和关键实现</li><li>已有的实现和它之间的对比</li></ul><p>由于最近在搞代理,需要一个监控和报警来保证稳定性.我的需求也很简单,监控500+主机是否存活(通过ping或ssh的方式检测),如果出现问题,立马报警.</p><p>其实官网已经说的很明白了,我也没必要重复搬运,这里只记录自己的使用和比较关注的信息.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">官网</a></li><li>博客<ul><li><a href="https://en.fabernovel.com/insights/tech-en/alerting-in-prometheus-or-how-i-can-sleep-well-at-night" target="_blank" rel="noopener">https://en.fabernovel.com/insights/tech-en/alerting-in-prometheus-or-how-i-can-sleep-well-at-night</a></li><li><a href="http://ylzheng.com/archives/" target="_blank" rel="noopener">Yunlong blog</a></li><li><a href="https://www.slideshare.net/leecalcote/understanding-and-extending-prometheus-alertmanager" target="_blank" rel="noopener">https://www.slideshare.net/leecalcote/understanding-and-extending-prometheus-alertmanager</a></li><li><a href="https://kairen.github.io/2018/06/29/devops/prometheus-federation/" target="_blank" rel="noopener">了解 Prometheus Federation 功能</a></li><li>[使用Prometheus+grafana打造高逼格监控平台](<a href="http://blog.51cto.com/youerning/2050543" target="_blank" rel="noopener">http://blog.51cto.com/youerning/2050543</a></li><li><a href="https://github.com/1046102779/prometheus" target="_blank" rel="noopener">Prometheus 非官方中文手册</a></li><li><a href="https://zhuanlan.zhihu.com/p/24811652" target="_blank" rel="noopener">基于Prometheus的分布式在线服务监控实践</a></li></ul></li></ul><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li>prometheus 2.3.1</li><li>blackbox_exporter 0.12.0</li><li>alertmanager 0.15.1</li><li>centos 7</li></ul><h2 id="Notices"><a href="#Notices" class="headerlink" title="Notices"></a>Notices</h2><ul><li>Prometheus即是一个CPU密集型（查询）也是一个IO密集型（数据落地）的，CPU数量是多多益善，内存越大越好（来缓存抓取的数据，所以应该减少不必要的业务数据导出），尽量要使用SSD（这个很关键！），因为一旦Prometheus的内存使用量达到阈值会停止抓取数据！这个停止抓取的时间，至少是分钟级，甚至是无法恢复！所以只要有条件就要用SSD.</li></ul><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h4 id="部署测试场景"><a href="#部署测试场景" class="headerlink" title="部署测试场景"></a>部署测试场景</h4><p>Config prometheus.yml</p><p>blackbox_exporter和alertmanager的安装可以参见另外两篇文章《alertmanager之初体验》、《blackbox_exporter之安装》</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 由于机器数量较多,使用prometheus的服务发现,将所有机器配置到单独的文件中.</span><br><span class="line">$ vim /opt/machine.json</span><br><span class="line">[</span><br><span class="line"> &#123;&quot;targets&quot;:[&quot;122.227.184.61:20065&quot;],&quot;labels&quot;:&#123;&quot;machineName&quot;:&quot;guangzhou77d9&quot;&#125;&#125;,</span><br><span class="line">&#123;&quot;targets&quot;:[&quot;122.227.184.61:20063&quot;],&quot;labels&quot;:&#123;&quot;machineName&quot;:&quot;guangzhou77d8&quot;&#125;&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"># 配置prometheus.yml</span><br><span class="line">$ vim /opt/prometheus-2.3.1/prometheus.yml</span><br><span class="line">global:</span><br><span class="line">  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets: [&quot;10.1.1.26:9093&quot;]  # alertmanager的地址.</span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;/opt/proxy_rules.yml&quot;  # 规则文件.</span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&apos;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &apos;machine_heart&apos;</span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [ssh_banner]</span><br><span class="line">    file_sd_configs:</span><br><span class="line">    - files: [&apos;/opt/machine.json&apos;]   # 机器地址列表文件</span><br><span class="line">      refresh_interval: 5m</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels: [address]</span><br><span class="line">      regex: (.*)</span><br><span class="line">      replacement: $&#123;1&#125;</span><br><span class="line">      target_label: __param_target  # 请求http://10.1.1.26:9155的请求参数target</span><br><span class="line">    - source_labels: [__param_target]</span><br><span class="line">      target_label: instance</span><br><span class="line">    - target_label: address</span><br><span class="line">      replacement: 10.1.1.26:9115  # blackbox_exporter的地址.</span><br></pre></td></tr></table></figure><p>Config rules.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /opt/proxy_rules.yml</span><br><span class="line">groups:</span><br><span class="line">  - name: machine_heart</span><br><span class="line">    rules:</span><br><span class="line">    - alert: &apos;ssh&apos;</span><br><span class="line">      expr: probe_success&#123;job=&quot;machine_heart&quot;&#125; &lt; 1</span><br><span class="line">      for: 1m</span><br><span class="line">      labels:</span><br><span class="line">        severity: critical</span><br><span class="line">      # team: &apos;proxy-team&apos;</span><br><span class="line">      annotations:</span><br><span class="line">        summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; down.&quot;</span><br><span class="line">        description: &quot;&#123;&#123; $labels.instance &#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has been down for more than 1 minutes.&quot;</span><br></pre></td></tr></table></figure><p>Config Systemd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/prometheus.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=prometheus.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/prometheus-2.3.1/prometheus --config.file=/opt/prometheus-2.3.1/prometheus.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"># 启动</span><br><span class="line">$ systemctl enable prometheus &amp;&amp; systemctl start prometheus</span><br></pre></td></tr></table></figure><h4 id="常规部署"><a href="#常规部署" class="headerlink" title="常规部署"></a>常规部署</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># prometheus官网有下载地址</span><br><span class="line">$ cd /opt</span><br><span class="line">$ wget https://github.com/prometheus/prometheus/releases/download/v2.3.2/prometheus-2.3.2.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf prometheus-2.3.2.linux-amd64.tar.gz</span><br><span class="line"># 重命名</span><br><span class="line">$ mv prometheus-2.3.2.linux-amd64 prometheus-2.3.2</span><br></pre></td></tr></table></figure><h4 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h4><h4 id="Ansible-playbook部署"><a href="#Ansible-playbook部署" class="headerlink" title="Ansible-playbook部署"></a>Ansible-playbook部署</h4><h4 id="Test-Prometheus"><a href="#Test-Prometheus" class="headerlink" title="Test Prometheus"></a>Test Prometheus</h4><h3 id="关联组件"><a href="#关联组件" class="headerlink" title="关联组件"></a>关联组件</h3>]]></content>
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus入门 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自动化运维工具之OpsManage安装</title>
      <link href="/blog/2018/05/24/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7%E4%B9%8BOpsManage%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/05/24/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7%E4%B9%8BOpsManage%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ul><li>环境: centos7,opsmanage v2.2.1</li><li><a href="https://github.com/welliamcao/OpsManage" target="_blank" rel="noopener">OpsManage github</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>]]></content>
      
      <categories>
          
          <category> 自动化运维工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化运维工具之OpsManage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>架构之定义</title>
      <link href="/blog/2018/05/02/%E6%9E%B6%E6%9E%84%E4%B9%8B%E5%AE%9A%E4%B9%89/"/>
      <url>/blog/2018/05/02/%E6%9E%B6%E6%9E%84%E4%B9%8B%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h2 id="架构之定义"><a href="#架构之定义" class="headerlink" title="架构之定义"></a>架构之定义</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前嘴里常说架构师,但并没有去细究它的具体含义.偶然间看到别人分享了极客时间的《从0开始学架构》专栏.读了架构到底是什么这篇文章后,发现自己从来都没有思考过.(人最怕的就是<strong><em>不知道自己不知道</em></strong>)赶紧学习充电.</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><strong>架构:软件系统的顶层结构.</strong>(引用文章的结论).没有知识体系,理解这些概念真的很难.没办法,只能尝试去理解,强行记忆了.</p><p>想要理解,需要几个概念进行比较理解.</p><ul><li><p>系统与子系统</p><p>一些独立的“个体”,互相关联和协作.(个体可以是组件、子系统、模块)</p></li></ul><ul><li><p>模块与组件</p><p>模块是从逻辑角度理解,进行职责上的划分.</p><p>组件是从物理角度理解,便于复用.</p></li><li><p>框架</p><p>1、组件规范;</p><p>2、提供基础功能产品;</p></li></ul><p>架构需要明确系统包含哪些“个体”,并且需要明确个体运作和协作的规则.</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqwsgmsqhoj31cg0rkgoo.jpg" alt="66091B87-6F9C-4FAD-934A-C3472C2FB399"></p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构定义 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elasticsearch之基本命令</title>
      <link href="/blog/2018/04/24/elasticsearch%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2018/04/24/elasticsearch%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>环境：Mac 10.13.4 、elasticsearch 5.5.1、jdk8</li></ul><h2 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ put http://[ip]:[port]/[索引名]</span><br><span class="line">## 创建时指定分片（3个主分片，2个副本分片）</span><br><span class="line">参数:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot; : &#123;</span><br><span class="line">    &quot;index&quot; : &#123;&quot;number_of_shards&quot; : 3, &quot;number_of_replicas&quot; : 2&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">## 修改副本分片</span><br><span class="line">$ put http://[ip]:[port]/[索引名]/_settings</span><br><span class="line">参数:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;number_of_replicas&quot; : 1&#125;</span><br><span class="line">&#125;</span><br><span class="line">## 创建索引，并添加log类型，字段为message，字段类型为string（已存在索引会失败）</span><br><span class="line">$ put http://[ip]:[port]/[索引名]</span><br><span class="line">参数：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; &#123;</span><br><span class="line">        &quot;message&quot; :&#123;&quot;type&quot; : &quot;string&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ get http://[ip]:[port]/[索引名]/[_mapping,_settings,_aliase]</span><br><span class="line">&#123;</span><br><span class="line">  &quot;[索引名]&quot;: &#123;</span><br><span class="line">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;creation_date&quot;: &quot;1524617001036&quot;,</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;jk7IHv-jQpyd4jwOeo86ag&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;5050199&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;[索引名]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ delete http://[ip]:[port]/[索引名],[索引名],...</span><br><span class="line">或者使用_all或*删除全部索引（注意：务必要在配置文件中禁用 action.destructive_requires_name:true）</span><br></pre></td></tr></table></figure><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><h4 id="修改索引副本数量"><a href="#修改索引副本数量" class="headerlink" title="修改索引副本数量"></a>修改索引副本数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ put http://[ip]:[port]/[索引名]/_settings</span><br><span class="line">参数:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;number_of_replicas&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打开-关闭索引"><a href="#打开-关闭索引" class="headerlink" title="打开/关闭索引"></a>打开/关闭索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 因为关闭索引磁盘空间并不会释放，造成磁盘空间浪费，因此一般禁用该功能，settings,cluster.indices.close.enable:false</span><br><span class="line">$ post http://[ip]:[port]/[索引名]/[_open,_close]</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## name为对象类型（Object datatype）</span><br><span class="line">$ put http://[ip]:[port]/[索引名]/_mappings/user</span><br><span class="line">参数：</span><br><span class="line">&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;last&quot;: &#123;&quot;type&quot; : &quot;string&quot;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;user_id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">## 添加文档</span><br><span class="line">$ put/post http://[ip]:[port]/[索引名]/[类型]/[_id] </span><br><span class="line">参数：&#123;&quot;computer&quot;:&quot;huawei&quot;&#125;</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;index1_test&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">&quot;_version&quot;: 1,</span><br><span class="line">&quot;result&quot;: &quot;created&quot;,</span><br><span class="line">&quot;_shards&quot;: &#123; &quot;total&quot;: 2,&quot;successful&quot;: 1,&quot;failed&quot;: 0&#125;,</span><br><span class="line">&quot;created&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">## 删除文档</span><br><span class="line">$ delete http://[ip]:[port]/[索引名]/[类型]/[_id]</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;found&quot;: true,</span><br><span class="line">&quot;_index&quot;: &quot;index1_test&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">&quot;_version&quot;: 2,</span><br><span class="line">&quot;result&quot;: &quot;deleted&quot;,</span><br><span class="line">&quot;_shards&quot;: &#123; &quot;total&quot;: 2,&quot;successful&quot;: 1,&quot;failed&quot;: 0&#125;</span><br><span class="line">&#125;</span><br><span class="line">## 修改文档</span><br><span class="line">$ post http://[ip]:[port]/[索引名]/[类型]/[_id]/_update</span><br><span class="line">参数：</span><br><span class="line">&#123;</span><br><span class="line">&quot;doc&quot; : &#123;</span><br><span class="line">  &quot;computer&quot; : &quot;apple&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">## 查询文档</span><br><span class="line">$ get http://[ip]:[port]/[索引名]/[类型]/[_id]</span><br><span class="line">返回值：</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;index1_test&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;test1&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;100&quot;,</span><br><span class="line">&quot;_version&quot;: 2,</span><br><span class="line">&quot;found&quot;: true,</span><br><span class="line">&quot;_source&quot;: &#123; &quot;computer&quot;: &quot;apple&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">真的如上面这么简单，就不是es了。=!=</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> elaticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch基本命令 </tag>
            
            <tag> es基本命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swagger注解说明</title>
      <link href="/blog/2018/04/10/Swagger%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
      <url>/blog/2018/04/10/Swagger%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="Swagger注解说明"><a href="#Swagger注解说明" class="headerlink" title="Swagger注解说明"></a>Swagger注解说明</h2><ul><li>环境：swagger 2.7.0</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用swagger也有一段时间了，对于注解还是很混乱，这里做个记录，方便后续查阅。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>swagger的注解都在swagger-annotations中，当前版本总共27个注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.5.13&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>现在逐一查看各个注解及使用。</p><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><p>作用于class或interface上（推荐定义在接口上），说明该接口的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Api(tags = &#123;&quot;数据接口&quot;&#125;, description = &quot;推荐系统&quot;)</span><br><span class="line">public interface DataCollectControllerApi &#123;&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fq7f1lwq46j31kw0magrx.jpg" alt="40BF8CA4-03D2-4B05-B63D-520C9A849C05"></p><h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><p>作用于方法上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户行为&quot;, notes = &quot;查询用户行为数据&quot;)</span><br><span class="line">@PostMapping(value = &quot;/behavior&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">    ResultBean&lt;PageInfo&gt; queryUserBehaviorRecord(@RequestBody UserBehaviorReqDTO userBehaviorReqDTO);</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fq7gyiss2dj31kw07wtat.jpg" alt="31980D1F-54AA-436E-A3C7-D96D2A66600A"></p><h3 id="ApiImplicitParams和-ApiImplicitParam（不建议使用）"><a href="#ApiImplicitParams和-ApiImplicitParam（不建议使用）" class="headerlink" title="@ApiImplicitParams和@ApiImplicitParam（不建议使用）"></a>@ApiImplicitParams和@ApiImplicitParam（不建议使用）</h3><p>作用于方法上，但是不建议使用（原因：This is the only way to define parameters when using Servlets or other non-JAX-RS* environments），建议使用@ApiParam</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户&quot;, notes = &quot;查询用户信息&quot;)</span><br><span class="line">   @ApiImplicitParams(&#123;</span><br><span class="line">           @ApiImplicitParam(name = &quot;userId&quot;, value = &quot;用户id&quot;, paramType = &quot;query&quot;, dataType = &quot;int&quot;),</span><br><span class="line">           @ApiImplicitParam(name = &quot;userName&quot;, value = &quot;用户名&quot;, paramType = &quot;query&quot;, dataType = &quot;string&quot;)</span><br><span class="line">   &#125;)</span><br><span class="line">   @PostMapping(value = &quot;/user&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   ResultBean queryUserInfo(@RequestParam(&quot;userId&quot;) Integer userId,</span><br><span class="line">                    @RequestParam(&quot;userName&quot;) String userName);</span><br></pre></td></tr></table></figure><ul><li><p>name：参数名称，即下图的Parameter列</p></li><li><p>value：参数描述，即下图的Description列</p></li><li><p>paramType：参数类型，这里支持5种query,body,path,form,header，这里常用query和body。</p><p>body表示该参数为json。</p></li><li><p>paramType：参数数据类型，目前只支持基本数据类型，int，float，long等</p></li></ul><p>效果：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fq7ie7m8hhj31jk0y0af3.jpg" alt="E0BA3ABA-3832-4C26-A9C5-9855D5E9A6B7"></p><h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h3><p>作用于方法和参数上（只有一个参数时可以在方法上使用，但通常都会有多个参数，所以建议在参数上使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户&quot;, notes = &quot;查询用户信息&quot;)</span><br><span class="line">@PostMapping(value = &quot;/user&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">ResultBean queryUserInfo(</span><br><span class="line">            @ApiParam(name = &quot;userId&quot;, value = &quot;用户id&quot;, type = &quot;Integer&quot;)</span><br><span class="line">            @RequestParam(&quot;userId&quot;) Integer userId,</span><br><span class="line">            @ApiParam(name = &quot;userName&quot;, value = &quot;用户名称&quot;, type = &quot;String&quot;)</span><br><span class="line">            @RequestParam(&quot;userName&quot;) String userName);</span><br></pre></td></tr></table></figure><ul><li><p>name：参数名称，即下图的Parameter列</p></li><li><p>value：参数描述，即下图的Description列</p></li><li><p>type：参数数据类型，即下图的Data Type列。可以忽略，swagger会根据SpringMVC中的注解（RequestParam,RequestBody）自动匹配参数类型（Parameter Type列）和参数数据类型（Data Type列）。如下图，参数使用@RequestParam，则Parameter Type为query，Data Type为对应参数类型；</p><p>参数使用@RequestBody，则Parameter Type为body，Data Type为对应参数类型；</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fq7ja2hsv4j31dc0dyjsw.jpg" alt="EE7527A9-9F9C-41CB-9585-A220B996D9D5"></p></li></ul><p>效果：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fq7j2jzdi9j31ka0xqn1q.jpg" alt="B5BCA1A6-0C31-4BA0-8213-E6FCD3077135"></p><h3 id="ApiResponses和-ApiResponse"><a href="#ApiResponses和-ApiResponse" class="headerlink" title="@ApiResponses和@ApiResponse"></a>@ApiResponses和@ApiResponse</h3><p>作用于方法上，一般用于描述错误的响应信息。@ApiResponses用户描述一组错误响应。@ApiResponse用户描述具体的错误响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;查询用户&quot;, notes = &quot;查询用户信息&quot;)</span><br><span class="line">@PostMapping(value = &quot;/user&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">@ApiResponses(&#123;</span><br><span class="line">    @ApiResponse(code = 1001, message = &quot;用户参数为空&quot;,responseHeaders = &#123;</span><br><span class="line"> @ResponseHeader(name = &quot;header-1&quot;, description = &quot;header-1描述&quot;, response = String.class),</span><br><span class="line">        @ResponseHeader(name = &quot;header-2&quot;, description = &quot;header-2描述&quot;, response = Integer.class),</span><br><span class="line">        @ResponseHeader(name = &quot;header-3&quot;, description = &quot;header-3描述&quot;, response = ResultBean.class)</span><br><span class="line">      &#125;),</span><br><span class="line">     @ApiResponse(code = 1002, message = &quot;用户不存在&quot;, response = ResultBean.class),</span><br><span class="line">    &#125;)</span><br><span class="line">ResultBean queryUserInfo(</span><br><span class="line">            @ApiParam(name = &quot;userId&quot;, value = &quot;用户id&quot;)</span><br><span class="line">            @RequestBody Integer userId,</span><br><span class="line">            @ApiParam(name = &quot;userName&quot;, value = &quot;用户名称&quot;)</span><br><span class="line">            @RequestParam(&quot;userName&quot;) String userName);</span><br></pre></td></tr></table></figure><ul><li>code：返回码，对应HTTP Status Code列</li><li>message：返回码描述，对应Reason列</li><li>response：返回值类型，对应Response Model列</li><li>responseHeaders：返回值头信息，使用@ResponseHeader对返回值头的描述<ul><li>name：响应头名称</li><li>description：响应头描述</li><li>response：响应头返回值类型</li></ul></li></ul><p>使用@ApiResponse时，如果同时使用response属性和responseHeaders属性，responseHeaders会失效（已测试）。另外，使用responseHeaders时，在使用@ResponseHeader时，ResponseHeader中的属性response使用类类型无效（已测试），默认为string</p><p>效果：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fq7khwiw8aj31is0umtd2.jpg" alt="334B5658-FC90-41D9-BD46-C3D6B3204049"></p><h3 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="@ResponseHeader"></a>@ResponseHeader</h3><p>ApiKeyAuthDefinition</p><p>ApiModel</p><p>ApiModelProperty</p><p>Authorization</p><p>AuthorizationScope</p><p>BasicAuthDefinition</p><p>Contact</p><p>Example</p><p>ExampleProperty</p><p>Extension</p><p>ExtensionProperty</p><p>ExternalDocs</p><p>Info</p><p>License</p><p>OAuth2Definition</p><p>Scope</p><p>SecurityDefinition</p><p>SwaggerDefinition</p><p>Tage</p><h2 id="常用模版"><a href="#常用模版" class="headerlink" title="常用模版"></a>常用模版</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/zzuqiang/blog/793606" target="_blank" rel="noopener">https://my.oschina.net/zzuqiang/blog/793606</a> swagger注解类使用说明</li><li><a href="http://www.cnblogs.com/softidea/p/6251249.html" target="_blank" rel="noopener">http://www.cnblogs.com/softidea/p/6251249.html</a> Swagger使用</li></ul>]]></content>
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark之IDEA创建Scala工程</title>
      <link href="/blog/2018/04/08/Scala%E4%B9%8BIDEA%E5%88%9B%E5%BB%BA/"/>
      <url>/blog/2018/04/08/Scala%E4%B9%8BIDEA%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="Spark之IDEA创建Scala工程"><a href="#Spark之IDEA创建Scala工程" class="headerlink" title="Spark之IDEA创建Scala工程"></a>Spark之IDEA创建Scala工程</h2><ul><li>环境：Mac 10.13.3，Intellij Idea 2016.3.5，scala 2.12.5</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过IDEA快速创建scala-maven工程，开发spark应用。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="通过maven模板创建scala"><a href="#通过maven模板创建scala" class="headerlink" title="通过maven模板创建scala"></a>通过maven模板创建scala</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fq52usxxfmj31h60ucwo2.jpg" alt="B54F78E7-ECE0-4D77-A319-FB3AC83BD89A"></p><p>后面就是创建目录的指定，这里省略。</p><p>注：由于这个模板比较老，所以要对pom做一些修改。</p><h4 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h4><p>这里主要是修改scala的版本（默认的是2.7.0的，太老了），以及maven-scala-plugin版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.bsd.scala&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;scala-003&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;scala.version&gt;2.11.8&lt;/scala.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;scala-library&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;scala.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.14&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.specs&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;specs&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;sourceDirectory&gt;src/main/scala&lt;/sourceDirectory&gt;</span><br><span class="line">    &lt;testSourceDirectory&gt;src/test/scala&lt;/testSourceDirectory&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.15.2&lt;/version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">              &lt;goal&gt;testCompile&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>以上基本的一个scala项目就好了。（另外再删除掉test下的相关类即可）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://cwiki.apachecn.org/display/Spark/Index" target="_blank" rel="noopener">http://cwiki.apachecn.org/display/Spark/Index</a> Spark翻译组</li></ul><hr>]]></content>
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA创建Scala工程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql之常用操作</title>
      <link href="/blog/2018/04/04/Mysql%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2018/04/04/Mysql%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="Mysql之常用操作"><a href="#Mysql之常用操作" class="headerlink" title="Mysql之常用操作"></a>Mysql之常用操作</h2><ul><li>环境：mysql 5.7.14</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里记录mysql的一些操作用作应用。</p><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><h3 id="修改用户名密法"><a href="#修改用户名密法" class="headerlink" title="修改用户名密法"></a>修改用户名密法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/mysql/bin/mysqladmin -u root password</span><br></pre></td></tr></table></figure><h3 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ CREATE USER &apos;username&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line">$ GRANT all privileges ON databasename.* TO &apos;username&apos;@&apos;%&apos; with grant options</span><br></pre></td></tr></table></figure><h3 id="字符设置"><a href="#字符设置" class="headerlink" title="字符设置"></a>字符设置</h3><p>场景一：utf8字符集数据库需要修改为utf8mb4</p><p>首先，先查询当前mysql是否支持utf8mb4，如果支持，修改my.cnf，重启mysql，再修改表或者表字段字符集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 配置my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><h4 id="查询字符集"><a href="#查询字符集" class="headerlink" title="查询字符集"></a>查询字符集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## 查看数据库支持字符集</span><br><span class="line">$ show variables like&apos;%char%&apos;;</span><br><span class="line">  character_set_clientutf8mb4 //客户端字符集</span><br><span class="line">  character_set_connectionutf8mb4 //链接字符集</span><br><span class="line">  character_set_databaseutf8mb4 //数据库字符集</span><br><span class="line">  character_set_filesystembinary  </span><br><span class="line">  character_set_resultsutf8mb4 //结果字符集</span><br><span class="line">  character_set_serverutf8mb4 //服务器字符集</span><br><span class="line">  character_set_systemutf8mb4 //系统字符集</span><br><span class="line">  character_sets_dir/usr/local/mysql/share/charsets/</span><br><span class="line">## 查看mysql支持的字符集</span><br><span class="line">$ show charset;</span><br><span class="line">## 查看当前数据库编码：</span><br><span class="line">$ SHOW CREATE DATABASE db_name;</span><br><span class="line">## 查看表编码：</span><br><span class="line">$ SHOW CREATE TABLE tbl_name;</span><br><span class="line">## 查看字段编码：</span><br><span class="line">$ SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure><h4 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 修改数据库字符</span><br><span class="line">¥ ALTER DATABASE [database_name] CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">## 修改表字符集</span><br><span class="line">$ ALTER TABLE [table_name] CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">## 修改表字段字符集</span><br><span class="line">$ ALTER TABLE [table_name] MODIFY COLUMN [column] varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>Tip:为了实现客户端utf8连接到MySQL后，使用的也是utf8mb4字符集，就在 mysqld配置中配置了 init_connect=’SET NAMES utf8mb4’ 表示初始化连接都设置为utf8mb4字符集，再配置一个 skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用，这样就满足了应用的需求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 配置my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class="line">character-set-client-handshake = true</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swagger2问题汇总</title>
      <link href="/blog/2018/04/03/swagger2%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/blog/2018/04/03/swagger2%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="swagger2问题汇总"><a href="#swagger2问题汇总" class="headerlink" title="swagger2问题汇总"></a>swagger2问题汇总</h2><ul><li>环境：swagger 2.7.0，spring-boot 1.5.9</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里是对在使用swagger时碰到的相关问题汇总。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h4 id="Failed-to-start-bean-‘documentationPluginsBootstrapper’-nested-exception-is-java-lang-NullPointerException"><a href="#Failed-to-start-bean-‘documentationPluginsBootstrapper’-nested-exception-is-java-lang-NullPointerException" class="headerlink" title="Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException"></a>Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException</h4><p>swagger的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(new ApiInfoBuilder()</span><br><span class="line">                        .title(&quot;测试&quot;)</span><br><span class="line">                        .description(&quot;测试&quot;)</span><br><span class="line">                        .termsOfServiceUrl(&quot;&quot;)</span><br><span class="line">                        .contact(&quot;jilingjun&quot;)</span><br><span class="line">                        .version(&quot;1.0&quot;)</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.bsd.recommend.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Failed to start bean &apos;documentationPluginsBootstrapper&apos;; nested exception is java.lang.NullPointerException</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]</span><br><span class="line">at com.bsd.recommend.RecommendApplication.main(RecommendApplication.java:23) ~[classes/:na]</span><br><span class="line">Caused by: java.lang.NullPointerException: null</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$4.apply(RequestHandlerSelectors.java:97) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$4.apply(RequestHandlerSelectors.java:94) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at com.google.common.base.Present.transform(Present.java:79) ~[guava-19.0.jar:na]</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$5.apply(RequestHandlerSelectors.java:113) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.builders.RequestHandlerSelectors$5.apply(RequestHandlerSelectors.java:110) ~[springfox-core-2.7.0.jar:2.7.0]</span><br><span class="line">at com.google.common.base.Predicates$AndPredicate.apply(Predicates.java:374) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.base.Predicates$AndPredicate.apply(Predicates.java:374) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.collect.Iterators$7.computeNext(Iterators.java:675) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143) ~[guava-19.0.jar:na]</span><br><span class="line">at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138) ~[guava-19.0.jar:na]</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:48) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiDocumentationScanner.scan(ApiDocumentationScanner.java:67) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.scanDocumentation(DocumentationPluginsBootstrapper.java:95) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:154) ~[springfox-spring-web-2.7.0.jar:2.7.0]</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE]</span><br><span class="line">... 14 common frames omitted</span><br></pre></td></tr></table></figure><p>初步诊断，swagger在做scan操作抛出了空指针异常。现在只能google了，发现这事一个bug，并且在2.8.0之后进行了修复（2.8.0修复的问题在这里：<a href="https://github.com/springfox/springfox/issues/2186）。" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/2186）。</a></p><p>（可参考：<a href="https://github.com/springfox/springfox/issues/1876）" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/1876）</a></p><p>这个问题是发生在对controller做了切面后才会出现，If I use AOP advice on my method within @RestController I face this issue too because Spring creates proxy class to wrap controller’s method call。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>swagger 2.7.0，spring-boot 1.5.1</li></ul><p>既然是个bug，就应该有临时解决方案吧。这还真让我找到了，具体解决的源url就找不到了，就直接帖代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger2 extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/v2/api-docs&quot;, &quot;/v2/api-docs?group=restful-api&quot;);</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/swagger-resources/configuration/ui&quot;, &quot;/swagger-resources/configuration/ui&quot;);</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/swagger-resources/configuration/security&quot;, &quot;/swagger-resources/configuration/security&quot;);</span><br><span class="line">        registry.addRedirectViewController(&quot;/documentation/swagger-resources&quot;, &quot;/swagger-resources&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.</span><br><span class="line">                addResourceHandler(&quot;/documentation/swagger-ui.html**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/swagger-ui.html&quot;);</span><br><span class="line">        registry.</span><br><span class="line">                addResourceHandler(&quot;/documentation/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any()).paths(PathSelectors.any())</span><br><span class="line">                .build().forCodeGeneration(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder().title(&quot;测试&quot;)</span><br><span class="line">                .description(&quot;测试&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;&quot;).contact(&quot;联系我&quot;).version(&quot;1.0&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/springfox/springfox/issues/1876" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/1876</a> NullPointerException with Spring Data Rest integration</li><li><a href="https://github.com/springfox/springfox/issues/1860" target="_blank" rel="noopener">https://github.com/springfox/springfox/issues/1860</a> [spring boot]@EnableAspectJAutoProxy cause endpoint scanning failed</li></ul><hr>]]></content>
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis之集群搭建</title>
      <link href="/blog/2018/04/02/Redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA/"/>
      <url>/blog/2018/04/02/Redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="Redis之集群搭建"><a href="#Redis之集群搭建" class="headerlink" title="Redis之集群搭建"></a>Redis之集群搭建</h2><ul><li>环境：Centos7，redis3.2</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>### </p><h2 id="Cluster添加密码"><a href="#Cluster添加密码" class="headerlink" title="Cluster添加密码"></a>Cluster添加密码</h2><p><strong>前提：先创建无密码集群</strong></p><h3 id="方式一：手动添加密码到配置文件"><a href="#方式一：手动添加密码到配置文件" class="headerlink" title="方式一：手动添加密码到配置文件"></a>方式一：手动添加密码到配置文件</h3><p>修改所有redis服务器的配置文件添加密码，然后关闭redis-cluster，然后重启redis-cluster</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass &quot;abc&quot;</span><br><span class="line">masterauth &quot;abc&quot;</span><br></pre></td></tr></table></figure><h3 id="方式二：通过命令添加密码"><a href="#方式二：通过命令添加密码" class="headerlink" title="方式二：通过命令添加密码"></a>方式二：通过命令添加密码</h3><p>通过命令行设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## 登录有添加密码</span><br><span class="line">$ redis-cli -h [host] -p [port] -c</span><br><span class="line">$ config set masterauth abc</span><br><span class="line">$ config set requirepass abc</span><br><span class="line">$ config rewrite</span><br><span class="line">$ shutdown</span><br><span class="line">## 每个节点都执行上述操作，然后正常关闭即可。查看每个节点的conf配置文件，会发现都自动添加了</span><br><span class="line">requirepass &quot;abc&quot;</span><br><span class="line">masterauth &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>后续登录都需要添加密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h [host] -p [port] -c -a [password]</span><br><span class="line">或者</span><br><span class="line">$ redis-cli -h [host] -p [port] -c</span><br><span class="line">$ auth [password]</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>​</li></ul>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis集群 </tag>
            
            <tag> redis集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里开源之Jarslink初体验</title>
      <link href="/blog/2018/03/31/%E9%98%BF%E9%87%8C%E5%BC%80%E6%BA%90%E4%B9%8BJarslink%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/blog/2018/03/31/%E9%98%BF%E9%87%8C%E5%BC%80%E6%BA%90%E4%B9%8BJarslink%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="Jarslink初体验"><a href="#Jarslink初体验" class="headerlink" title="Jarslink初体验"></a>Jarslink初体验</h2><ul><li>环境：spring-boot 1.5.3，<a href="https://github.com/alibaba/jarslink" target="_blank" rel="noopener">Jarslink</a> 1.5.0.20171107，jdk8</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一个新东西，通常用哲学的问题进行初步了解。它是什么？它从哪里来？能够解决什么问题（要到哪里去）？</p><ul><li><p>它是什么？它从那里来？</p><p>阿里开源的，名为Jarslink并基于Java的模块化开发框架。它提供在运行时动态加载模块（jar包）、卸载、模块间调用的API。</p></li><li><p>能够解决什么问题？</p></li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="新建一个Hello-World工程模块"><a href="#新建一个Hello-World工程模块" class="headerlink" title="新建一个Hello World工程模块"></a>新建一个Hello World工程模块</h3>]]></content>
      
      
        <tags>
            
            <tag> Jarslink </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker之安装</title>
      <link href="/blog/2018/03/29/docker%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2018/03/29/docker%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Docker之安装"><a href="#Docker之安装" class="headerlink" title="Docker之安装"></a>Docker之安装</h2><ul><li>环境：Centos6.5，Centos7<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2>1、EPEL（ Extra Packages for Enterprise Linux，企业版Linux的额外软件包)是yum的一个软件源，里面包含了许多基本源里没有的软件；<br>2、docker要求服务CentOS6以上，kernel 版本必须2.6.32-431或更高；<h2 id="查看系统的版本和内核"><a href="#查看系统的版本和内核" class="headerlink" title="查看系统的版本和内核"></a>查看系统的版本和内核</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 查看系统版本</span><br><span class="line">$ lsb_release -a</span><br><span class="line">## 查看内核版本</span><br><span class="line">$ uname -r</span><br></pre></td></tr></table></figure></li></ul><h2 id="Centos6-5安装docker"><a href="#Centos6-5安装docker" class="headerlink" title="Centos6.5安装docker"></a>Centos6.5安装docker</h2><p>要将Docker安装到CentOS上，要使用EPEL软件库，下载epel安装包并安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://ftp.jaist.ac.jp/pub/Linux/Fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">$ rpm -ivh epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>检查EPEL源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.skyshe.cn</span><br><span class="line"> * epel: mirrors.opencas.cn</span><br><span class="line"> * extras: mirrors.skyshe.cn</span><br><span class="line"> * updates: centos.ustc.edu.cn</span><br><span class="line">repo id                                                                                    repo name                                                                                                                          status</span><br><span class="line">base                                                                                       CentOS-6 - Base                                                                                                                     6,575</span><br><span class="line">epel                                                                                       Extra Packages for Enterprise Linux 6 - x86_64                                                                                     12,234</span><br><span class="line">extras                                                                                     CentOS-6 - Extras                                                                                                                      62</span><br><span class="line">updates                                                                                    CentOS-6 - Updates                                                                                                                  1,580</span><br><span class="line">repolist: 20,451</span><br><span class="line">EPEL已经在repo列出，并显示提供12234个软件包，EPEL源的配置安装到了/etc/yum.repos.d/epel.repo</span><br></pre></td></tr></table></figure></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker-io</span><br><span class="line">$ service docker start</span><br><span class="line">$ chkconfig docker on</span><br></pre></td></tr></table></figure><h3 id="检查docker是否安装成功"><a href="#检查docker是否安装成功" class="headerlink" title="检查docker是否安装成功"></a>检查docker是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$docker info</span><br><span class="line">Containers: 0</span><br><span class="line">Images: 0</span><br><span class="line">Storage Driver: devicemapper</span><br><span class="line"> Pool Name: docker-8:3-276002-pool</span><br><span class="line"> Pool Blocksize: 65.54 kB</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Data file: /dev/loop0</span><br><span class="line"> Metadata file: /dev/loop1</span><br><span class="line"> Data Space Used: 305.7 MB</span><br><span class="line"> Data Space Total: 107.4 GB</span><br><span class="line"> Data Space Available: 4.873 GB</span><br><span class="line"> Metadata Space Used: 729.1 kB</span><br><span class="line"> Metadata Space Total: 2.147 GB</span><br><span class="line"> Metadata Space Available: 2.147 GB</span><br><span class="line"> Udev Sync Supported: true</span><br><span class="line"> Deferred Removal Enabled: false</span><br><span class="line"> Data loop file: /var/lib/docker/devicemapper/devicemapper/data</span><br><span class="line"> Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata</span><br><span class="line"> Library Version: 1.02.95-RHEL6 (2015-09-08)</span><br><span class="line">Execution Driver: native-0.2</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Kernel Version: 2.6.32-431.el6.x86_64</span><br><span class="line">Operating System: &lt;unknown&gt;</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 996.4 MiB</span><br><span class="line">Name: winter-01</span><br><span class="line">ID: KJ3G:XD6V:SDDV:5SGY:2TRQ:4XXR:XBPV:VLHE:XHHZ:F425:7G2B:G5D5</span><br></pre></td></tr></table></figure><h2 id="Centos7安装docker"><a href="#Centos7安装docker" class="headerlink" title="Centos7安装docker"></a>Centos7安装docker</h2><p>centos7可以直接使用yum安装，不需要再添加其他软件源信息.</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker</span><br></pre></td></tr></table></figure><h3 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h3><p>使用daocloud的镜像加速器，在<a href="https://www.daocloud.io上注册账号，选择加速器" target="_blank" rel="noopener">https://www.daocloud.io上注册账号，选择加速器</a></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpttnn6256j31kw0p644u.jpg" alt="EE057A44-3793-488A-ABD9-525D8714316A"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpttodkc9dj31kw0g9782.jpg" alt="CD7714F1-2A75-474B-B3FE-28CD7035D23C"></p><p>正常情况下，直接执行上图的命令即可，但为了安全起见，执行后，查看/etc/docker/daemon.json，是否格式正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;http://5c00508c.m.daocloud.io&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;insecure-registries&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 启动</span><br><span class="line">$ service docker start</span><br><span class="line">## 配置开机启动</span><br><span class="line">$ chkconfig docker on</span><br><span class="line">## 下载镜像测试</span><br><span class="line">## docker pull hello-world</span><br></pre></td></tr></table></figure><h2 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q&amp;A："></a>Q&amp;A：</h2><h3 id="Centos6-5安装好epel后，执行命令yum-repolist报错，信息如下："><a href="#Centos6-5安装好epel后，执行命令yum-repolist报错，信息如下：" class="headerlink" title="Centos6.5安装好epel后，执行命令yum repolist报错，信息如下："></a>Centos6.5安装好epel后，执行命令yum repolist报错，信息如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist</span><br><span class="line">Loaded plugins: product-id, security, subscription-manager</span><br><span class="line">Updating certificate-based repositories.</span><br><span class="line">Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again</span><br></pre></td></tr></table></figure><p>解决办法：vim /etc/yum.repos.d/epel.repo<br>编辑[epel]下的baseurl前的#号去掉，mirrorlist前添加#号。正确配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$yum makecache</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/3a4cd73e3272" target="_blank" rel="noopener">https://www.jianshu.com/p/3a4cd73e3272</a> CentOS7安装Docker</li><li><a href="https://blog.csdn.net/Mr_OOO/article/details/67016309" target="_blank" rel="noopener">https://blog.csdn.net/Mr_OOO/article/details/67016309</a> Docker国内镜像源设置</li></ul>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基础之Collection</title>
      <link href="/blog/2018/03/29/Java%E5%9F%BA%E7%A1%80%E4%B9%8BCollection/"/>
      <url>/blog/2018/03/29/Java%E5%9F%BA%E7%A1%80%E4%B9%8BCollection/</url>
      <content type="html"><![CDATA[<h2 id="java集合之HashMap"><a href="#java集合之HashMap" class="headerlink" title="java集合之HashMap"></a>java集合之HashMap</h2><ul><li>环境：jdk8</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hashmap是非常常用的，深入了解还是很有好处的。对于hashmap或其他东西，了解一些关键和核心就能抓住要点，深入太多的其他细节，反而分散注意力，性价比反而不高。</p><p>对于HashMap，其关键点有这些：底层的数据结构是是什么？存储值的如何取值的？hash碰撞了怎么办？线程不安全会引发的问题？</p><p>hashmap在jdk7和jdk8中实现是不一样的。</p><ul><li>jdk7中，hashmap底层的数据结构数组+单链表</li><li>jdk8中，hashmap底层的数据结构数组+单链表+红黑树</li></ul><p>围绕以上的问题，开始对它进行剖析。</p><h2 id="深入HashMap"><a href="#深入HashMap" class="headerlink" title="深入HashMap"></a>深入HashMap</h2><h3 id="Hashmap类图"><a href="#Hashmap类图" class="headerlink" title="Hashmap类图"></a>Hashmap类图</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpxgnrsbl8j30ln0d5752.jpg" alt="25644DE6-8C03-4A5B-BC25-3481D92E2D76"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="noopener">https://tech.meituan.com/java-hashmap.html</a> Java 8系列之重新认识HashMap</li></ul>]]></content>
      
      <categories>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo进阶之添加评论</title>
      <link href="/blog/2018/03/28/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/"/>
      <url>/blog/2018/03/28/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/</url>
      <content type="html"><![CDATA[<h2 id="Hexo进阶之添加评论"><a href="#Hexo进阶之添加评论" class="headerlink" title="Hexo进阶之添加评论"></a>Hexo进阶之添加评论</h2><ul><li>工具：hexo 3.6.0 + github pages + git + NexT 5.1.4</li><li>环境：mac(10.13.2)、node.js(9.4.0)、npm(5.6.0)</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo可以使用的第三方插件有这几种：</p><a id="more"></a><ul><li>Gitment</li></ul><p>需要登录github账号，不提供游客评论。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fpsdctv0xaj316c0hcabd.jpg" alt="2753A607-0178-4C26-9950-8A4F2316BEED"></p><ul><li>来必力（推荐）</li></ul><p>支持多账号登录评论</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fpsdlpn45ij31kw0e1ac6.jpg" alt="6634448F-B06C-4B02-B286-A5CBCBB6CFE8"></p><ul><li>Disqus</li><li>Valine</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpsdfoimj4j313c0h4dib.jpg" alt="FE1877B0-9CD6-4B26-9826-8521FC9D6FC0"></p><ul><li><del>多说，已不支持</del></li><li><del>网易云跟帖，已不支持</del></li></ul><h2 id="使用来必力"><a href="#使用来必力" class="headerlink" title="使用来必力"></a>使用来必力</h2><h3 id="注册livers"><a href="#注册livers" class="headerlink" title="注册livers"></a><a href="https://livere.com/" target="_blank" rel="noopener">注册livers</a></h3><p>livere有两个版本：</p><ul><li>City 版：是一款适合所有人使用的免费版本</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本</li></ul><p>使用City版就行了。</p><h3 id="获取安装代码"><a href="#获取安装代码" class="headerlink" title="获取安装代码"></a>获取安装代码</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpse4v4hcfj31kw0t1n36.jpg" alt="9A207FBE-5518-418D-B4EB-8BFAC651667F"></p><p>填写完成后，进入到 管理页面 -&gt; 代码管理 -&gt; 一般网站 代码中，data-uid即为next主题所需要的livere_uid。</p><h3 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config</span><br><span class="line">livere_uid: data-uid</span><br><span class="line">## 本地无需重启，要部署到github pages需要重新部署</span><br></pre></td></tr></table></figure><h2 id="使用Gitment"><a href="#使用Gitment" class="headerlink" title="使用Gitment"></a>使用Gitment</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.zhoujy.me/2017/07/16/livere/" target="_blank" rel="noopener">http://www.zhoujy.me/2017/07/16/livere/</a> 为Hexo主题yilia添加livere(来必力)评论支持</li><li><a href="http://www.hl10502.com/2017/03/24/hexo-config-livere/" target="_blank" rel="noopener">http://www.hl10502.com/2017/03/24/hexo-config-livere/</a> hexo添加LiveRe评论支持</li></ul><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/28/hexo进阶之添加评论/">http://steven-ji.github.io/blog/2018/03/28/hexo进阶之添加评论/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo添加评论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo进阶之局部优化</title>
      <link href="/blog/2018/03/27/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%B1%80%E9%83%A8%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2018/03/27/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%B1%80%E9%83%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="Hexo进阶之局部优化"><a href="#Hexo进阶之局部优化" class="headerlink" title="Hexo进阶之局部优化"></a>Hexo进阶之局部优化</h2><h3 id="字数统计、Fork-me置头像、打赏、社交链接"><a href="#字数统计、Fork-me置头像、打赏、社交链接" class="headerlink" title="字数统计、Fork me置头像、打赏、社交链接"></a>字数统计、Fork me置头像、打赏、社交链接</h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇主要是一些局部优化，添加字数统计、添加Fork me、添加头像</p><h2 id="添加字数统计"><a href="#添加字数统计" class="headerlink" title="添加字数统计"></a>添加字数统计</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fpqf4rgznpj31kw0bimzg.jpg" alt="D9E2AF45-72FC-42F3-8532-355F57ED887A"></p><p>安装wordcount插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br><span class="line">主要功能</span><br><span class="line">字数统计:WordCount</span><br><span class="line">阅读时长预计:Min2Read</span><br><span class="line">总字数统计: TotalCount</span><br></pre></td></tr></table></figure><p>编辑主题配置，开启功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/layout/_layout.swig</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="添加Fork-me-on-GitHub"><a href="#添加Fork-me-on-GitHub" class="headerlink" title="添加Fork me on GitHub"></a>添加Fork me on GitHub</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fprt5hy8j5j30zm0dutah.jpg" alt="BBFC33F1-22F3-446E-BCA7-61D01D649CFE"></p><p>去网址<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\next\layout_layout.swig的body标签之内即可。把里面的url换成自己的!</p><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>修改主题配置_config.yml中的avatar字段，添加头像路径。</p><p>两种添加方式：一设置头像url地址；二是上传头像图片，设置图片路径；</p><p>我采用第二种，在source下新建uploads目录，图片上传即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /uploads/avatar.png</span><br></pre></td></tr></table></figure><h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><p>修改主题配置_config.yml中的social字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config.yml</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/steven-ji || github</span><br></pre></td></tr></table></figure><h2 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fpsmkzvnskj31kw05i0tr.jpg" alt="35342F5B-11ED-4D46-868F-9FFB2F85C8A1"></p><p>修改主题配置文件，修改字段since</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2013</span><br></pre></td></tr></table></figure><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fpsnkjibmbj31kw0nmn2l.jpg" alt="DB4C42AF-6DB1-4EB4-AFB1-A1C51F72CB85"></p><p>修改主题配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /blog/uploads/wechatpay.png</span><br><span class="line">alipay: /blog/uploads/alipay.png</span><br></pre></td></tr></table></figure><p>注：如果访问的博客有带根路径，如我的博客地址是<a href="https://steven-ji.github.io/blog/，则需要在图片路径前加/blog，不然访问不到图片。">https://steven-ji.github.io/blog/，则需要在图片路径前加/blog，不然访问不到图片。</a></p><h2 id="文末添加版权声明"><a href="#文末添加版权声明" class="headerlink" title="文末添加版权声明"></a>文末添加版权声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-addlink --save</span><br><span class="line">## 修改站点配置文件,addlink支持markdown语法</span><br><span class="line">addlink:</span><br><span class="line">  before_text: __本文作者__：ttbb&lt;br /&gt;__本文地址__：  </span><br><span class="line">  after_text: &lt;br /&gt;__版权声明__：本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 3.0 CN](http://creativecommons.org/licenses/by-nc-sa/3.0/cn/) 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure><h2 id="文章分享朋友圈功能-不支持https"><a href="#文章分享朋友圈功能-不支持https" class="headerlink" title="文章分享朋友圈功能(不支持https)"></a>文章分享朋友圈功能(不支持https)</h2><p>使用第三方插件<a href="http://www.jiathis.com/" target="_blank" rel="noopener">jiathis</a></p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a><a href="http://www.jiathis.com/" target="_blank" rel="noopener">注册账号</a></h3><p>注册成功后，获取uid。（在设置-&gt;基本设置-&gt;账户信息中）</p><h3 id="修改jiathis-swig文件"><a href="#修改jiathis-swig文件" class="headerlink" title="修改jiathis.swig文件"></a>修改jiathis.swig文件</h3><p>如果不需要的分享地方可以删除了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes\next\layout\_partials\share\jiathis.swig</span><br><span class="line"></span><br><span class="line">&lt;span class=&quot;jiathis_txt&quot;&gt;分享到：&lt;/span&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_fav&quot;&gt;收藏夹&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_copy&quot;&gt;复制网址&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_email&quot;&gt;邮件&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_weixin&quot;&gt;微信&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_qzone&quot;&gt;QQ空间&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_tqq&quot;&gt;腾讯微博&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_douban&quot;&gt;豆瓣&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_share&quot;&gt;一键分享&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p>修改主题配置文件，使用注册后获得的uid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$vim theme/next/_config.yml</span><br><span class="line">jiathis:</span><br><span class="line">  enable: true</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">  add_this_id: yourUID</span><br></pre></td></tr></table></figure><h2 id="配置网站图标"><a href="#配置网站图标" class="headerlink" title="配置网站图标"></a>配置网站图标</h2><p>修改主题配置文件</p><p><img src="/var/folders/42/6wkj60592196pl_8sdtb8tl00000gn/T/abnerworks.Typora/6575320A-EF98-4E05-BD6A-B6504D5BCCA6.png" alt="6575320A-EF98-4E05-BD6A-B6504D5BCCA6"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 上图网站图标到theme/next/source/images/目录下,配置网站图标名称</span><br><span class="line">$ vim theme/next/_config.yml</span><br><span class="line">favicon:</span><br><span class="line">  medium: /images/favicon.png</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html</a> 主题配置</li><li><a href="http://barrysite.me/2017/05/07/Hexo%20Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">http://barrysite.me/2017/05/07/Hexo%20Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</a>  Hexo Next主题下基本配置</li><li><a href="http://zhy.one/html/hexo-addlink.html" target="_blank" rel="noopener">http://zhy.one/html/hexo-addlink.html</a> 用hexo-addlink在文章尾部插入当前文章链接</li></ul><hr><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/27/hexo进阶之局部优化/">http://steven-ji.github.io/blog/2018/03/27/hexo进阶之局部优化/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo局部优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo进阶之添加分类、标签、搜索菜单</title>
      <link href="/blog/2018/03/26/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%88%86%E7%B1%BB%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E6%90%9C%E7%B4%A2/"/>
      <url>/blog/2018/03/26/hexo%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%88%86%E7%B1%BB%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h2 id="hexo进阶之添加菜单"><a href="#hexo进阶之添加菜单" class="headerlink" title="hexo进阶之添加菜单"></a>hexo进阶之添加菜单</h2><h3 id="分类、标签、搜索"><a href="#分类、标签、搜索" class="headerlink" title="分类、标签、搜索"></a>分类、标签、搜索</h3><ul><li>工具：hexo + NexT</li></ul><ul><li>环境：mac(10.13.2)、node.js(9.4.0)、npm(5.6.0)</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇已经搭建了最简单的博客，没有常见的菜单：分类、标签、音乐、搜索、RSS订阅、个人，这一篇就是完善这个菜单功能。</p><h2 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpqfg4dw6pj31kw0qzwma.jpg" alt="89A00507-FB87-4FD0-8A1C-9E817208C45D"></p><a id="more"></a><h3 id="修改NexT下的主题配置文件"><a href="#修改NexT下的主题配置文件" class="headerlink" title="修改NexT下的主题配置文件"></a>修改NexT下的主题配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config.yml</span><br><span class="line">## 添加菜单(配置菜单对应的图标,NexT使用的是Font Awesome提供的图标https://fontawesome.com/)</span><br><span class="line">## || 后面为图标名称</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #search: /search/ || search   ## 不需要配置，使用了local search</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="编辑页面显示的菜单中文名称"><a href="#编辑页面显示的菜单中文名称" class="headerlink" title="编辑页面显示的菜单中文名称"></a>编辑页面显示的菜单中文名称</h3><p>编辑Next目录下的languages/{language}.yml文件，{language}.yml为站点_config.yml中配置的languages: zh-Hans对应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim /theme/next/languages/zh-Hans.yml</span><br><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br></pre></td></tr></table></figure><p>到这里，已经添加了归档、分类等菜单，但是点击是没有效果的。</p><h3 id="配置菜单对应内容"><a href="#配置菜单对应内容" class="headerlink" title="配置菜单对应内容"></a>配置菜单对应内容</h3><h4 id="分类菜单"><a href="#分类菜单" class="headerlink" title="分类菜单"></a>分类菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 创建categories页面</span><br><span class="line">$ hexo new page &quot;categories&quot;</span><br><span class="line">$ vim source/categories/index.md</span><br><span class="line">  title: All categories</span><br><span class="line">  date: 2018-03-26 12:39:04</span><br><span class="line">  type: &quot;categories&quot;</span><br><span class="line">  comments: false</span><br></pre></td></tr></table></figure><h4 id="标签菜单"><a href="#标签菜单" class="headerlink" title="标签菜单"></a>标签菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 创建tags页面</span><br><span class="line">$ hexo new page &quot;tags&quot;</span><br><span class="line">$ vim source/tags/index.md</span><br><span class="line">  title: All tags</span><br><span class="line">  date: 2014-12-22 12:39:04</span><br><span class="line">  type: &quot;tags&quot;</span><br><span class="line">  comments: false</span><br></pre></td></tr></table></figure><p>注：分类和标签还没有和分类关联起来，需要在每篇文章头部添加categories和tags属性，这样就可以自动关联了，为了后续方便，修改scaffolds/post.md模版即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo+github快速搭建博客</span><br><span class="line">date: 2018-03-25 14:12:32</span><br><span class="line">categories: hexo</span><br><span class="line">tags: </span><br><span class="line">- hexo+github+next</span><br><span class="line">- hexo</span><br></pre></td></tr></table></figure><h4 id="搜索菜单"><a href="#搜索菜单" class="headerlink" title="搜索菜单"></a>搜索菜单</h4><p>采用Hexo提供的Local Search站内搜索,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## 在站点根目录下安装</span><br><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br><span class="line">## 站点_config.yml配置</span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">## 主题配置文件修改</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>注：由于使用了local search，主题配置文件中就menu属性就不需要添加search了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a> NexT开始使用</li><li><a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md</a> NexT使用文档</li><li><a href="http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html" target="_blank" rel="noopener">http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html</a> hexo搭建</li></ul><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/26/hexo进阶之分类、标签、搜索/">http://steven-ji.github.io/blog/2018/03/26/hexo进阶之分类、标签、搜索/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo+github快速搭建博客</title>
      <link href="/blog/2018/03/25/hexo+github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/blog/2018/03/25/hexo+github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="自建博客最佳实践"><a href="#自建博客最佳实践" class="headerlink" title="自建博客最佳实践"></a>自建博客最佳实践</h2><p>本篇是自己实践记录。</p><ul><li>工具：hexo 3.6.0 + github pages + git + NexT 5.1.4</li><li>环境：mac(10.13.2)、node.js(9.4.0)、npm(5.6.0)</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开始之前，先回答三个哲学问题，它是谁？它从哪里来？它要到哪里去？</p><ul><li><p>hexo</p><p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p><p>一个github的开源项目。<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexojs/hexo</a></p><p>说白了，就是本来想要搭建一个博客（比较麻烦的是页面样式等），而别人已经给你搞了个框架，你只管创作，其他的都不要你操心（给你一个漂亮的页面），交给它就可以了，给你生成一个静态的页面，放哪都能访问。</p></li><li><p>GitHub Pages</p><p>Github Pages 本身就是 Github 为用户提供的一个介绍项目、发表技术文章的网站。当你创建了它，这时可以认为你已经拥有了一个网站，只不过这个网站没有内容。Github Pages 的网站内容和样式全部可以由用户自己定制，网站空间无限，流量免费，Github为你维护，安全又稳定，而且你可以很轻松的更新它。<br>Github Pages 实际上是一个 Github 仓库，这也就解释了为什么其很容易更新，因为网站的样式和内容都存储在该仓库中，当你更新仓库时，网站也自动更新了。</p><p>说白了，就是一个免费的服务器，把hexo生成的静态页面往上一放，哪哪都能访问了。</p></li></ul><a id="more"></a><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><ul><li>方式一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">##查看node版本，建议安装最新版本9.4.0</span><br><span class="line">$ node -v</span><br><span class="line">v4.4.0</span><br><span class="line">##清除node.js的cache</span><br><span class="line">$ sudo npm cache clean -f</span><br><span class="line">  注：这里可能会报错，如果报错，放弃使用这种方式，使用方式二</span><br><span class="line">  npm WARN using --force I sure hope you know what you are doing.</span><br><span class="line">  npm ERR! code MODULE_NOT_FOUND</span><br><span class="line">  npm ERR! Cannot find module &apos;internal/util/types&apos;</span><br><span class="line"></span><br><span class="line">  npm ERR! A complete log of this run can be found in:</span><br><span class="line">  npm ERR! /var/root/.npm/_logs/2017-11-20T02_16_00_192Z-debug.log</span><br><span class="line">##安装 n 工具，这个工具是专门用来管理node.js版本的</span><br><span class="line">$ sudo npm install -g n</span><br><span class="line">##安装指定版本的node.js（稳定版|最新版|9.4.0版本），也可以删除sudo n rm 9.0.0</span><br><span class="line">$ sudo n stable|latest|9.4.0</span><br><span class="line">注：安装过程可能会失败，再次安装会报dyld: bad external relocation length的错误，这是由于残留未下载完的文件，删除即可。路径：/usr/local/n/versions/node</span><br><span class="line">##再次检查版本</span><br><span class="line">$ node -v</span><br><span class="line">v9.4.0</span><br><span class="line">$ sudo npm install npm@latest -g</span><br></pre></td></tr></table></figure><ul><li>方式二（推荐使用）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure><p>git的相关配置就不再累述，google一把把</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## 一行搞定</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">  ##当出现这种错误时， Cannot find module &apos;../lib/utils/unsupported.js&apos;</span><br><span class="line">  采用下面方式，重新安装node</span><br><span class="line">  $ rm -rf /usr/local/lib/node_modules</span><br><span class="line">  # remove previously installed node</span><br><span class="line">  $ brew uninstall node</span><br><span class="line">  $ brew prune    # clean all broken symlinks</span><br><span class="line">  $ brew update   # always good to have the latest</span><br><span class="line">  # and install normal one</span><br><span class="line">  $ brew install node</span><br><span class="line">  </span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><h3 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h3><ul><li>新建博客仓库</li></ul><p>这里就建一个名为blog的仓库，初始化README勾选上。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fppg7kxo0oj31880tcgq3.jpg" alt="22DE15A7-4A94-4E2F-96EF-388A2F578A52"></p><ul><li>开启gh-pages功能</li></ul><p>点击Settings</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fppg6lw3kwj31kw0fhdit.jpg" alt="C0CE678E-96DC-42EC-B400-40564E5CDE04"></p><p>找到GitHub Pages，选择使用master分支。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fppg9ln06ej31ba0p678h.jpg" alt="F026F8CB-7AAD-4D2C-9243-8A1216B923C6"></p><p>保存后，就算发布成功了，访问链接地址试试吧。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fppgbjbizlj31780rugq9.jpg" alt="0DCBF15E-1C17-44C3-A08F-D547121A48DC"></p><h3 id="配置hexo并部署"><a href="#配置hexo并部署" class="headerlink" title="配置hexo并部署"></a>配置hexo并部署</h3><h4 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 新建一个文件夹用于存放框架，如blog</span><br><span class="line">$ mkdir -p /usr/xxxx/Documents/blog</span><br><span class="line">$ cd /usr/xxxx/Documents/blog</span><br><span class="line">$ hexo init </span><br><span class="line">$ npm install</span><br><span class="line">## 启动</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br><span class="line">##本地就能查看效果</span><br></pre></td></tr></table></figure><h4 id="将博客与Github关联"><a href="#将博客与Github关联" class="headerlink" title="将博客与Github关联"></a>将博客与Github关联</h4><ul><li>1.编辑主站_config.yml(即/usr/xxxx/Documents/blog目录下)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 配置访问地址和访问根路径</span><br><span class="line">url: http://**.github.io/blog/ 这地址在开启github pages时生成</span><br><span class="line">root: /blog</span><br><span class="line">注：如果我的创建的仓库为testblog，则url和root相应的修改为http://**.github.io/testblog/和/testblog</span><br><span class="line"></span><br><span class="line">## 配置部署路径</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:***/blog</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 安装部署插件</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">## 清除缓存</span><br><span class="line">$ hexo clean</span><br><span class="line">## 本地生成静态文件</span><br><span class="line">$ hexo g</span><br><span class="line">## 部署</span><br><span class="line">$ hexo d</span><br><span class="line">## 访问</span><br><span class="line">https://***.github.io/blog/</span><br></pre></td></tr></table></figure><p>到此，大功告成！</p><p>这里还有点小瑕疵，默认主题我不是很喜欢，这里使用next</p><h4 id="使用NexT主题"><a href="#使用NexT主题" class="headerlink" title="使用NexT主题"></a>使用NexT主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">## 到hexo root目录下</span><br><span class="line">$ cd hexo</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  node_modules  package.json  public  scaffolds  source  themes</span><br><span class="line">$ mkdir themes/next</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line">$ cd themes/next</span><br><span class="line">$ git tag -l</span><br><span class="line">…</span><br><span class="line">v5.1.0</span><br><span class="line">v5.1.1</span><br><span class="line">v5.1.2</span><br><span class="line">v5.1.3</span><br><span class="line">v5.1.4</span><br><span class="line">$ git checkout tags/v5.1.0</span><br><span class="line">Note: checking out &apos;tags/v5.1.0&apos;.</span><br><span class="line">…</span><br><span class="line">HEAD now on 1f72f68... CSS: Remove global list-style setting of ul</span><br><span class="line"></span><br><span class="line">## 配置主站_config.yml（不是theme/next下的_config.yml）</span><br><span class="line">language: zh-Hans</span><br><span class="line">theme: next</span><br><span class="line">## 重新发布即可</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>现在算是完成了！</p><h2 id="后续进阶"><a href="#后续进阶" class="headerlink" title="后续进阶"></a>后续进阶</h2><ul><li>如何使用自己的域名？</li><li>分类、标签、音乐、搜索、RSS订阅，怎么做？</li><li>如何统计访问量？</li><li>如何开通留言功能？</li><li>如何提供大赏功能？</li><li>如何提高博客搜索排名（SEO）？</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>使用 Hexo + Github Pages 搭建独立博客 <a href="http://yanshengjia.com/2017/01/31/%E4%BD%BF%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">http://yanshengjia.com/2017/01/31/%E4%BD%BF%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</a></li><li>我用hexo部署到github-pages上的网页没有样式 <a href="http://www.coin163.com/it/x4042410272215986758/hexo-github-pages" target="_blank" rel="noopener">http://www.coin163.com/it/x4042410272215986758/hexo-github-pages</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a> <a href="https://hexo.io/zh-cn/，建站详细信息可参考" target="_blank" rel="noopener">https://hexo.io/zh-cn/，建站详细信息可参考</a></li><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a> <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> ，主题</li></ul><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="部署到github-pages上的网页没有样式"><a href="#部署到github-pages上的网页没有样式" class="headerlink" title="部署到github-pages上的网页没有样式"></a>部署到github-pages上的网页没有样式</h3><p>这种情况时漏配置了站点_config.yml中的url和root导致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: http://**.github.io/blog/</span><br><span class="line">root: /blog</span><br></pre></td></tr></table></figure><h3 id="hexo生成的文档，不能正确解析语法中的标题"><a href="#hexo生成的文档，不能正确解析语法中的标题" class="headerlink" title="hexo生成的文档，不能正确解析语法中的标题"></a>hexo生成的文档，不能正确解析语法中的标题</h3><p>这是在hexo3.1之后，对语法校验更严格了，#后面需要添加空格</p><p><strong>本文作者</strong>：ttbb<br><strong>本文地址</strong>： <a href="http://steven-ji.github.io/blog/2018/03/25/hexo+github快速搭建博客/">http://steven-ji.github.io/blog/2018/03/25/hexo+github快速搭建博客/</a> <br><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="noopener">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo+github+next </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
